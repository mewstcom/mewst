# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `google-cloud-errors` gem.
# Please instead update this file by running `bin/tapioca gem google-cloud-errors`.

# source://google-cloud-errors//lib/google/cloud/errors.rb#18
module Google; end

# source://google-cloud-errors//lib/google/cloud/errors.rb#19
module Google::Cloud
  # source://google-cloud-pubsub/2.15.2/lib/google-cloud-pubsub.rb#63
  def pubsub(scope: T.unsafe(nil), timeout: T.unsafe(nil)); end

  class << self
    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#158
    def auto_load_files; end

    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#128
    def auto_load_gems; end

    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#91
    def configure; end

    # source://google-cloud-env/1.6.0/lib/google/cloud/env.rb#490
    def env; end

    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#103
    def init_configuration; end

    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#142
    def loaded_files; end

    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#62
    def new(project_id = T.unsafe(nil), credentials = T.unsafe(nil), retries: T.unsafe(nil), timeout: T.unsafe(nil)); end

    # source://google-cloud-pubsub/2.15.2/lib/google-cloud-pubsub.rb#102
    def pubsub(project_id = T.unsafe(nil), credentials = T.unsafe(nil), scope: T.unsafe(nil), timeout: T.unsafe(nil)); end
  end
end

# Aborted indicates the operation was aborted, typically due to a
# concurrency issue like sequencer check failures, transaction aborts,
# etc.
#
# See litmus test above for deciding between FailedPrecondition,
# Aborted, and Unavailable.
#
# source://google-cloud-errors//lib/google/cloud/errors.rb#383
class Google::Cloud::AbortedError < ::Google::Cloud::Error
  # gRPC error code for ABORTED
  #
  # @return [Integer]
  #
  # source://google-cloud-errors//lib/google/cloud/errors.rb#388
  def code; end
end

# AlreadyExists means an attempt to create an entity failed because one
# already exists.
#
# source://google-cloud-errors//lib/google/cloud/errors.rb#306
class Google::Cloud::AlreadyExistsError < ::Google::Cloud::Error
  # gRPC error code for ALREADY_EXISTS
  #
  # @return [Integer]
  #
  # source://google-cloud-errors//lib/google/cloud/errors.rb#311
  def code; end
end

# Canceled indicates the operation was cancelled (typically by the caller).
#
# source://google-cloud-errors//lib/google/cloud/errors.rb#233
class Google::Cloud::CanceledError < ::Google::Cloud::Error
  # gRPC error code for CANCELLED
  #
  # @return [Integer]
  #
  # source://google-cloud-errors//lib/google/cloud/errors.rb#238
  def code; end
end

# DataLoss indicates unrecoverable data loss or corruption.
#
# source://google-cloud-errors//lib/google/cloud/errors.rb#465
class Google::Cloud::DataLossError < ::Google::Cloud::Error
  # gRPC error code for DATA_LOSS
  #
  # @return [Integer]
  #
  # source://google-cloud-errors//lib/google/cloud/errors.rb#470
  def code; end
end

# DeadlineExceeded means operation expired before completion.
# For operations that change the state of the system, this error may be
# returned even if the operation has completed successfully. For
# example, a successful response from a server could have been delayed
# long enough for the deadline to expire.
#
# source://google-cloud-errors//lib/google/cloud/errors.rb#280
class Google::Cloud::DeadlineExceededError < ::Google::Cloud::Error
  # gRPC error code for DEADLINE_EXCEEDED
  #
  # @return [Integer]
  #
  # source://google-cloud-errors//lib/google/cloud/errors.rb#285
  def code; end
end

# Base google-cloud exception class.
#
# source://google-cloud-errors//lib/google/cloud/errors.rb#22
class Google::Cloud::Error < ::StandardError
  # Construct a new Google::Cloud::Error object, optionally passing in a
  # message.
  #
  # @param msg [String, nil] an error message
  # @return [Error] a new instance of Error
  #
  # source://google-cloud-errors//lib/google/cloud/errors.rb#28
  def initialize(msg = T.unsafe(nil)); end

  # Returns the value of `body` from the underlying cause error
  # object, if both are present. Otherwise returns `nil`.
  #
  # This is typically present on errors originating from calls to an API
  # over HTTP/REST.
  #
  # @return [Object, nil]
  #
  # source://google-cloud-errors//lib/google/cloud/errors.rb#53
  def body; end

  # Returns the value of `code` from the underlying cause error
  # object, if both are present. Otherwise returns `nil`.
  #
  # This is typically present on errors originating from calls to an API
  # over gRPC.
  #
  # @return [Object, nil]
  #
  # source://google-cloud-errors//lib/google/cloud/errors.rb#79
  def code; end

  # Returns the value of `details` from the underlying cause error
  # object, if both are present. Otherwise returns `nil`.
  #
  # This is typically present on errors originating from calls to an API
  # over gRPC.
  #
  # @return [Object, nil]
  #
  # source://google-cloud-errors//lib/google/cloud/errors.rb#92
  def details; end

  # Returns the value of `domain` from the `::Google::Rpc::ErrorInfo`
  # object, if it exists in the `status_details` array.
  #
  # This is typically present on errors originating from calls to an API
  # over gRPC.
  #
  # @return [Object, nil]
  #
  # source://google-cloud-errors//lib/google/cloud/errors.rb#154
  def domain; end

  # Returns the `::Google::Rpc::ErrorInfo` object present in the `status_details`
  # or `details` array, given that the following is true:
  #   * either `status_details` or `details` exists and is an array
  #   * there is exactly one `::Google::Rpc::ErrorInfo` object in that array.
  # Looks in `status_details` first, then in `details`.
  #
  # @return [::Google::Rpc::ErrorInfo, nil]
  #
  # source://google-cloud-errors//lib/google/cloud/errors.rb#131
  def error_info; end

  # Returns the value of `metadata` from the `::Google::Rpc::ErrorInfo`
  # object, if it exists in the `status_details` array.
  #
  # This is typically present on errors originating from calls to an API
  # over gRPC.
  #
  # @return [Hash, nil]
  #
  # source://google-cloud-errors//lib/google/cloud/errors.rb#180
  def error_metadata; end

  # Returns the value of `header` from the underlying cause error
  # object, if both are present. Otherwise returns `nil`.
  #
  # This is typically present on errors originating from calls to an API
  # over HTTP/REST.
  #
  # @return [Object, nil]
  #
  # source://google-cloud-errors//lib/google/cloud/errors.rb#66
  def header; end

  # Returns the value of `metadata` from the underlying cause error
  # object, if both are present. Otherwise returns `nil`.
  #
  # This is typically present on errors originating from calls to an API
  # over gRPC.
  #
  # @return [Object, nil]
  #
  # source://google-cloud-errors//lib/google/cloud/errors.rb#105
  def metadata; end

  # Returns the value of `reason` from the `::Google::Rpc::ErrorInfo`
  # object, if it exists in the `status_details` array.
  #
  # This is typically present on errors originating from calls to an API
  # over gRPC.
  #
  # @return [Object, nil]
  #
  # source://google-cloud-errors//lib/google/cloud/errors.rb#167
  def reason; end

  # Returns the value of `status_code` from the underlying cause error
  # object, if both are present. Otherwise returns `nil`.
  #
  # This is typically present on errors originating from calls to an API
  # over HTTP/REST.
  #
  # @return [Object, nil]
  #
  # source://google-cloud-errors//lib/google/cloud/errors.rb#40
  def status_code; end

  # Returns the value of `status_details` from the underlying cause error
  # object, if both are present. Otherwise returns `nil`.
  #
  # This is typically present on errors originating from calls to an API
  # over gRPC.
  #
  # @return [Object, nil]
  #
  # source://google-cloud-errors//lib/google/cloud/errors.rb#118
  def status_details; end

  class << self
    # @private Create a new error object from a client error
    #
    # source://google-cloud-errors//lib/google/cloud/errors.rb#186
    def from_error(error); end

    # @private Identify the subclass for a Google API Client error
    #
    # source://google-cloud-errors//lib/google/cloud/errors.rb#212
    def gapi_error_class_for(http_status_code); end

    # @private Identify the subclass for a gRPC error
    #
    # source://google-cloud-errors//lib/google/cloud/errors.rb#198
    def grpc_error_class_for(grpc_error_code); end
  end
end

# source://google-cloud-errors//lib/google/cloud/errors/version.rb#18
module Google::Cloud::Errors; end

# source://google-cloud-errors//lib/google/cloud/errors/version.rb#19
Google::Cloud::Errors::VERSION = T.let(T.unsafe(nil), String)

# FailedPrecondition indicates operation was rejected because the
# system is not in a state required for the operation's execution.
# For example, directory to be deleted may be non-empty, an rmdir
# operation is applied to a non-directory, etc.
#
# A litmus test that may help a service implementor in deciding
# between FailedPrecondition, Aborted, and Unavailable:
#  (a) Use Unavailable if the client can retry just the failing call.
#  (b) Use Aborted if the client should retry at a higher-level
#      (e.g., restarting a read-modify-write sequence).
#  (c) Use FailedPrecondition if the client should not retry until
#      the system state has been explicitly fixed.  E.g., if an "rmdir"
#      fails because the directory is non-empty, FailedPrecondition
#      should be returned since the client should not retry unless
#      they have first fixed up the directory by deleting files from it.
#  (d) Use FailedPrecondition if the client performs conditional
#      REST Get/Update/Delete on a resource and the resource on the
#      server does not match the condition. E.g., conflicting
#      read-modify-write on the same resource.
#
# source://google-cloud-errors//lib/google/cloud/errors.rb#366
class Google::Cloud::FailedPreconditionError < ::Google::Cloud::Error
  # gRPC error code for FAILED_PRECONDITION
  #
  # @return [Integer]
  #
  # source://google-cloud-errors//lib/google/cloud/errors.rb#371
  def code; end
end

# Internal errors.  Means some invariants expected by underlying
# system has been broken.  If you see one of these errors,
# something is very broken.
#
# source://google-cloud-errors//lib/google/cloud/errors.rb#436
class Google::Cloud::InternalError < ::Google::Cloud::Error
  # gRPC error code for INTERNAL
  #
  # @return [Integer]
  #
  # source://google-cloud-errors//lib/google/cloud/errors.rb#441
  def code; end
end

# InvalidArgument indicates client specified an invalid argument.
# Note that this differs from FailedPrecondition. It indicates arguments
# that are problematic regardless of the state of the system
# (e.g., a malformed file name).
#
# source://google-cloud-errors//lib/google/cloud/errors.rb#264
class Google::Cloud::InvalidArgumentError < ::Google::Cloud::Error
  # gRPC error code for INVALID_ARGUMENT
  #
  # @return [Integer]
  #
  # source://google-cloud-errors//lib/google/cloud/errors.rb#269
  def code; end
end

# NotFound means some requested entity (e.g., file or directory) was
# not found.
#
# source://google-cloud-errors//lib/google/cloud/errors.rb#293
class Google::Cloud::NotFoundError < ::Google::Cloud::Error
  # gRPC error code for NOT_FOUND
  #
  # @return [Integer]
  #
  # source://google-cloud-errors//lib/google/cloud/errors.rb#298
  def code; end
end

# OutOfRange means operation was attempted past the valid range.
# E.g., seeking or reading past end of file.
#
# Unlike InvalidArgument, this error indicates a problem that may
# be fixed if the system state changes. For example, a 32-bit file
# system will generate InvalidArgument if asked to read at an
# offset that is not in the range [0,2^32-1], but it will generate
# OutOfRange if asked to read from an offset past the current
# file size.
#
# There is a fair bit of overlap between FailedPrecondition and
# OutOfRange.  We recommend using OutOfRange (the more specific
# error) when it applies so that callers who are iterating through
# a space can easily look for an OutOfRange error to detect when
# they are done.
#
# source://google-cloud-errors//lib/google/cloud/errors.rb#409
class Google::Cloud::OutOfRangeError < ::Google::Cloud::Error
  # gRPC error code for OUT_OF_RANGE
  #
  # @return [Integer]
  #
  # source://google-cloud-errors//lib/google/cloud/errors.rb#414
  def code; end
end

# PermissionDenied indicates the caller does not have permission to
# execute the specified operation. It must not be used for rejections
# caused by exhausting some resource (use ResourceExhausted
# instead for those errors).  It must not be
# used if the caller cannot be identified (use Unauthenticated
# instead for those errors).
#
# source://google-cloud-errors//lib/google/cloud/errors.rb#323
class Google::Cloud::PermissionDeniedError < ::Google::Cloud::Error
  # gRPC error code for PERMISSION_DENIED
  #
  # @return [Integer]
  #
  # source://google-cloud-errors//lib/google/cloud/errors.rb#328
  def code; end
end

# ResourceExhausted indicates some resource has been exhausted, perhaps
# a per-user quota, or perhaps the entire file system is out of space.
#
# source://google-cloud-errors//lib/google/cloud/errors.rb#336
class Google::Cloud::ResourceExhaustedError < ::Google::Cloud::Error
  # gRPC error code for RESOURCE_EXHAUSTED
  #
  # @return [Integer]
  #
  # source://google-cloud-errors//lib/google/cloud/errors.rb#341
  def code; end
end

# Unauthenticated indicates the request does not have valid
# authentication credentials for the operation.
#
# source://google-cloud-errors//lib/google/cloud/errors.rb#478
class Google::Cloud::UnauthenticatedError < ::Google::Cloud::Error
  # gRPC error code for UNAUTHENTICATED
  #
  # @return [Integer]
  #
  # source://google-cloud-errors//lib/google/cloud/errors.rb#483
  def code; end
end

# Unavailable indicates the service is currently unavailable.
# This is a most likely a transient condition and may be corrected
# by retrying with a backoff.
#
# See litmus test above for deciding between FailedPrecondition,
# Aborted, and Unavailable.
#
# source://google-cloud-errors//lib/google/cloud/errors.rb#453
class Google::Cloud::UnavailableError < ::Google::Cloud::Error
  # gRPC error code for UNAVAILABLE
  #
  # @return [Integer]
  #
  # source://google-cloud-errors//lib/google/cloud/errors.rb#458
  def code; end
end

# Unimplemented indicates operation is not implemented or not
# supported/enabled in this service.
#
# source://google-cloud-errors//lib/google/cloud/errors.rb#422
class Google::Cloud::UnimplementedError < ::Google::Cloud::Error
  # gRPC error code for UNIMPLEMENTED
  #
  # @return [Integer]
  #
  # source://google-cloud-errors//lib/google/cloud/errors.rb#427
  def code; end
end

# Unknown error.  An example of where this error may be returned is
# if a Status value received from another address space belongs to
# an error-space that is not known in this address space.  Also
# errors raised by APIs that do not return enough error information
# may be converted to this error.
#
# source://google-cloud-errors//lib/google/cloud/errors.rb#249
class Google::Cloud::UnknownError < ::Google::Cloud::Error
  # gRPC error code for UNKNOWN
  #
  # @return [Integer]
  #
  # source://google-cloud-errors//lib/google/cloud/errors.rb#254
  def code; end
end
