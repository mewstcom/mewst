# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `shrine` gem.
# Please instead update this file by running `bin/tapioca gem shrine`.

class Shrine
  include ::Shrine::InstanceMethods
  extend ::Shrine::ClassMethods

  class << self
    def version; end
  end
end

class Shrine::Attacher
  include ::Shrine::Attacher::InstanceMethods
  extend ::Shrine::Attacher::ClassMethods
end

module Shrine::Attacher::ClassMethods
  def from_data(data, **options); end
  def inspect; end
  def shrine_class; end
  def shrine_class=(_arg0); end
end

module Shrine::Attacher::InstanceMethods
  def initialize(file: T.unsafe(nil), cache: T.unsafe(nil), store: T.unsafe(nil)); end

  def assign(value, **options); end
  def attach(io, storage: T.unsafe(nil), **options); end
  def attach_cached(value, **options); end
  def attached?; end
  def cache; end
  def cache_key; end
  def cached?(file = T.unsafe(nil)); end
  def change(file); end
  def changed?; end
  def context; end
  def data; end
  def destroy; end
  def destroy_attached; end
  def destroy_previous; end
  def file; end
  def file!; end
  def file=(file); end
  def finalize; end
  def get; end
  def load_data(data); end
  def promote(storage: T.unsafe(nil), **options); end
  def promote_cached(**options); end
  def save; end
  def set(file); end
  def shrine_class; end
  def store; end
  def store_key; end
  def stored?(file = T.unsafe(nil)); end
  def upload(io, storage = T.unsafe(nil), **options); end
  def uploaded_file(value); end
  def url(**options); end

  private

  def cached(value, **_arg1); end
  def change?(file); end
  def destroy?; end
  def promote?; end
  def uploaded?(file, storage_key); end
end

class Shrine::Attachment < ::Module
  include ::Shrine::Attachment::InstanceMethods
  extend ::Shrine::Attachment::ClassMethods
end

module Shrine::Attachment::ClassMethods
  def [](*args, **options); end
  def inspect; end
  def shrine_class; end
  def shrine_class=(_arg0); end
end

module Shrine::Attachment::InstanceMethods
  def initialize(name, **options); end

  def attachment_name; end
  def inspect; end
  def options; end
  def shrine_class; end
  def to_s; end
end

module Shrine::ClassMethods
  def Attachment(name, **args); end
  def [](name, **args); end
  def attachment(name, **args); end
  def deprecation(message); end
  def find_storage(name); end
  def inherited(subclass); end
  def logger; end
  def logger=(_arg0); end
  def opts; end
  def plugin(plugin, *args, **kwargs, &block); end
  def storages; end
  def storages=(_arg0); end
  def upload(io, storage, **options); end
  def uploaded_file(object); end
  def warn(message); end
  def with_file(io); end

  private

  def deep_dup(collection); end
end

class Shrine::Error < ::StandardError; end
class Shrine::FileNotFound < ::Shrine::Error; end

module Shrine::InstanceMethods
  def initialize(storage_key); end

  def extract_metadata(io, **options); end
  def generate_location(io, metadata: T.unsafe(nil), **options); end
  def opts; end
  def storage; end
  def storage_key; end
  def upload(io, **options); end

  private

  def _enforce_io(io); end
  def _upload(io, location:, metadata:, upload_options: T.unsafe(nil), close: T.unsafe(nil), delete: T.unsafe(nil), **_arg6); end
  def basic_location(io, metadata:); end
  def extract_filename(io); end
  def extract_mime_type(io); end
  def extract_size(io); end
  def generate_uid(io); end
  def get_location(io, location: T.unsafe(nil), **options); end
  def get_metadata(io, metadata: T.unsafe(nil), **options); end
end

class Shrine::InvalidFile < ::Shrine::Error
  def initialize(io, missing_methods); end
end

module Shrine::Plugins
  class << self
    def configure(plugin, uploader, *args, **kwargs, &block); end
    def load_dependencies(plugin, uploader, *args, **kwargs, &block); end
    def load_plugin(name); end
    def register_plugin(name, mod); end
  end
end

class Shrine::UploadedFile
  include ::Shrine::UploadedFile::InstanceMethods
  extend ::Shrine::UploadedFile::ClassMethods
end

module Shrine::UploadedFile::ClassMethods
  def inspect; end
  def shrine_class; end
  def shrine_class=(_arg0); end
end

module Shrine::UploadedFile::InstanceMethods
  def initialize(data); end

  def ==(other); end
  def [](key); end
  def as_json(*args); end
  def close; end
  def content_type; end
  def data; end
  def delete; end
  def download(**options); end
  def eof?; end
  def eql?(other); end
  def exists?; end
  def extension; end
  def hash; end
  def id; end
  def inspect; end
  def metadata; end
  def mime_type; end
  def open(**options); end
  def opened?; end
  def original_filename; end
  def read(*args); end
  def replace(io, **options); end
  def rewind; end
  def shrine_class; end
  def size; end
  def storage; end
  def storage_key; end
  def stream(destination, **options); end
  def to_io; end
  def to_json(*args); end
  def uploader; end
  def url(**options); end

  private

  def _open(**options); end
  def io; end
end

module Shrine::VERSION; end
Shrine::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)
Shrine::VERSION::MINOR = T.let(T.unsafe(nil), Integer)
Shrine::VERSION::STRING = T.let(T.unsafe(nil), String)
Shrine::VERSION::TINY = T.let(T.unsafe(nil), Integer)
