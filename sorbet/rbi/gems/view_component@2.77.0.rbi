# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `view_component` gem.
# Please instead update this file by running `bin/tapioca gem view_component`.

module ViewComponent
  extend ::ActiveSupport::Autoload
end

class ViewComponent::Base < ::ActionView::Base
  include ::ViewComponent::ContentAreas
  include ::ViewComponent::PolymorphicSlots
  include ::ViewComponent::PolymorphicSlots::InstanceMethods
  include ::ViewComponent::SlotableV2
  include ::ViewComponent::Translatable
  include ::ViewComponent::WithContentHelper
  extend ::ViewComponent::ContentAreas::ClassMethods
  extend ::ViewComponent::SlotableV2::ClassMethods
  extend ::ViewComponent::Translatable::ClassMethods
  extend ::ViewComponent::PolymorphicSlots::ClassMethods

  def initialize(*_arg0); end

  def __vc_original_view_context; end
  def __vc_original_view_context=(_arg0); end
  def _warn_on_deprecated_slot_setter; end
  def _warn_on_deprecated_slot_setter=(_arg0); end
  def _warn_on_deprecated_slot_setter?; end
  def before_render; end
  def before_render_check; end
  def config(*_arg0, **_arg1, &_arg2); end
  def content_areas; end
  def content_areas=(_arg0); end
  def content_areas?; end
  def controller; end
  def form_authenticity_token(*_arg0, **_arg1, &_arg2); end
  def format; end
  def helpers; end
  def i18n_backend; end
  def output_postamble; end
  def protect_against_forgery?(*_arg0, **_arg1, &_arg2); end
  def registered_slots; end
  def registered_slots=(_arg0); end
  def registered_slots?; end
  def render(options = T.unsafe(nil), args = T.unsafe(nil), &block); end
  def render?; end
  def render_in(view_context, &block); end
  def render_parent; end
  def request; end
  def set_original_view_context(view_context); end
  def view_cache_dependencies; end
  def virtual_path; end
  def with_variant(*args, **_arg1, &block); end

  private

  def content; end
  def content_evaluated?; end
  def view_context; end

  class << self
    def __vc_strip_trailing_whitespace; end
    def __vc_strip_trailing_whitespace=(value); end
    def _deprecated_generate_mattr_accessor(name); end
    def _warn_on_deprecated_slot_setter; end
    def _warn_on_deprecated_slot_setter=(value); end
    def _warn_on_deprecated_slot_setter?; end
    def collection_counter_parameter; end
    def collection_iteration_parameter; end
    def collection_parameter; end
    def compile(raise_errors: T.unsafe(nil), force: T.unsafe(nil)); end
    def compiled?; end
    def compiler; end
    def component_parent_class(*_arg0, **_arg1, &_arg2); end
    def config; end
    def config=(_arg0); end
    def content_areas; end
    def content_areas=(value); end
    def content_areas?; end
    def counter_argument_present?; end
    def default_preview_layout(*_arg0, **_arg1, &_arg2); end
    def format; end
    def generate(*_arg0, **_arg1, &_arg2); end
    def generate_distinct_locale_files; end
    def generate_distinct_locale_files=(value); end
    def generate_locale; end
    def generate_locale=(value); end
    def generate_sidecar; end
    def generate_sidecar=(value); end
    def generate_stimulus_controller; end
    def generate_stimulus_controller=(value); end
    def i18n_backend; end
    def i18n_backend=(value); end
    def identifier; end
    def inherited(child); end
    def instrumentation_enabled(*_arg0, **_arg1, &_arg2); end
    def iteration_argument_present?; end
    def preview_controller(*_arg0, **_arg1, &_arg2); end
    def preview_paths(*_arg0, **_arg1, &_arg2); end
    def preview_route(*_arg0, **_arg1, &_arg2); end
    def registered_slots; end
    def registered_slots=(value); end
    def registered_slots?; end
    def render_monkey_patch_enabled(*_arg0, **_arg1, &_arg2); end
    def short_identifier; end
    def show_previews(*_arg0, **_arg1, &_arg2); end
    def show_previews_source(*_arg0, **_arg1, &_arg2); end
    def sidecar_files(extensions); end
    def source_location; end
    def source_location=(_arg0); end
    def strip_trailing_whitespace(value = T.unsafe(nil)); end
    def strip_trailing_whitespace?; end
    def test_controller(*_arg0, **_arg1, &_arg2); end
    def type; end
    def validate_collection_parameter!(validate_default: T.unsafe(nil)); end
    def validate_initialization_parameters!; end
    def view_component_path(*_arg0, **_arg1, &_arg2); end
    def virtual_path; end
    def virtual_path=(_arg0); end
    def with_collection(collection, **args); end
    def with_collection_parameter(parameter); end

    private

    def initialize_parameter_names; end
    def initialize_parameters; end
    def provided_collection_parameter; end
    def splatted_keyword_argument_present?; end
  end
end

ViewComponent::Base::RESERVED_PARAMETER = T.let(T.unsafe(nil), Symbol)
class ViewComponent::Base::ViewContextCalledBeforeRenderError < ::StandardError; end

class ViewComponent::Collection
  include ::Enumerable

  def initialize(component, object, **options); end

  def __vc_original_view_context; end
  def __vc_original_view_context=(_arg0); end
  def component; end
  def components; end
  def each(&block); end
  def format(*_arg0, **_arg1, &_arg2); end
  def render_in(view_context, &block); end
  def set_original_view_context(view_context); end
  def size(*_arg0, **_arg1, &_arg2); end

  private

  def collection_variable(object); end
  def component_options(item, iterator); end
end

module ViewComponent::CompileCache
  private

  def compiled?(klass); end
  def invalidate!; end
  def invalidate_class!(klass); end
  def register(klass); end

  class << self
    def cache; end
    def cache=(val); end
    def compiled?(klass); end
    def invalidate!; end
    def invalidate_class!(klass); end
    def register(klass); end
  end
end

class ViewComponent::Compiler
  def initialize(component_class); end

  def compile(raise_errors: T.unsafe(nil), force: T.unsafe(nil)); end
  def compiled?; end
  def development?; end
  def mode; end
  def mode=(_arg0); end
  def mode?; end

  private

  def call_method_name(variant); end
  def compiled_template(file_path); end
  def component_class; end
  def define_render_template_for; end
  def inline_calls; end
  def inline_calls_defined_on_self; end
  def normalized_variant_name(variant); end
  def redefinition_lock; end
  def should_compile_superclass?; end
  def template_errors; end
  def templates; end
  def variants; end
  def variants_from_inline_calls(calls); end

  class << self
    def mode; end
    def mode=(value); end
    def mode?; end
  end
end

ViewComponent::Compiler::DEVELOPMENT_MODE = T.let(T.unsafe(nil), Symbol)
ViewComponent::Compiler::PRODUCTION_MODE = T.let(T.unsafe(nil), Symbol)
class ViewComponent::ComponentError < ::StandardError; end

class ViewComponent::Config
  def initialize; end

  def method_missing(method, *args, **_arg2, &block); end
  def preview_path; end
  def preview_path=(new_value); end

  private

  def config; end
  def respond_to_missing?(name, include_private = T.unsafe(nil)); end

  class << self
    def default(*_arg0); end
    def default_preview_paths; end
    def defaults; end
  end
end

module ViewComponent::ContentAreas
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ViewComponent::ContentAreas::ClassMethods

  def with(area, content = T.unsafe(nil), &block); end
end

module ViewComponent::ContentAreas::ClassMethods
  def with_content_areas(*areas); end
end

ViewComponent::DEPRECATION_HORIZON = T.let(T.unsafe(nil), Integer)
ViewComponent::Deprecation = T.let(T.unsafe(nil), ActiveSupport::Deprecation)
class ViewComponent::Engine < ::Rails::Engine; end

module ViewComponent::Instrumentation
  def render_in(view_context, &block); end

  class << self
    def included(mod); end
  end
end

module ViewComponent::PolymorphicSlots
  include ::ViewComponent::PolymorphicSlots::InstanceMethods

  mixes_in_class_methods ::ViewComponent::PolymorphicSlots::ClassMethods

  class << self
    def included(base); end
  end
end

module ViewComponent::PolymorphicSlots::ClassMethods
  def register_polymorphic_slot(slot_name, types, collection:); end
  def renders_many(slot_name, callable = T.unsafe(nil)); end
  def renders_one(slot_name, callable = T.unsafe(nil)); end
end

module ViewComponent::PolymorphicSlots::InstanceMethods
  def set_polymorphic_slot(slot_name, poly_type = T.unsafe(nil), *args, **_arg3, &block); end
end

class ViewComponent::Preview
  include ::ActionView::Helpers::AssetUrlHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::TagHelper
  include ::ActionView::Helpers::AssetTagHelper
  extend ::ActiveSupport::DescendantsTracker

  def render(component, **args, &block); end
  def render_component(component, **args, &block); end
  def render_with_template(template: T.unsafe(nil), locals: T.unsafe(nil)); end

  class << self
    def all; end
    def examples; end
    def exists?(preview); end
    def find(preview); end
    def layout(layout_name); end
    def load_previews; end
    def preview_example_template_path(example); end
    def preview_name; end
    def preview_source(example); end
    def render_args(example, params: T.unsafe(nil)); end

    private

    def preview_paths; end
  end
end

module ViewComponent::PreviewActions
  extend ::ActiveSupport::Concern

  def index; end
  def previews; end

  private

  def default_preview_layout; end
  def determine_layout(layout_override = T.unsafe(nil), prepend_views: T.unsafe(nil)); end
  def find_preview; end
  def prepend_application_view_paths; end
  def prepend_preview_examples_view_path; end
  def set_locale(&block); end
  def show_previews?; end
end

class ViewComponent::PreviewTemplateError < ::StandardError; end

class ViewComponent::Slot
  def content; end
  def content=(_arg0); end
end

class ViewComponent::SlotV2
  include ::ViewComponent::WithContentHelper

  def initialize(parent); end

  def __vc_component_instance=(_arg0); end
  def __vc_content=(_arg0); end
  def __vc_content_block=(_arg0); end
  def html_safe?; end
  def method_missing(symbol, *args, **_arg2, &block); end
  def to_s; end

  private

  def respond_to_missing?(symbol, include_all = T.unsafe(nil)); end
end

module ViewComponent::Slotable
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ViewComponent::Slotable::ClassMethods

  def slot(slot_name, **args, &block); end

  module GeneratedClassMethods
    def slots; end
    def slots=(value); end
    def slots?; end
  end

  module GeneratedInstanceMethods
    def slots; end
    def slots=(value); end
    def slots?; end
  end
end

module ViewComponent::Slotable::ClassMethods
  def inherited(child); end
  def with_slot(*slot_names, collection: T.unsafe(nil), class_name: T.unsafe(nil)); end
end

module ViewComponent::SlotableV2
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ViewComponent::SlotableV2::ClassMethods

  def get_slot(slot_name); end
  def set_slot(slot_name, slot_definition = T.unsafe(nil), *args, **_arg3, &block); end

  module GeneratedClassMethods
    def _warn_on_deprecated_slot_setter; end
    def _warn_on_deprecated_slot_setter=(value); end
    def _warn_on_deprecated_slot_setter?; end
    def registered_slots; end
    def registered_slots=(value); end
    def registered_slots?; end
  end

  module GeneratedInstanceMethods
    def _warn_on_deprecated_slot_setter; end
    def _warn_on_deprecated_slot_setter=(value); end
    def _warn_on_deprecated_slot_setter?; end
    def registered_slots; end
    def registered_slots=(value); end
    def registered_slots?; end
  end
end

module ViewComponent::SlotableV2::ClassMethods
  def inherited(child); end
  def renders_many(slot_name, callable = T.unsafe(nil)); end
  def renders_one(slot_name, callable = T.unsafe(nil)); end
  def slot_type(slot_name); end
  def warn_on_deprecated_slot_setter; end

  private

  def define_slot(slot_name, collection:, callable:); end
  def raise_if_slot_ends_with_question_mark(slot_name); end
  def raise_if_slot_registered(slot_name); end
  def register_slot(slot_name, **kwargs); end
  def validate_plural_slot_name(slot_name); end
  def validate_singular_slot_name(slot_name); end
end

ViewComponent::SlotableV2::RESERVED_NAMES = T.let(T.unsafe(nil), Hash)

class ViewComponent::TemplateError < ::StandardError
  def initialize(errors); end
end

class ViewComponent::TestCase < ::ActiveSupport::TestCase
  include ::ViewComponent::TestHelpers
end

module ViewComponent::TestHelpers
  def build_controller(klass); end
  def controller; end
  def render_in_view_context(&block); end
  def render_inline(component, **args, &block); end
  def render_preview(name, from: T.unsafe(nil), params: T.unsafe(nil)); end
  def rendered_component; end
  def rendered_content; end
  def request; end
  def with_controller_class(klass); end
  def with_request_url(path); end
  def with_variant(variant); end

  private

  def preview_class; end
end

module ViewComponent::Translatable
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ViewComponent::Translatable::ClassMethods

  def html_safe_translation(translation); end
  def i18n_scope; end
  def t(key = T.unsafe(nil), **options); end
  def translate(key = T.unsafe(nil), **options); end

  private

  def html_escape_translation_options!(options); end
  def i18n_option?(name); end

  module GeneratedClassMethods
    def i18n_backend; end
    def i18n_backend=(value); end
  end

  module GeneratedInstanceMethods
    def i18n_backend; end
  end
end

module ViewComponent::Translatable::ClassMethods
  def build_i18n_backend; end
  def i18n_scope; end
end

ViewComponent::Translatable::HTML_SAFE_TRANSLATION_KEY = T.let(T.unsafe(nil), Regexp)

class ViewComponent::Translatable::I18nBackend < ::I18n::Backend::Simple
  def initialize(i18n_scope:, load_paths:); end

  def load_translations; end
  def scope_data(data); end
  def store_translations(locale, data, options = T.unsafe(nil)); end
end

ViewComponent::Translatable::I18nBackend::EMPTY_HASH = T.let(T.unsafe(nil), Hash)

module ViewComponent::WithContentHelper
  def with_content(value); end
end
