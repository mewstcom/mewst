# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `google-cloud-env` gem.
# Please instead update this file by running `bin/tapioca gem google-cloud-env`.

# source://google-cloud-env//lib/google/cloud/env.rb#20
module Google; end

# source://google-cloud-env//lib/google/cloud/env.rb#21
module Google::Cloud
  # source://google-cloud-pubsub/2.15.1/lib/google-cloud-pubsub.rb#63
  def pubsub(scope: T.unsafe(nil), timeout: T.unsafe(nil)); end

  class << self
    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#158
    def auto_load_files; end

    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#128
    def auto_load_gems; end

    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#91
    def configure; end

    # Returns the global instance of {Google::Cloud::Env}.
    #
    # @return [Google::Cloud::Env]
    #
    # source://google-cloud-env//lib/google/cloud/env.rb#490
    def env; end

    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#103
    def init_configuration; end

    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#142
    def loaded_files; end

    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#62
    def new(project_id = T.unsafe(nil), credentials = T.unsafe(nil), retries: T.unsafe(nil), timeout: T.unsafe(nil)); end

    # source://google-cloud-pubsub/2.15.1/lib/google-cloud-pubsub.rb#102
    def pubsub(project_id = T.unsafe(nil), credentials = T.unsafe(nil), scope: T.unsafe(nil), timeout: T.unsafe(nil)); end
  end
end

# # Google Cloud hosting environment
#
# This library provides access to information about the application's
# hosting environment if it is running on Google Cloud Platform. You may
# use this library to determine which Google Cloud product is hosting your
# application (e.g. App Engine, Kubernetes Engine), information about the
# Google Cloud project hosting the application, information about the
# virtual machine instance, authentication information, and so forth.
#
# ## Usage
#
# Obtain an instance of the environment info with:
#
# ```ruby
# require "google/cloud/env"
# env = Google::Cloud.env
# ```
#
# Then you can interrogate any fields using methods on the object.
#
# ```ruby
# if env.app_engine?
#   # App engine specific logic
# end
# ```
#
# Any item that does not apply to the current environment will return nil.
# For example:
#
# ```ruby
# unless env.app_engine?
#   service = env.app_engine_service_id  # => nil
# end
# ```
#
# source://google-cloud-env//lib/google/cloud/env.rb#58
class Google::Cloud::Env
  # Create a new instance of the environment information.
  # Most client should not need to call this directly. Obtain a singleton
  # instance of the information from `Google::Cloud.env`. This constructor
  # is provided to allow customization of the timeout/retry settings, as
  # well as mocking for testing.
  #
  # @param env [Hash] Mock environment variables.
  # @param host [String] The hostname or IP address of the metadata server.
  #   Optional. If not specified, uses the `GCE_METADATA_HOST`,
  #   environment variable or falls back to `169.254.167.254`.
  # @param metadata_cache [Hash, false] The metadata cache. You may pass
  #   a prepopuated cache, an empty cache (the default) or `false` to
  #   disable the cache completely.
  # @param open_timeout [Numeric] Timeout for opening http connections.
  #   Defaults to 0.1.
  # @param request_timeout [Numeric] Timeout for entire http requests.
  #   Defaults to 1.0.
  # @param retry_count [Integer] Number of times to retry http requests.
  #   Defaults to 1. Note that retry remains in effect even if a custom
  #   `connection` is provided.
  # @param retry_interval [Numeric] Time between retries in seconds.
  #   Defaults to 0.1.
  # @param retry_backoff_factor [Numeric] Multiplier applied to the retry
  #   interval on each retry. Defaults to 1.5.
  # @param retry_max_interval [Numeric] Maximum time between retries in
  #   seconds. Defaults to 0.5.
  # @param connection [Faraday::Connection] Faraday connection to use.
  #   If specified, overrides the `request_timeout` and `open_timeout`
  #   settings.
  # @return [Env] a new instance of Env
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#108
  def initialize(env: T.unsafe(nil), host: T.unsafe(nil), connection: T.unsafe(nil), metadata_cache: T.unsafe(nil), open_timeout: T.unsafe(nil), request_timeout: T.unsafe(nil), retry_count: T.unsafe(nil), retry_interval: T.unsafe(nil), retry_backoff_factor: T.unsafe(nil), retry_max_interval: T.unsafe(nil)); end

  # Determine whether the application is running on Google App Engine.
  #
  # @return [Boolean]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#140
  def app_engine?; end

  # Determine whether the application is running on Google App Engine
  # Flexible Environment.
  #
  # @return [Boolean]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#150
  def app_engine_flexible?; end

  # Returns the amount of memory reserved for the current App Engine
  # instance, or `nil` if the current code is not running in App Engine.
  #
  # @return [Integer, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#371
  def app_engine_memory_mb; end

  # Returns the name of the running App Engine service, or `nil` if the
  # current code is not running in App Engine.
  #
  # @return [String, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#350
  def app_engine_service_id; end

  # Returns the name of the running App Engine service, or `nil` if the
  # current code is not running in App Engine.
  #
  # @return [String, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#350
  def app_engine_service_name; end

  # Returns the version of the running App Engine service, or `nil` if the
  # current code is not running in App Engine.
  #
  # @return [String, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#361
  def app_engine_service_version; end

  # Determine whether the application is running on Google App Engine
  # Standard Environment.
  #
  # @return [Boolean]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#160
  def app_engine_standard?; end

  # Determine whether the application is running on Google Cloud Shell.
  #
  # @return [Boolean]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#180
  def cloud_shell?; end

  # Determine whether the application is running on Google Compute Engine.
  #
  # Note that most other products (e.g. App Engine, Kubernetes Engine,
  # Cloud Shell) themselves use Compute Engine under the hood, so this
  # method will return true for all the above products. If you want to
  # determine whether the application is running on a "raw" Compute Engine
  # VM without using a higher level hosting product, use
  # {Env#raw_compute_engine?}.
  #
  # @return [Boolean]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#196
  def compute_engine?; end

  # Determine whether the application is running on Google Kubernetes
  # Engine (GKE).
  #
  # @return [Boolean]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#170
  def container_engine?; end

  # Returns the name of the Kubernetes Engine cluster hosting the
  # application, or `nil` if the current code is not running in
  # Kubernetes Engine.
  #
  # @return [String, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#383
  def container_engine_cluster_name; end

  # Returns the name of the Kubernetes Engine namespace hosting the
  # application, or `nil` if the current code is not running in
  # Kubernetes Engine.
  #
  # @return [String, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#395
  def container_engine_namespace_id; end

  # Returns the value of the given instance attribute for the VM instance
  # hosting the application, or `nil` if the given key does not exist or
  # application is not running on Google Cloud.
  #
  # @param key [String] Attribute key to look up.
  # @return [String, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#319
  def instance_attribute(key); end

  # Returns an array (which may be empty) of all attribute keys present
  # for the VM instance hosting the  application, or `nil` if the
  # application is not running on Google Cloud.
  #
  # @return [Array<String>, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#306
  def instance_attribute_keys; end

  # Returns the description field (which may be the empty string) of the
  # VM instance hosting the application, or `nil` if the application is
  # not running on Google Cloud.
  #
  # @return [String, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#260
  def instance_description; end

  # Returns the machine type of the VM instance hosting the application,
  # or `nil` if the application is not running on Google Cloud.
  #
  # @return [String, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#282
  def instance_machine_type; end

  # Returns the name of the VM instance hosting the application, or `nil`
  # if the application is not running on Google Cloud.
  #
  # @return [String, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#249
  def instance_name; end

  # Returns an array (which may be empty) of all tags set on the VM
  # instance hosting the  application, or `nil` if the application is not
  # running on Google Cloud.
  #
  # @return [Array<String>, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#294
  def instance_tags; end

  # Returns the zone (for example "`us-central1-c`") in which the instance
  # hosting the application lives. Returns `nil` if the application is
  # not running on Google Cloud.
  #
  # @return [String, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#271
  def instance_zone; end

  # Determine whether the application is running on a Knative-based
  # hosting platform, such as Cloud Run or Cloud Functions.
  #
  # @return [Boolean]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#131
  def knative?; end

  # Returns the name of the running Knative service, or `nil` if the
  # current code is not running on Knative.
  #
  # @return [String, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#329
  def knative_service_id; end

  # Returns the name of the running Knative service, or `nil` if the
  # current code is not running on Knative.
  #
  # @return [String, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#329
  def knative_service_name; end

  # Returns the revision of the running Knative service, or `nil` if the
  # current code is not running on Knative.
  #
  # @return [String, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#340
  def knative_service_revision; end

  # Determine whether the application is running on Google Kubernetes
  # Engine (GKE).
  #
  # @return [Boolean]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#170
  def kubernetes_engine?; end

  # Returns the name of the Kubernetes Engine cluster hosting the
  # application, or `nil` if the current code is not running in
  # Kubernetes Engine.
  #
  # @return [String, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#383
  def kubernetes_engine_cluster_name; end

  # Returns the name of the Kubernetes Engine namespace hosting the
  # application, or `nil` if the current code is not running in
  # Kubernetes Engine.
  #
  # @return [String, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#395
  def kubernetes_engine_namespace_id; end

  # Retrieve info from the Google Compute Engine Metadata Service.
  # Returns `nil` if the Metadata Service is not running or the given
  # data is not present.
  #
  # @param type [String] Type of metadata to look up. Currently supported
  #   values are "project" and "instance".
  # @param entry [String] Metadata entry path to look up.
  # @return [String, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#435
  def lookup_metadata(type, entry); end

  # Determine whether the Google Compute Engine Metadata Service is running.
  #
  # @return [Boolean]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#412
  def metadata?; end

  # Returns the unique numeric ID of the project hosting the application,
  # or `nil` if the application is not running on Google Cloud.
  #
  # Caveat: this method does not work and returns `nil` on CloudShell.
  #
  # @return [Integer, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#232
  def numeric_project_id; end

  # Returns the unique string ID of the project hosting the application,
  # or `nil` if the application is not running on Google Cloud.
  #
  # @return [String, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#217
  def project_id; end

  # Determine whether the application is running on "raw" Google Compute
  # Engine without using a higher level hosting product such as App
  # Engine or Kubernetes Engine.
  #
  # @return [Boolean]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#207
  def raw_compute_engine?; end

  private

  # Returns the value of attribute connection.
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#461
  def connection; end

  # Returns the value of attribute env.
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#462
  def env; end

  # Returns the value of attribute metadata_cache.
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#463
  def metadata_cache; end

  # source://google-cloud-env//lib/google/cloud/env.rb#465
  def retry_or_fail_with(error_result); end

  class << self
    # Returns the global instance of {Google::Cloud::Env}.
    #
    # @return [Google::Cloud::Env]
    #
    # source://google-cloud-env//lib/google/cloud/env.rb#455
    def get; end
  end
end

# @private
#
# source://google-cloud-env//lib/google/cloud/env.rb#69
Google::Cloud::Env::METADATA_FAILURE_EXCEPTIONS = T.let(T.unsafe(nil), Array)

# @private Base (host) URL for the metadata server.
#
# source://google-cloud-env//lib/google/cloud/env.rb#60
Google::Cloud::Env::METADATA_HOST = T.let(T.unsafe(nil), String)

# @private URL path for v1 of the metadata service.
#
# source://google-cloud-env//lib/google/cloud/env.rb#63
Google::Cloud::Env::METADATA_PATH_BASE = T.let(T.unsafe(nil), String)

# @private URL path for metadata server root.
#
# source://google-cloud-env//lib/google/cloud/env.rb#66
Google::Cloud::Env::METADATA_ROOT_PATH = T.let(T.unsafe(nil), String)

# source://google-cloud-env//lib/google/cloud/env/version.rb#19
Google::Cloud::Env::VERSION = T.let(T.unsafe(nil), String)
