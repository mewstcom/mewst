# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `openapi_parser` gem.
# Please instead update this file by running `bin/tapioca gem openapi_parser`.

# source://openapi_parser//lib/openapi_parser/version.rb#1
module OpenAPIParser
  class << self
    # Load schema in specified filepath. If file path is relative, it is resolved using working directory.
    #
    # @return [OpenAPIParser::Schemas::OpenAPI]
    #
    # source://openapi_parser//lib/openapi_parser.rb#37
    def load(filepath, config = T.unsafe(nil)); end

    # Load schema located by the passed uri. Uri must be absolute.
    #
    # @return [OpenAPIParser::Schemas::OpenAPI]
    #
    # source://openapi_parser//lib/openapi_parser.rb#43
    def load_uri(uri, config:, schema_registry:); end

    # Load schema hash object. Uri is not set for returned schema.
    #
    # @return [OpenAPIParser::Schemas::OpenAPI]
    #
    # source://openapi_parser//lib/openapi_parser.rb#23
    def parse(schema, config = T.unsafe(nil)); end

    # @param filepath [String] Path of the file containing the passed schema.
    #   Used for resolving remote $ref if provided.
    #   If file path is relative, it is resolved using working directory.
    # @return [OpenAPIParser::Schemas::OpenAPI]
    #
    # source://openapi_parser//lib/openapi_parser.rb#31
    def parse_with_filepath(schema, filepath, config = T.unsafe(nil)); end

    private

    # source://openapi_parser//lib/openapi_parser.rb#58
    def file_uri(filepath); end

    # source://openapi_parser//lib/openapi_parser.rb#91
    def load_hash(hash, config:, uri:, schema_registry:); end

    # source://openapi_parser//lib/openapi_parser.rb#64
    def parse_file(content, ext); end

    # source://openapi_parser//lib/openapi_parser.rb#87
    def parse_json(content); end

    # source://openapi_parser//lib/openapi_parser.rb#80
    def parse_yaml(content); end
  end
end

# source://openapi_parser//lib/openapi_parser/config.rb#1
class OpenAPIParser::Config
  # @return [Config] a new instance of Config
  #
  # source://openapi_parser//lib/openapi_parser/config.rb#2
  def initialize(config); end

  # source://openapi_parser//lib/openapi_parser/config.rb#18
  def coerce_value; end

  # source://openapi_parser//lib/openapi_parser/config.rb#14
  def datetime_coerce_class; end

  # source://openapi_parser//lib/openapi_parser/config.rb#22
  def expand_reference; end

  # @return [OpenAPIParser::SchemaValidator::Options]
  #
  # source://openapi_parser//lib/openapi_parser/config.rb#41
  def path_params_options; end

  # @return [OpenAPIParser::SchemaValidator::Options]
  #
  # source://openapi_parser//lib/openapi_parser/config.rb#41
  def request_body_options; end

  # @return [OpenAPIParser::SchemaValidator::Options]
  #
  # source://openapi_parser//lib/openapi_parser/config.rb#41
  def request_validator_options; end

  # @return [OpenAPIParser::SchemaValidator::ResponseValidateOptions]
  #
  # source://openapi_parser//lib/openapi_parser/config.rb#51
  def response_validate_options; end

  # source://openapi_parser//lib/openapi_parser/config.rb#32
  def strict_reference_validation; end

  # source://openapi_parser//lib/openapi_parser/config.rb#26
  def strict_response_validation; end

  # source://openapi_parser//lib/openapi_parser/config.rb#36
  def validate_header; end
end

# source://openapi_parser//lib/openapi_parser/concerns/expandable.rb#1
module OpenAPIParser::Expandable
  # expand refs
  #
  # @param root [OpenAPIParser::Schemas::Base]
  # @return nil
  #
  # source://openapi_parser//lib/openapi_parser/concerns/expandable.rb#5
  def expand_reference(root, validate_references); end

  private

  # source://openapi_parser//lib/openapi_parser/concerns/expandable.rb#21
  def expand_hash_attribute(root, name, validate_references); end

  # source://openapi_parser//lib/openapi_parser/concerns/expandable.rb#15
  def expand_hash_objects(root, attribute_names, validate_references); end

  # source://openapi_parser//lib/openapi_parser/concerns/expandable.rb#51
  def expand_list_objects(root, attribute_names, validate_references); end

  # source://openapi_parser//lib/openapi_parser/concerns/expandable.rb#68
  def expand_object(root, object, validate_references); end

  # source://openapi_parser//lib/openapi_parser/concerns/expandable.rb#36
  def expand_objects(root, attribute_names, validate_references); end

  # @param root [OpenAPIParser::Schemas::OpenAPI]
  # @param reference [OpenAPIParser::Schemas::Reference]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/expandable.rb#82
  def referenced_object(root, reference); end
end

# source://openapi_parser//lib/openapi_parser/concerns/findable.rb#4
module OpenAPIParser::Findable
  # @param reference [String]
  # @return [OpenAPIParser::Findable]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/findable.rb#7
  def find_object(reference); end

  # source://openapi_parser//lib/openapi_parser/concerns/findable.rb#35
  def purge_object_cache; end

  private

  # source://openapi_parser//lib/openapi_parser/concerns/findable.rb#48
  def find_remote_object(reference); end
end

# source://openapi_parser//lib/openapi_parser/errors.rb#198
class OpenAPIParser::InvalidDateFormat < ::OpenAPIParser::OpenAPIError
  # @return [InvalidDateFormat] a new instance of InvalidDateFormat
  #
  # source://openapi_parser//lib/openapi_parser/errors.rb#199
  def initialize(value, reference); end

  # source://openapi_parser//lib/openapi_parser/errors.rb#204
  def message; end
end

# source://openapi_parser//lib/openapi_parser/errors.rb#209
class OpenAPIParser::InvalidDateTimeFormat < ::OpenAPIParser::OpenAPIError
  # @return [InvalidDateTimeFormat] a new instance of InvalidDateTimeFormat
  #
  # source://openapi_parser//lib/openapi_parser/errors.rb#210
  def initialize(value, reference); end

  # source://openapi_parser//lib/openapi_parser/errors.rb#215
  def message; end
end

# source://openapi_parser//lib/openapi_parser/errors.rb#176
class OpenAPIParser::InvalidEmailFormat < ::OpenAPIParser::OpenAPIError
  # @return [InvalidEmailFormat] a new instance of InvalidEmailFormat
  #
  # source://openapi_parser//lib/openapi_parser/errors.rb#177
  def initialize(value, reference); end

  # source://openapi_parser//lib/openapi_parser/errors.rb#182
  def message; end
end

# source://openapi_parser//lib/openapi_parser/errors.rb#163
class OpenAPIParser::InvalidPattern < ::OpenAPIParser::OpenAPIError
  # @return [InvalidPattern] a new instance of InvalidPattern
  #
  # source://openapi_parser//lib/openapi_parser/errors.rb#164
  def initialize(value, pattern, reference, example); end

  # source://openapi_parser//lib/openapi_parser/errors.rb#171
  def message; end
end

# source://openapi_parser//lib/openapi_parser/errors.rb#187
class OpenAPIParser::InvalidUUIDFormat < ::OpenAPIParser::OpenAPIError
  # @return [InvalidUUIDFormat] a new instance of InvalidUUIDFormat
  #
  # source://openapi_parser//lib/openapi_parser/errors.rb#188
  def initialize(value, reference); end

  # source://openapi_parser//lib/openapi_parser/errors.rb#193
  def message; end
end

# source://openapi_parser//lib/openapi_parser/errors.rb#130
class OpenAPIParser::LessThanExclusiveMinimum < ::OpenAPIParser::OpenAPIError
  # @return [LessThanExclusiveMinimum] a new instance of LessThanExclusiveMinimum
  #
  # source://openapi_parser//lib/openapi_parser/errors.rb#131
  def initialize(value, reference); end

  # source://openapi_parser//lib/openapi_parser/errors.rb#136
  def message; end
end

# source://openapi_parser//lib/openapi_parser/errors.rb#265
class OpenAPIParser::LessThanMinItems < ::OpenAPIParser::OpenAPIError
  # @return [LessThanMinItems] a new instance of LessThanMinItems
  #
  # source://openapi_parser//lib/openapi_parser/errors.rb#266
  def initialize(value, reference); end

  # source://openapi_parser//lib/openapi_parser/errors.rb#271
  def message; end
end

# source://openapi_parser//lib/openapi_parser/errors.rb#243
class OpenAPIParser::LessThanMinLength < ::OpenAPIParser::OpenAPIError
  # @return [LessThanMinLength] a new instance of LessThanMinLength
  #
  # source://openapi_parser//lib/openapi_parser/errors.rb#244
  def initialize(value, reference); end

  # source://openapi_parser//lib/openapi_parser/errors.rb#249
  def message; end
end

# source://openapi_parser//lib/openapi_parser/errors.rb#119
class OpenAPIParser::LessThanMinimum < ::OpenAPIParser::OpenAPIError
  # @return [LessThanMinimum] a new instance of LessThanMinimum
  #
  # source://openapi_parser//lib/openapi_parser/errors.rb#120
  def initialize(value, reference); end

  # source://openapi_parser//lib/openapi_parser/errors.rb#125
  def message; end
end

# source://openapi_parser//lib/openapi_parser/concerns/media_type_selectable.rb#1
module OpenAPIParser::MediaTypeSelectable
  private

  # select media type by content_type (consider wild card definition)
  #
  # @param content_type [String]
  # @param content [Hash{String => OpenAPIParser::Schemas::MediaType}]
  # @return [OpenAPIParser::Schemas::MediaType, nil]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/media_type_selectable.rb#8
  def select_media_type_from_content(content_type, content); end
end

# source://openapi_parser//lib/openapi_parser/errors.rb#8
class OpenAPIParser::MissingReferenceError < ::OpenAPIParser::OpenAPIError
  # source://openapi_parser//lib/openapi_parser/errors.rb#9
  def message; end
end

# source://openapi_parser//lib/openapi_parser/errors.rb#152
class OpenAPIParser::MoreThanExclusiveMaximum < ::OpenAPIParser::OpenAPIError
  # @return [MoreThanExclusiveMaximum] a new instance of MoreThanExclusiveMaximum
  #
  # source://openapi_parser//lib/openapi_parser/errors.rb#153
  def initialize(value, reference); end

  # source://openapi_parser//lib/openapi_parser/errors.rb#158
  def message; end
end

# source://openapi_parser//lib/openapi_parser/errors.rb#254
class OpenAPIParser::MoreThanMaxItems < ::OpenAPIParser::OpenAPIError
  # @return [MoreThanMaxItems] a new instance of MoreThanMaxItems
  #
  # source://openapi_parser//lib/openapi_parser/errors.rb#255
  def initialize(value, reference); end

  # source://openapi_parser//lib/openapi_parser/errors.rb#260
  def message; end
end

# source://openapi_parser//lib/openapi_parser/errors.rb#232
class OpenAPIParser::MoreThanMaxLength < ::OpenAPIParser::OpenAPIError
  # @return [MoreThanMaxLength] a new instance of MoreThanMaxLength
  #
  # source://openapi_parser//lib/openapi_parser/errors.rb#233
  def initialize(value, reference); end

  # source://openapi_parser//lib/openapi_parser/errors.rb#238
  def message; end
end

# source://openapi_parser//lib/openapi_parser/errors.rb#141
class OpenAPIParser::MoreThanMaximum < ::OpenAPIParser::OpenAPIError
  # @return [MoreThanMaximum] a new instance of MoreThanMaximum
  #
  # source://openapi_parser//lib/openapi_parser/errors.rb#142
  def initialize(value, reference); end

  # source://openapi_parser//lib/openapi_parser/errors.rb#147
  def message; end
end

# source://openapi_parser//lib/openapi_parser/errors.rb#97
class OpenAPIParser::NotAnyOf < ::OpenAPIParser::OpenAPIError
  # @return [NotAnyOf] a new instance of NotAnyOf
  #
  # source://openapi_parser//lib/openapi_parser/errors.rb#98
  def initialize(value, reference); end

  # source://openapi_parser//lib/openapi_parser/errors.rb#103
  def message; end
end

# source://openapi_parser//lib/openapi_parser/errors.rb#108
class OpenAPIParser::NotEnumInclude < ::OpenAPIParser::OpenAPIError
  # @return [NotEnumInclude] a new instance of NotEnumInclude
  #
  # source://openapi_parser//lib/openapi_parser/errors.rb#109
  def initialize(value, reference); end

  # source://openapi_parser//lib/openapi_parser/errors.rb#114
  def message; end
end

# source://openapi_parser//lib/openapi_parser/errors.rb#226
class OpenAPIParser::NotExistContentTypeDefinition < ::OpenAPIParser::OpenAPIError
  # source://openapi_parser//lib/openapi_parser/errors.rb#227
  def message; end
end

# source://openapi_parser//lib/openapi_parser/errors.rb#63
class OpenAPIParser::NotExistDiscriminatorMappedSchema < ::OpenAPIParser::OpenAPIError
  # @return [NotExistDiscriminatorMappedSchema] a new instance of NotExistDiscriminatorMappedSchema
  #
  # source://openapi_parser//lib/openapi_parser/errors.rb#64
  def initialize(mapped_schema_reference, reference); end

  # source://openapi_parser//lib/openapi_parser/errors.rb#69
  def message; end
end

# source://openapi_parser//lib/openapi_parser/errors.rb#74
class OpenAPIParser::NotExistDiscriminatorPropertyName < ::OpenAPIParser::OpenAPIError
  # @return [NotExistDiscriminatorPropertyName] a new instance of NotExistDiscriminatorPropertyName
  #
  # source://openapi_parser//lib/openapi_parser/errors.rb#75
  def initialize(key, value, reference); end

  # source://openapi_parser//lib/openapi_parser/errors.rb#81
  def message; end
end

# source://openapi_parser//lib/openapi_parser/errors.rb#52
class OpenAPIParser::NotExistPropertyDefinition < ::OpenAPIParser::OpenAPIError
  # @return [NotExistPropertyDefinition] a new instance of NotExistPropertyDefinition
  #
  # source://openapi_parser//lib/openapi_parser/errors.rb#53
  def initialize(keys, reference); end

  # source://openapi_parser//lib/openapi_parser/errors.rb#58
  def message; end
end

# source://openapi_parser//lib/openapi_parser/errors.rb#41
class OpenAPIParser::NotExistRequiredKey < ::OpenAPIParser::OpenAPIError
  # @return [NotExistRequiredKey] a new instance of NotExistRequiredKey
  #
  # source://openapi_parser//lib/openapi_parser/errors.rb#42
  def initialize(keys, reference); end

  # source://openapi_parser//lib/openapi_parser/errors.rb#47
  def message; end
end

# source://openapi_parser//lib/openapi_parser/errors.rb#220
class OpenAPIParser::NotExistStatusCodeDefinition < ::OpenAPIParser::OpenAPIError
  # source://openapi_parser//lib/openapi_parser/errors.rb#221
  def message; end
end

# source://openapi_parser//lib/openapi_parser/errors.rb#35
class OpenAPIParser::NotNullError < ::OpenAPIParser::OpenAPIError
  # source://openapi_parser//lib/openapi_parser/errors.rb#36
  def message; end
end

# source://openapi_parser//lib/openapi_parser/errors.rb#86
class OpenAPIParser::NotOneOf < ::OpenAPIParser::OpenAPIError
  # @return [NotOneOf] a new instance of NotOneOf
  #
  # source://openapi_parser//lib/openapi_parser/errors.rb#87
  def initialize(value, reference); end

  # source://openapi_parser//lib/openapi_parser/errors.rb#92
  def message; end
end

# source://openapi_parser//lib/openapi_parser/errors.rb#2
class OpenAPIParser::OpenAPIError < ::StandardError
  # @return [OpenAPIError] a new instance of OpenAPIError
  #
  # source://openapi_parser//lib/openapi_parser/errors.rb#3
  def initialize(reference); end
end

# source://openapi_parser//lib/openapi_parser/concerns/parameter_validatable.rb#1
module OpenAPIParser::ParameterValidatable
  # @param path_item [PathItem] parent
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parameter_validatable.rb#17
  def set_parent_path_item(path_item); end

  # @param path_params [Hash] path parameters
  # @param options [OpenAPIParser::SchemaValidator::Options] request validator options
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parameter_validatable.rb#4
  def validate_path_params(path_params, options); end

  # @param params [Hash] parameter hash
  # @param headers [Hash] headers hash
  # @param options [OpenAPIParser::SchemaValidator::Options] request validator options
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parameter_validatable.rb#11
  def validate_request_parameter(params, headers, options); end

  private

  # @return [Hash{String => Hash{String => Parameter}}] hash[in][name] => Parameter
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parameter_validatable.rb#51
  def divided_parameter_hash; end

  # source://openapi_parser//lib/openapi_parser/concerns/parameter_validatable.rb#38
  def header_parameter_hash; end

  # source://openapi_parser//lib/openapi_parser/concerns/parameter_validatable.rb#42
  def path_parameter_hash; end

  # source://openapi_parser//lib/openapi_parser/concerns/parameter_validatable.rb#46
  def query_parameter_hash; end

  # @param headers [Hash] header hash
  # @param object_reference [String]
  # @param options [OpenAPIParser::SchemaValidator::Options] request validator options
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parameter_validatable.rb#34
  def validate_header_parameter(headers, object_reference, options); end

  # @param params [Hash] query parameter hash
  # @param object_reference [String]
  # @param options [OpenAPIParser::SchemaValidator::Options] request validator options
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parameter_validatable.rb#27
  def validate_query_parameter(params, object_reference, options); end
end

# source://openapi_parser//lib/openapi_parser/parameter_validator.rb#1
class OpenAPIParser::ParameterValidator
  class << self
    # @param parameters_hash [Hash{String => Parameter}]
    # @param params [Hash]
    # @param object_reference [String]
    # @param options [OpenAPIParser::SchemaValidator::Options]
    # @param is_header [Boolean] is header or not (ignore params key case)
    # @raise [OpenAPIParser::NotExistRequiredKey]
    #
    # source://openapi_parser//lib/openapi_parser/parameter_validator.rb#8
    def validate_parameter(parameters_hash, params, object_reference, options, is_header = T.unsafe(nil)); end

    private

    # source://openapi_parser//lib/openapi_parser/parameter_validator.rb#29
    def convert_key(k, is_header); end
  end
end

# source://openapi_parser//lib/openapi_parser/concerns/parser.rb#1
module OpenAPIParser::Parser
  mixes_in_class_methods ::OpenAPIParser::Parser::ClassMethods

  # @return [Hash{String => OpenAPIParser::Schemas::Base}]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser.rb#34
  def _openapi_all_child_objects; end

  # @param old [OpenAPIParser::Schemas::Base]
  # @param new [OpenAPIParser::Schemas::Base]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser.rb#29
  def _update_child_object(old, new); end

  # load data by schema definition in core and set children to _openapi_all_child_objects
  #
  # @return nil
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser.rb#40
  def load_data; end

  class << self
    # @private
    #
    # source://openapi_parser//lib/openapi_parser/concerns/parser.rb#10
    def included(base); end
  end
end

# source://openapi_parser//lib/openapi_parser/concerns/parser.rb#13
module OpenAPIParser::Parser::ClassMethods
  extend ::Forwardable

  # source://forwardable/1.3.3/forwardable.rb#231
  def _openapi_attr_hash_body_objects(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def _openapi_attr_hash_objects(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def _openapi_attr_list_objects(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def _openapi_attr_objects(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def _openapi_attr_values(*args, **_arg1, &block); end

  # source://openapi_parser//lib/openapi_parser/concerns/parser.rb#22
  def _parser_core; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def openapi_attr_hash_body_objects(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def openapi_attr_hash_object(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def openapi_attr_list_object(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def openapi_attr_object(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def openapi_attr_objects(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def openapi_attr_value(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def openapi_attr_values(*args, **_arg1, &block); end
end

# source://openapi_parser//lib/openapi_parser/concerns/parser/core.rb#7
class OpenAPIParser::Parser::Core
  include ::OpenAPIParser::Parser::Value
  include ::OpenAPIParser::Parser::Object
  include ::OpenAPIParser::Parser::List
  include ::OpenAPIParser::Parser::Hash
  include ::OpenAPIParser::Parser::HashBody

  # @return [Core] a new instance of Core
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/core.rb#14
  def initialize(target_klass); end

  private

  # Returns the value of attribute target_klass.
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/core.rb#20
  def target_klass; end
end

# source://openapi_parser//lib/openapi_parser/concerns/parser/hash.rb#1
module OpenAPIParser::Parser::Hash
  # source://openapi_parser//lib/openapi_parser/concerns/parser/hash.rb#2
  def _openapi_attr_hash_objects; end

  # source://openapi_parser//lib/openapi_parser/concerns/parser/hash.rb#6
  def openapi_attr_hash_object(name, klass, options = T.unsafe(nil)); end
end

# source://openapi_parser//lib/openapi_parser/concerns/parser/hash_body.rb#1
module OpenAPIParser::Parser::HashBody
  # source://openapi_parser//lib/openapi_parser/concerns/parser/hash_body.rb#2
  def _openapi_attr_hash_body_objects; end

  # source://openapi_parser//lib/openapi_parser/concerns/parser/hash_body.rb#6
  def openapi_attr_hash_body_objects(name, klass, options = T.unsafe(nil)); end
end

# source://openapi_parser//lib/openapi_parser/concerns/parser/list.rb#1
module OpenAPIParser::Parser::List
  # source://openapi_parser//lib/openapi_parser/concerns/parser/list.rb#2
  def _openapi_attr_list_objects; end

  # source://openapi_parser//lib/openapi_parser/concerns/parser/list.rb#6
  def openapi_attr_list_object(name, klass, options = T.unsafe(nil)); end
end

# source://openapi_parser//lib/openapi_parser/concerns/parser/object.rb#1
module OpenAPIParser::Parser::Object
  # source://openapi_parser//lib/openapi_parser/concerns/parser/object.rb#2
  def _openapi_attr_objects; end

  # source://openapi_parser//lib/openapi_parser/concerns/parser/object.rb#10
  def openapi_attr_object(name, klass, options = T.unsafe(nil)); end

  # source://openapi_parser//lib/openapi_parser/concerns/parser/object.rb#6
  def openapi_attr_objects(*names, klass); end
end

# source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#1
module OpenAPIParser::Parser::Value
  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#2
  def _openapi_attr_values; end

  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#10
  def openapi_attr_value(name, options = T.unsafe(nil)); end

  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#6
  def openapi_attr_values(*names); end
end

# source://openapi_parser//lib/openapi_parser/path_item_finder.rb#1
class OpenAPIParser::PathItemFinder
  # @param paths [OpenAPIParser::Schemas::Paths]
  # @return [PathItemFinder] a new instance of PathItemFinder
  #
  # source://openapi_parser//lib/openapi_parser/path_item_finder.rb#3
  def initialize(paths); end

  # find operation object and if not exist return nil
  #
  # @param http_method [String, Symbol] like (get, post .... allow symbol)
  # @param request_path [String]
  # @return [Result, nil]
  #
  # source://openapi_parser//lib/openapi_parser/path_item_finder.rb#11
  def operation_object(http_method, request_path); end

  # source://openapi_parser//lib/openapi_parser/path_item_finder.rb#41
  def parse_path_parameters(schema_path, request_path); end

  private

  # used to filter paths with different depth or without given http method
  #
  # @return [Boolean]
  #
  # source://openapi_parser//lib/openapi_parser/path_item_finder.rb#82
  def different_depth_or_method?(splitted_schema_path, splitted_request_path, path_item, http_method); end

  # extract params by comparing the request path and the path from schema
  # EXAMPLE:
  # extract_params(['org', '1', 'user', '2', 'edit'], ['org', '{org_id}', 'user', '{user_id}'])
  # => { 'org_id' => 1, 'user_id' => 2 }
  # return nil if the schema does not match
  #
  # source://openapi_parser//lib/openapi_parser/path_item_finder.rb#103
  def extract_params(splitted_request_path, splitted_schema_path); end

  # find matching path and extract params
  # EXAMPLE: find_path_and_params('get', '/user/1') => ['/user/{id}', { 'id' => 1 }]
  #
  # source://openapi_parser//lib/openapi_parser/path_item_finder.rb#141
  def find_path_and_params(http_method, request_path); end

  # check if there is a identical path in the schema (without any param)
  #
  # @return [Boolean]
  #
  # source://openapi_parser//lib/openapi_parser/path_item_finder.rb#77
  def matches_directly?(request_path, http_method); end

  # find all matching paths with parameters extracted
  # EXAMPLE:
  # [
  #    ['/user/{id}/edit', { 'id' => 1 }],
  #    ['/user/{id}/{action}', { 'id' => 1, 'action' => 'edit' }],
  #  ]
  #
  # source://openapi_parser//lib/openapi_parser/path_item_finder.rb#124
  def matching_paths_with_params(request_path, http_method); end

  # get the parameter name from the schema path item
  # EXAMPLE: param_name('{id}') => 'id'
  #
  # source://openapi_parser//lib/openapi_parser/path_item_finder.rb#94
  def param_name(schema_path_item); end

  # source://openapi_parser//lib/openapi_parser/path_item_finder.rb#151
  def parse_request_path(http_method, request_path); end

  # source://openapi_parser//lib/openapi_parser/path_item_finder.rb#66
  def path_parameters(schema_path); end

  # check if the path item is a template
  # EXAMPLE: path_template?('{id}') => true
  #
  # @return [Boolean]
  #
  # source://openapi_parser//lib/openapi_parser/path_item_finder.rb#88
  def path_template?(schema_path_item); end
end

# source://openapi_parser//lib/openapi_parser/path_item_finder.rb#22
class OpenAPIParser::PathItemFinder::Result
  # @return [Result] a new instance of Result
  #
  # source://openapi_parser//lib/openapi_parser/path_item_finder.rb#33
  def initialize(path_item_object, operation_object, original_path, path_params); end

  # @return [OpenAPIParser::Schemas::Operation]
  #
  # source://openapi_parser//lib/openapi_parser/path_item_finder.rb#23
  def operation_object; end

  # @return [String]
  #
  # source://openapi_parser//lib/openapi_parser/path_item_finder.rb#23
  def original_path; end

  # @return [OpenAPIParser::Schemas::PathItem]
  #
  # source://openapi_parser//lib/openapi_parser/path_item_finder.rb#23
  def path_item_object; end

  # @return [Hash{String => String}]
  #
  # source://openapi_parser//lib/openapi_parser/path_item_finder.rb#23
  def path_params; end
end

# source://openapi_parser//lib/openapi_parser/reference_expander.rb#1
class OpenAPIParser::ReferenceExpander
  class << self
    # @param openapi [OpenAPIParser::Schemas::OpenAPI]
    #
    # source://openapi_parser//lib/openapi_parser/reference_expander.rb#4
    def expand(openapi, validate_references); end
  end
end

# binding request data and operation object
#
# source://openapi_parser//lib/openapi_parser/request_operation.rb#3
class OpenAPIParser::RequestOperation
  # @param http_method [String]
  # @param result [OpenAPIParser::PathItemFinder::Result]
  # @param config [OpenAPIParser::Config]
  # @return [RequestOperation] a new instance of RequestOperation
  #
  # source://openapi_parser//lib/openapi_parser/request_operation.rb#33
  def initialize(http_method, result, config); end

  # @return [OpenAPIParser::Config]
  #
  # source://openapi_parser//lib/openapi_parser/request_operation.rb#28
  def config; end

  # @return [String]
  #
  # source://openapi_parser//lib/openapi_parser/request_operation.rb#28
  def http_method; end

  # @return [OpenAPIParser::Schemas::Operation]
  #
  # source://openapi_parser//lib/openapi_parser/request_operation.rb#28
  def operation_object; end

  # @return [String]
  #
  # source://openapi_parser//lib/openapi_parser/request_operation.rb#28
  def original_path; end

  # Returns the value of attribute path_item.
  #
  # source://openapi_parser//lib/openapi_parser/request_operation.rb#28
  def path_item; end

  # @return [Hash{String => String}]
  #
  # source://openapi_parser//lib/openapi_parser/request_operation.rb#28
  def path_params; end

  # source://openapi_parser//lib/openapi_parser/request_operation.rb#42
  def validate_path_params(options = T.unsafe(nil)); end

  # @param content_type [String]
  # @param params [Hash]
  # @param options [OpenAPIParser::SchemaValidator::Options]
  #
  # source://openapi_parser//lib/openapi_parser/request_operation.rb#50
  def validate_request_body(content_type, params, options = T.unsafe(nil)); end

  # @param params [Hash] parameter hash
  # @param headers [Hash] headers hash
  # @param options [OpenAPIParser::SchemaValidator::Options] request validator options
  #
  # source://openapi_parser//lib/openapi_parser/request_operation.rb#66
  def validate_request_parameter(params, headers, options = T.unsafe(nil)); end

  # @param response_body [OpenAPIParser::RequestOperation::ValidatableResponseBody]
  # @param response_validate_options [OpenAPIParser::SchemaValidator::ResponseValidateOptions]
  #
  # source://openapi_parser//lib/openapi_parser/request_operation.rb#57
  def validate_response_body(response_body, response_validate_options = T.unsafe(nil)); end

  class << self
    # @param config [OpenAPIParser::Config]
    # @param path_item_finder [OpenAPIParser::PathItemFinder]
    # @return [OpenAPIParser::RequestOperation, nil]
    #
    # source://openapi_parser//lib/openapi_parser/request_operation.rb#8
    def create(http_method, request_path, path_item_finder, config); end
  end
end

# source://openapi_parser//lib/openapi_parser/request_operation.rb#71
class OpenAPIParser::RequestOperation::ValidatableResponseBody
  # @return [ValidatableResponseBody] a new instance of ValidatableResponseBody
  #
  # source://openapi_parser//lib/openapi_parser/request_operation.rb#74
  def initialize(status_code, response_data, headers); end

  # source://openapi_parser//lib/openapi_parser/request_operation.rb#80
  def content_type; end

  # Returns the value of attribute headers.
  #
  # source://openapi_parser//lib/openapi_parser/request_operation.rb#72
  def headers; end

  # Returns the value of attribute response_data.
  #
  # source://openapi_parser//lib/openapi_parser/request_operation.rb#72
  def response_data; end

  # Returns the value of attribute status_code.
  #
  # source://openapi_parser//lib/openapi_parser/request_operation.rb#72
  def status_code; end
end

# load data to target_object by schema definition in core
#
# source://openapi_parser//lib/openapi_parser/concerns/schema_loader.rb#1
class OpenAPIParser::SchemaLoader
  # @param target_object [OpenAPIParser::Schemas::Base]
  # @param core [OpenAPIParser::Parser::Core]
  # @return [SchemaLoader] a new instance of SchemaLoader
  #
  # source://openapi_parser//lib/openapi_parser/concerns/schema_loader.rb#16
  def initialize(target_object, core); end

  # Returns the value of attribute children.
  #
  # source://openapi_parser//lib/openapi_parser/concerns/schema_loader.rb#24
  def children; end

  # execute load data
  # return data is equal to :children
  #
  # @return [Array<OpenAPIParser::Schemas::Base>]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/schema_loader.rb#29
  def load_data; end

  private

  # source://openapi_parser//lib/openapi_parser/concerns/schema_loader.rb#51
  def all_loader; end

  # Returns the value of attribute core.
  #
  # source://openapi_parser//lib/openapi_parser/concerns/schema_loader.rb#36
  def core; end

  # @param schema_loader [OpenAPIParser::SchemaLoader::Base]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/schema_loader.rb#39
  def load_data_by_schema_loader(schema_loader); end

  # source://openapi_parser//lib/openapi_parser/concerns/schema_loader.rb#45
  def register_child(object); end

  # Returns the value of attribute target_object.
  #
  # source://openapi_parser//lib/openapi_parser/concerns/schema_loader.rb#36
  def target_object; end
end

# loader base class
#
# source://openapi_parser//lib/openapi_parser/concerns/schema_loader/base.rb#2
class OpenAPIParser::SchemaLoader::Base
  # @param variable_name [String]
  # @param options [Hash]
  # @return [Base] a new instance of Base
  #
  # source://openapi_parser//lib/openapi_parser/concerns/schema_loader/base.rb#5
  def initialize(variable_name, options); end

  # @param _target_object [OpenAPIParser::Schemas::Base]
  # @param _raw_schema [Hash]
  # @return [Array<OpenAPIParser::Schemas::Base>, nil]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/schema_loader/base.rb#13
  def load_data(_target_object, _raw_schema); end

  private

  # Returns the value of attribute schema_key.
  #
  # source://openapi_parser//lib/openapi_parser/concerns/schema_loader/base.rb#19
  def schema_key; end

  # Returns the value of attribute variable_name.
  #
  # source://openapi_parser//lib/openapi_parser/concerns/schema_loader/base.rb#19
  def variable_name; end

  # create instance variable @variable_name using data
  #
  # @param target [OpenAPIParser::Schemas::Base]
  # @param variable_name [String]
  # @param data [Object]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/schema_loader/base.rb#25
  def variable_set(target, variable_name, data); end
end

# loader base class for create OpenAPI::Schemas::Base object
#
# source://openapi_parser//lib/openapi_parser/concerns/schema_loader/creator.rb#2
class OpenAPIParser::SchemaLoader::Creator < ::OpenAPIParser::SchemaLoader::Base
  # @param variable_name [String]
  # @param options [Hash]
  # @return [Creator] a new instance of Creator
  #
  # source://openapi_parser//lib/openapi_parser/concerns/schema_loader/creator.rb#5
  def initialize(variable_name, options); end

  private

  # Returns the value of attribute allow_data_type.
  #
  # source://openapi_parser//lib/openapi_parser/concerns/schema_loader/creator.rb#15
  def allow_data_type; end

  # Returns the value of attribute allow_reference.
  #
  # source://openapi_parser//lib/openapi_parser/concerns/schema_loader/creator.rb#15
  def allow_reference; end

  # source://openapi_parser//lib/openapi_parser/concerns/schema_loader/creator.rb#17
  def build_object_reference_from_base(base, names); end

  # source://openapi_parser//lib/openapi_parser/concerns/schema_loader/creator.rb#37
  def build_openapi_object_from_option(target_object, ref, schema); end

  # @return [Boolean]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/schema_loader/creator.rb#29
  def check_object_schema?(check_schema); end

  # @return [Boolean] Boolean
  #
  # source://openapi_parser//lib/openapi_parser/concerns/schema_loader/creator.rb#25
  def check_reference_schema?(check_schema); end

  # source://openapi_parser//lib/openapi_parser/concerns/schema_loader/creator.rb#33
  def escape_reference(str); end

  # Returns the value of attribute klass.
  #
  # source://openapi_parser//lib/openapi_parser/concerns/schema_loader/creator.rb#15
  def klass; end
end

# hash body object loader
#
# source://openapi_parser//lib/openapi_parser/concerns/schema_loader/hash_body_loader.rb#2
class OpenAPIParser::SchemaLoader::HashBodyLoader < ::OpenAPIParser::SchemaLoader::Creator
  # @param variable_name [String]
  # @param options [Hash]
  # @return [HashBodyLoader] a new instance of HashBodyLoader
  #
  # source://openapi_parser//lib/openapi_parser/concerns/schema_loader/hash_body_loader.rb#5
  def initialize(variable_name, options); end

  # @param target_object [OpenAPIParser::Schemas::Base]
  # @param raw_schema [Hash]
  # @return [Array<OpenAPIParser::Schemas::Base>, nil]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/schema_loader/hash_body_loader.rb#14
  def load_data(target_object, raw_schema); end

  private

  # for responses and paths object
  #
  # source://openapi_parser//lib/openapi_parser/concerns/schema_loader/hash_body_loader.rb#22
  def create_hash_body_objects(target_object, raw_schema); end

  # Returns the value of attribute reject_keys.
  #
  # source://openapi_parser//lib/openapi_parser/concerns/schema_loader/hash_body_loader.rb#36
  def reject_keys; end
end

# hash object loader
#
# source://openapi_parser//lib/openapi_parser/concerns/schema_loader/hash_objects_loader.rb#2
class OpenAPIParser::SchemaLoader::HashObjectsLoader < ::OpenAPIParser::SchemaLoader::Creator
  # @param target_object [OpenAPIParser::Schemas::Base]
  # @param raw_schema [Hash]
  # @return [Array<OpenAPIParser::Schemas::Base>, nil]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/schema_loader/hash_objects_loader.rb#6
  def load_data(target_object, raw_schema); end

  private

  # source://openapi_parser//lib/openapi_parser/concerns/schema_loader/hash_objects_loader.rb#12
  def create_attr_hash_object(target_object, hash_schema); end

  # source://openapi_parser//lib/openapi_parser/concerns/schema_loader/base.rb#19
  def ref_name_base; end
end

# list object loader
#
# source://openapi_parser//lib/openapi_parser/concerns/schema_loader/list_loader.rb#2
class OpenAPIParser::SchemaLoader::ListLoader < ::OpenAPIParser::SchemaLoader::Creator
  # @param target_object [OpenAPIParser::Schemas::Base]
  # @param raw_schema [Hash]
  # @return [Array<OpenAPIParser::Schemas::Base>, nil]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/schema_loader/list_loader.rb#6
  def load_data(target_object, raw_schema); end

  private

  # source://openapi_parser//lib/openapi_parser/concerns/schema_loader/list_loader.rb#12
  def create_attr_list_object(target_object, array_schema); end

  # source://openapi_parser//lib/openapi_parser/concerns/schema_loader/base.rb#19
  def ref_name_base; end
end

# Specific Object loader (defined by klass option)
#
# source://openapi_parser//lib/openapi_parser/concerns/schema_loader/objects_loader.rb#2
class OpenAPIParser::SchemaLoader::ObjectsLoader < ::OpenAPIParser::SchemaLoader::Creator
  # @param target_object [OpenAPIParser::Schemas::Base]
  # @param raw_schema [Hash]
  # @return [Array<OpenAPIParser::Schemas::Base>, nil]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/schema_loader/objects_loader.rb#6
  def load_data(target_object, raw_schema); end

  private

  # @return [OpenAPIParser::Schemas::Base]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/schema_loader/objects_loader.rb#14
  def create_attr_object(target_object, schema); end
end

# data type values loader
#
# source://openapi_parser//lib/openapi_parser/concerns/schema_loader/values_loader.rb#2
class OpenAPIParser::SchemaLoader::ValuesLoader < ::OpenAPIParser::SchemaLoader::Base
  # @param target_object [OpenAPIParser::Schemas::Base]
  # @param raw_schema [Hash]
  # @return [Array<OpenAPIParser::Schemas::Base>, nil]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/schema_loader/values_loader.rb#6
  def load_data(target_object, raw_schema); end
end

# validate AllOf schema
#
# source://openapi_parser//lib/openapi_parser/schema_validators/options.rb#1
class OpenAPIParser::SchemaValidator
  include ::OpenAPIParser::SchemaValidator::Validatable

  # @param value [Hash]
  # @param schema [OpenAPIParser::Schemas::Schema]
  # @param options [OpenAPIParser::SchemaValidator::Options]
  # @return [SchemaValidator] a new instance of SchemaValidator
  #
  # source://openapi_parser//lib/openapi_parser/schema_validator.rb#52
  def initialize(value, schema, options); end

  # execute validate data
  #
  # @return [Object] coerced or original params
  #
  # source://openapi_parser//lib/openapi_parser/schema_validator.rb#61
  def validate_data; end

  # validate integer value by schema
  # this method use from float_validator because number allow float and integer
  #
  # @param value [Object]
  # @param schema [OpenAPIParser::Schemas::Schema]
  #
  # source://openapi_parser//lib/openapi_parser/schema_validator.rb#90
  def validate_integer(value, schema); end

  # validate value eby schema
  #
  # @param value [Object]
  # @param schema [OpenAPIParser::Schemas::Schema]
  #
  # source://openapi_parser//lib/openapi_parser/schema_validator.rb#71
  def validate_schema(value, schema, **keyword_args); end

  private

  # source://openapi_parser//lib/openapi_parser/schema_validator.rb#149
  def all_of_validator; end

  # source://openapi_parser//lib/openapi_parser/schema_validator.rb#145
  def any_of_validator; end

  # source://openapi_parser//lib/openapi_parser/schema_validator.rb#141
  def array_validator; end

  # source://openapi_parser//lib/openapi_parser/schema_validator.rb#133
  def boolean_validator; end

  # source://openapi_parser//lib/openapi_parser/schema_validator.rb#129
  def float_validator; end

  # source://openapi_parser//lib/openapi_parser/schema_validator.rb#125
  def integer_validator; end

  # source://openapi_parser//lib/openapi_parser/schema_validator.rb#157
  def nil_validator; end

  # source://openapi_parser//lib/openapi_parser/schema_validator.rb#137
  def object_validator; end

  # source://openapi_parser//lib/openapi_parser/schema_validator.rb#153
  def one_of_validator; end

  # source://openapi_parser//lib/openapi_parser/schema_validator.rb#121
  def string_validator; end

  # source://openapi_parser//lib/openapi_parser/schema_validator.rb#161
  def unspecified_type_validator; end

  # @return [OpenAPIParser::SchemaValidator::Base, nil]
  #
  # source://openapi_parser//lib/openapi_parser/schema_validator.rb#97
  def validator(value, schema); end

  class << self
    # validate schema data
    #
    # @param value [Hash]
    # @param [OpenAPIParser::Schemas:v:Schema]
    # @param options [OpenAPIParser::SchemaValidator::Options]
    # @return [Object] coerced or original params
    #
    # source://openapi_parser//lib/openapi_parser/schema_validator.rb#44
    def validate(value, schema, options); end
  end
end

# source://openapi_parser//lib/openapi_parser/schema_validators/all_of_validator.rb#3
class OpenAPIParser::SchemaValidator::AllOfValidator < ::OpenAPIParser::SchemaValidator::Base
  # coerce and validate value
  #
  # @param value [Object]
  # @param schema [OpenAPIParser::Schemas::Schema]
  #
  # source://openapi_parser//lib/openapi_parser/schema_validators/all_of_validator.rb#7
  def coerce_and_validate(value, schema, **keyword_args); end
end

# source://openapi_parser//lib/openapi_parser/schema_validators/any_of_validator.rb#2
class OpenAPIParser::SchemaValidator::AnyOfValidator < ::OpenAPIParser::SchemaValidator::Base
  # @param value [Object]
  # @param schema [OpenAPIParser::Schemas::Schema]
  #
  # source://openapi_parser//lib/openapi_parser/schema_validators/any_of_validator.rb#5
  def coerce_and_validate(value, schema, **_keyword_args); end
end

# source://openapi_parser//lib/openapi_parser/schema_validators/array_validator.rb#2
class OpenAPIParser::SchemaValidator::ArrayValidator < ::OpenAPIParser::SchemaValidator::Base
  # @param value [Array]
  # @param schema [OpenAPIParser::Schemas::Schema]
  #
  # source://openapi_parser//lib/openapi_parser/schema_validators/array_validator.rb#5
  def coerce_and_validate(value, schema, **_keyword_args); end

  # source://openapi_parser//lib/openapi_parser/schema_validators/array_validator.rb#25
  def validate_max_min_items(value, schema); end
end

# source://openapi_parser//lib/openapi_parser/schema_validators/base.rb#2
class OpenAPIParser::SchemaValidator::Base
  # @return [Base] a new instance of Base
  #
  # source://openapi_parser//lib/openapi_parser/schema_validators/base.rb#3
  def initialize(validatable, coerce_value); end

  # need override
  #
  # source://openapi_parser//lib/openapi_parser/schema_validators/base.rb#11
  def coerce_and_validate(_value, _schema, **_keyword_args); end

  # Returns the value of attribute validatable.
  #
  # source://openapi_parser//lib/openapi_parser/schema_validators/base.rb#8
  def validatable; end

  # source://openapi_parser//lib/openapi_parser/schema_validators/base.rb#15
  def validate_discriminator_schema(discriminator, value, parent_discriminator_schemas: T.unsafe(nil)); end
end

# source://openapi_parser//lib/openapi_parser/schema_validators/boolean_validator.rb#2
class OpenAPIParser::SchemaValidator::BooleanValidator < ::OpenAPIParser::SchemaValidator::Base
  include ::OpenAPIParser::SchemaValidator::Enumable

  # source://openapi_parser//lib/openapi_parser/schema_validators/boolean_validator.rb#8
  def coerce_and_validate(value, schema, **_keyword_args); end

  private

  # source://openapi_parser//lib/openapi_parser/schema_validators/boolean_validator.rb#21
  def coerce(value); end
end

# source://openapi_parser//lib/openapi_parser/schema_validators/boolean_validator.rb#6
OpenAPIParser::SchemaValidator::BooleanValidator::FALSE_VALUES = T.let(T.unsafe(nil), Array)

# source://openapi_parser//lib/openapi_parser/schema_validators/boolean_validator.rb#5
OpenAPIParser::SchemaValidator::BooleanValidator::TRUE_VALUES = T.let(T.unsafe(nil), Array)

# source://openapi_parser//lib/openapi_parser/schema_validators/enumable.rb#2
module OpenAPIParser::SchemaValidator::Enumable
  # check enum value by schema
  #
  # @param value [Object]
  # @param schema [OpenAPIParser::Schemas::Schema]
  #
  # source://openapi_parser//lib/openapi_parser/schema_validators/enumable.rb#6
  def check_enum_include(value, schema); end
end

# source://openapi_parser//lib/openapi_parser/schema_validators/float_validator.rb#2
class OpenAPIParser::SchemaValidator::FloatValidator < ::OpenAPIParser::SchemaValidator::Base
  include ::OpenAPIParser::SchemaValidator::Enumable
  include ::OpenAPIParser::SchemaValidator::MinimumMaximum

  # validate float value by schema
  #
  # @param value [Object]
  # @param schema [OpenAPIParser::Schemas::Schema]
  #
  # source://openapi_parser//lib/openapi_parser/schema_validators/float_validator.rb#9
  def coerce_and_validate(value, schema, **_keyword_args); end

  private

  # source://openapi_parser//lib/openapi_parser/schema_validators/float_validator.rb#28
  def coerce(value); end

  # source://openapi_parser//lib/openapi_parser/schema_validators/float_validator.rb#19
  def coercer_and_validate_numeric(value, schema); end
end

# source://openapi_parser//lib/openapi_parser/schema_validators/integer_validator.rb#2
class OpenAPIParser::SchemaValidator::IntegerValidator < ::OpenAPIParser::SchemaValidator::Base
  include ::OpenAPIParser::SchemaValidator::Enumable
  include ::OpenAPIParser::SchemaValidator::MinimumMaximum

  # validate integer value by schema
  #
  # @param value [Object]
  # @param schema [OpenAPIParser::Schemas::Schema]
  #
  # source://openapi_parser//lib/openapi_parser/schema_validators/integer_validator.rb#9
  def coerce_and_validate(value, schema, **_keyword_args); end

  private

  # source://openapi_parser//lib/openapi_parser/schema_validators/integer_validator.rb#22
  def coerce(value); end
end

# source://openapi_parser//lib/openapi_parser/schema_validators/minimum_maximum.rb#2
module OpenAPIParser::SchemaValidator::MinimumMaximum
  # check minimum and maximum value by schema
  #
  # @param value [Object]
  # @param schema [OpenAPIParser::Schemas::Schema]
  #
  # source://openapi_parser//lib/openapi_parser/schema_validators/minimum_maximum.rb#6
  def check_minimum_maximum(value, schema); end

  private

  # source://openapi_parser//lib/openapi_parser/schema_validators/minimum_maximum.rb#18
  def validate(value, schema); end
end

# source://openapi_parser//lib/openapi_parser/schema_validators/nil_validator.rb#2
class OpenAPIParser::SchemaValidator::NilValidator < ::OpenAPIParser::SchemaValidator::Base
  # @param value [Object]
  # @param schema [OpenAPIParser::Schemas::Schema]
  #
  # source://openapi_parser//lib/openapi_parser/schema_validators/nil_validator.rb#5
  def coerce_and_validate(value, schema, **_keyword_args); end
end

# source://openapi_parser//lib/openapi_parser/schema_validators/object_validator.rb#2
class OpenAPIParser::SchemaValidator::ObjectValidator < ::OpenAPIParser::SchemaValidator::Base
  # @param value [Hash]
  # @param schema [OpenAPIParser::Schemas::Schema]
  # @param parent_all_of [Boolean] true if component is nested under allOf
  # @param discriminator_property_name [String, nil] discriminator.property_name to ignore checking additional_properties
  #
  # source://openapi_parser//lib/openapi_parser/schema_validators/object_validator.rb#7
  def coerce_and_validate(value, schema, parent_all_of: T.unsafe(nil), parent_discriminator_schemas: T.unsafe(nil), discriminator_property_name: T.unsafe(nil)); end
end

# source://openapi_parser//lib/openapi_parser/schema_validators/one_of_validator.rb#2
class OpenAPIParser::SchemaValidator::OneOfValidator < ::OpenAPIParser::SchemaValidator::Base
  # @param value [Object]
  # @param schema [OpenAPIParser::Schemas::Schema]
  #
  # source://openapi_parser//lib/openapi_parser/schema_validators/one_of_validator.rb#5
  def coerce_and_validate(value, schema, **_keyword_args); end
end

# source://openapi_parser//lib/openapi_parser/schema_validators/options.rb#2
class OpenAPIParser::SchemaValidator::Options
  # @return [Options] a new instance of Options
  #
  # source://openapi_parser//lib/openapi_parser/schema_validators/options.rb#11
  def initialize(coerce_value: T.unsafe(nil), datetime_coerce_class: T.unsafe(nil), validate_header: T.unsafe(nil)); end

  # @return [Boolean] coerce value option on/off
  #
  # source://openapi_parser//lib/openapi_parser/schema_validators/options.rb#9
  def coerce_value; end

  # @return [Object, nil] coerce datetime string by this Object class
  #
  # source://openapi_parser//lib/openapi_parser/schema_validators/options.rb#9
  def datetime_coerce_class; end

  # Returns the value of attribute validate_header.
  #
  # source://openapi_parser//lib/openapi_parser/schema_validators/options.rb#9
  def validate_header; end
end

# response body validation option
#
# source://openapi_parser//lib/openapi_parser/schema_validators/options.rb#19
class OpenAPIParser::SchemaValidator::ResponseValidateOptions
  # @return [ResponseValidateOptions] a new instance of ResponseValidateOptions
  #
  # source://openapi_parser//lib/openapi_parser/schema_validators/options.rb#24
  def initialize(strict: T.unsafe(nil), validate_header: T.unsafe(nil)); end

  # @return [Boolean] validate by strict (when not exist definition, raise error)
  #
  # source://openapi_parser//lib/openapi_parser/schema_validators/options.rb#22
  def strict; end

  # Returns the value of attribute validate_header.
  #
  # source://openapi_parser//lib/openapi_parser/schema_validators/options.rb#22
  def validate_header; end
end

# source://openapi_parser//lib/openapi_parser/schema_validators/string_validator.rb#2
class OpenAPIParser::SchemaValidator::StringValidator < ::OpenAPIParser::SchemaValidator::Base
  include ::OpenAPIParser::SchemaValidator::Enumable

  # @return [StringValidator] a new instance of StringValidator
  #
  # source://openapi_parser//lib/openapi_parser/schema_validators/string_validator.rb#5
  def initialize(validator, coerce_value, datetime_coerce_class); end

  # source://openapi_parser//lib/openapi_parser/schema_validators/string_validator.rb#10
  def coerce_and_validate(value, schema, **_keyword_args); end

  private

  # @param schema [OpenAPIParser::Schemas::Schema]
  #
  # source://openapi_parser//lib/openapi_parser/schema_validators/string_validator.rb#40
  def pattern_validate(value, schema); end

  # source://openapi_parser//lib/openapi_parser/schema_validators/string_validator.rb#74
  def validate_date_format(value, schema); end

  # source://openapi_parser//lib/openapi_parser/schema_validators/string_validator.rb#86
  def validate_datetime_format(value, schema); end

  # source://openapi_parser//lib/openapi_parser/schema_validators/string_validator.rb#55
  def validate_email_format(value, schema); end

  # source://openapi_parser//lib/openapi_parser/schema_validators/string_validator.rb#48
  def validate_max_min_length(value, schema); end

  # source://openapi_parser//lib/openapi_parser/schema_validators/string_validator.rb#66
  def validate_uuid_format(value, schema); end
end

# source://openapi_parser//lib/openapi_parser/schema_validators/unspecified_type_validator.rb#2
class OpenAPIParser::SchemaValidator::UnspecifiedTypeValidator < ::OpenAPIParser::SchemaValidator::Base
  # @param value [Object]
  #
  # source://openapi_parser//lib/openapi_parser/schema_validators/unspecified_type_validator.rb#4
  def coerce_and_validate(value, _schema, **_keyword_args); end
end

# validate value by schema
# this module for SchemaValidators::Base
#
# @param value [Object]
# @param schema [OpenAPIParser::Schemas::Schema]
#
# source://openapi_parser//lib/openapi_parser/schema_validator.rb#22
module OpenAPIParser::SchemaValidator::Validatable
  # validate integer value by schema
  # this method use from float_validator because number allow float and integer
  #
  # @param _value [Object]
  # @param _schema [OpenAPIParser::Schemas::Schema]
  #
  # source://openapi_parser//lib/openapi_parser/schema_validator.rb#31
  def validate_integer(_value, _schema); end

  # source://openapi_parser//lib/openapi_parser/schema_validator.rb#23
  def validate_schema(value, schema, **keyword_args); end
end

# TODO: support 'not' because I need check reference...
# TODO: support 'xml', 'externalDocs'
# TODO: support extended property
#
# source://openapi_parser//lib/openapi_parser/schemas/classes.rb#3
module OpenAPIParser::Schemas; end

# source://openapi_parser//lib/openapi_parser/schemas/classes.rb#4
class OpenAPIParser::Schemas::Base
  include ::OpenAPIParser::Parser
  include ::OpenAPIParser::Findable
  include ::OpenAPIParser::Expandable
  extend ::OpenAPIParser::Parser::ClassMethods

  # @param [OpenAPIParser::Schemas::Base]
  # @return [Base] a new instance of Base
  #
  # source://openapi_parser//lib/openapi_parser/schemas/base.rb#10
  def initialize(object_reference, parent, root, raw_schema); end

  # override
  #
  # source://openapi_parser//lib/openapi_parser/schemas/base.rb#21
  def after_init; end

  # source://openapi_parser//lib/openapi_parser/schemas/base.rb#24
  def inspect; end

  # Returns the value of attribute object_reference.
  #
  # source://openapi_parser//lib/openapi_parser/schemas/base.rb#7
  def object_reference; end

  # Returns the value of attribute parent.
  #
  # source://openapi_parser//lib/openapi_parser/schemas/base.rb#7
  def parent; end

  # Returns the value of attribute raw_schema.
  #
  # source://openapi_parser//lib/openapi_parser/schemas/base.rb#7
  def raw_schema; end

  # Returns the value of attribute root.
  #
  # source://openapi_parser//lib/openapi_parser/schemas/base.rb#7
  def root; end
end

# source://openapi_parser//lib/openapi_parser/schemas/classes.rb#17
class OpenAPIParser::Schemas::Components < ::OpenAPIParser::Schemas::Base
  # @return [Hash{String => Header}, nil] header objects
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/hash.rb#7
  def headers; end

  # @return [Hash{String => Parameter}, nil]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/hash.rb#7
  def parameters; end

  # @return [Hash{String => RequestBody}, nil]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/hash.rb#7
  def request_bodies; end

  # @return [Hash{String => Response}, nil]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/hash.rb#7
  def responses; end

  # source://openapi_parser//lib/openapi_parser/concerns/parser/hash.rb#7
  def schemas; end
end

# source://openapi_parser//lib/openapi_parser/schemas/classes.rb#5
class OpenAPIParser::Schemas::Discriminator < ::OpenAPIParser::Schemas::Base
  # @return [Hash{String => String]] Hash{String => String]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def mapping; end

  # @return [String, nil]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def property_name; end
end

# source://openapi_parser//lib/openapi_parser/schemas/classes.rb#18
class OpenAPIParser::Schemas::Header < ::OpenAPIParser::Schemas::Base
  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def allow_empty_value; end

  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def allow_reserved; end

  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def deprecated; end

  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def description; end

  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def example; end

  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def explode; end

  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def required; end

  # @return [Schema, Reference, nil]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/object.rb#11
  def schema; end

  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def style; end

  # validate by schema
  #
  # @param value [Object]
  #
  # source://openapi_parser//lib/openapi_parser/schemas/header.rb#14
  def validate(value); end
end

# source://openapi_parser//lib/openapi_parser/schemas/classes.rb#15
class OpenAPIParser::Schemas::MediaType < ::OpenAPIParser::Schemas::Base
  # @return [Schema, nil] OpenAPI3 Schema object
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/object.rb#11
  def schema; end

  # validate params by schema definitions
  #
  # @param params [Hash]
  # @param options [OpenAPIParser::SchemaValidator::Options]
  #
  # source://openapi_parser//lib/openapi_parser/schemas/media_type.rb#14
  def validate_parameter(params, options); end
end

# source://openapi_parser//lib/openapi_parser/schemas/classes.rb#6
class OpenAPIParser::Schemas::OpenAPI < ::OpenAPIParser::Schemas::Base
  # @return [OpenAPI] a new instance of OpenAPI
  #
  # source://openapi_parser//lib/openapi_parser/schemas/openapi.rb#8
  def initialize(raw_schema, config, uri: T.unsafe(nil), schema_registry: T.unsafe(nil)); end

  # @return [Components, nil]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/object.rb#11
  def components; end

  # load another schema with shared config and schema_registry
  #
  # @return [OpenAPIParser::Schemas::OpenAPI]
  #
  # source://openapi_parser//lib/openapi_parser/schemas/openapi.rb#39
  def load_another_schema(uri); end

  # @return [String, nil]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def openapi; end

  # @return [Paths, nil]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/object.rb#11
  def paths; end

  # @return [OpenAPIParser::RequestOperation, nil]
  #
  # source://openapi_parser//lib/openapi_parser/schemas/openapi.rb#33
  def request_operation(http_method, request_path); end

  private

  # source://openapi_parser//lib/openapi_parser/schemas/openapi.rb#51
  def resolve_uri(uri); end
end

# source://openapi_parser//lib/openapi_parser/schemas/classes.rb#7
class OpenAPIParser::Schemas::Operation < ::OpenAPIParser::Schemas::Base
  include ::OpenAPIParser::ParameterValidatable

  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def deprecated; end

  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def description; end

  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def operation_id; end

  # source://openapi_parser//lib/openapi_parser/concerns/parser/list.rb#7
  def parameters; end

  # @return [OpenAPIParser::Schemas::RequestBody, nil] return OpenAPI3 object
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/object.rb#11
  def request_body; end

  # @return [OpenAPIParser::Schemas::Responses, nil] return OpenAPI3 object
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/object.rb#11
  def responses; end

  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def summary; end

  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def tags; end

  # source://openapi_parser//lib/openapi_parser/schemas/operation.rb#24
  def validate_request_body(content_type, params, options); end

  # @param response_body [OpenAPIParser::RequestOperation::ValidatableResponseBody]
  # @param response_validate_options [OpenAPIParser::SchemaValidator::ResponseValidateOptions]
  #
  # source://openapi_parser//lib/openapi_parser/schemas/operation.rb#30
  def validate_response(response_body, response_validate_options); end
end

# source://openapi_parser//lib/openapi_parser/schemas/classes.rb#8
class OpenAPIParser::Schemas::Parameter < ::OpenAPIParser::Schemas::Base
  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def allow_empty_value; end

  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def allow_reserved; end

  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def deprecated; end

  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def description; end

  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def example; end

  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def explode; end

  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def in; end

  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def name; end

  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def required; end

  # @return [Schema, Reference, nil]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/object.rb#11
  def schema; end

  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def style; end

  # @param options [OpenAPIParser::SchemaValidator::Options]
  # @return [Object] coerced or original params
  #
  # source://openapi_parser//lib/openapi_parser/schemas/parameter.rb#16
  def validate_params(params, options); end
end

# source://openapi_parser//lib/openapi_parser/schemas/classes.rb#9
class OpenAPIParser::Schemas::PathItem < ::OpenAPIParser::Schemas::Base
  # source://openapi_parser//lib/openapi_parser/concerns/parser/object.rb#11
  def delete; end

  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def description; end

  # source://openapi_parser//lib/openapi_parser/concerns/parser/object.rb#11
  def get; end

  # source://openapi_parser//lib/openapi_parser/concerns/parser/object.rb#11
  def head; end

  # @return [Operation]
  #
  # source://openapi_parser//lib/openapi_parser/schemas/path_item.rb#12
  def operation(method); end

  # source://openapi_parser//lib/openapi_parser/concerns/parser/object.rb#11
  def options; end

  # source://openapi_parser//lib/openapi_parser/concerns/parser/list.rb#7
  def parameters; end

  # source://openapi_parser//lib/openapi_parser/concerns/parser/object.rb#11
  def patch; end

  # source://openapi_parser//lib/openapi_parser/concerns/parser/object.rb#11
  def post; end

  # source://openapi_parser//lib/openapi_parser/concerns/parser/object.rb#11
  def put; end

  # source://openapi_parser//lib/openapi_parser/schemas/path_item.rb#18
  def set_path_item_to_operation; end

  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def summary; end

  # source://openapi_parser//lib/openapi_parser/concerns/parser/object.rb#11
  def trace; end
end

# source://openapi_parser//lib/openapi_parser/schemas/classes.rb#10
class OpenAPIParser::Schemas::Paths < ::OpenAPIParser::Schemas::Base
  # @return [Hash{String => PathItem, Reference}, nil]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/hash_body.rb#9
  def path; end
end

# source://openapi_parser//lib/openapi_parser/schemas/classes.rb#11
class OpenAPIParser::Schemas::Reference < ::OpenAPIParser::Schemas::Base
  # @return [Base]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def ref; end
end

# source://openapi_parser//lib/openapi_parser/schemas/classes.rb#12
class OpenAPIParser::Schemas::RequestBody < ::OpenAPIParser::Schemas::Base
  include ::OpenAPIParser::MediaTypeSelectable

  # @return [Hash{String => MediaType}, nil] content type to MediaType object
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/hash.rb#7
  def content; end

  # @return [String] description data
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def description; end

  # @return [Boolean] required bool data
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def required; end

  # select media type by content_type (consider wild card definition)
  #
  # @param content_type [String]
  # @return [OpenAPIParser::Schemas::MediaType, nil]
  #
  # source://openapi_parser//lib/openapi_parser/schemas/request_body.rb#30
  def select_media_type(content_type); end

  # @param content_type [String]
  # @param params [Hash]
  # @param options [OpenAPIParser::SchemaValidator::Options]
  #
  # source://openapi_parser//lib/openapi_parser/schemas/request_body.rb#20
  def validate_request_body(content_type, params, options); end
end

# source://openapi_parser//lib/openapi_parser/schemas/classes.rb#14
class OpenAPIParser::Schemas::Response < ::OpenAPIParser::Schemas::Base
  include ::OpenAPIParser::MediaTypeSelectable

  # @return [Hash{String => MediaType}, nil] content_type to MediaType hash
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/hash.rb#7
  def content; end

  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def description; end

  # @return [Hash{String => Header}, nil] header string to Header
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/hash.rb#7
  def headers; end

  # select media type by content_type (consider wild card definition)
  #
  # @param content_type [String]
  # @return [OpenAPIParser::Schemas::MediaType, nil]
  #
  # source://openapi_parser//lib/openapi_parser/schemas/response.rb#36
  def select_media_type(content_type); end

  # @param response_body [OpenAPIParser::RequestOperation::ValidatableResponseBody]
  # @param response_validate_options [OpenAPIParser::SchemaValidator::ResponseValidateOptions]
  #
  # source://openapi_parser//lib/openapi_parser/schemas/response.rb#19
  def validate(response_body, response_validate_options); end

  private

  # @param response_headers [Hash]
  #
  # source://openapi_parser//lib/openapi_parser/schemas/response.rb#43
  def validate_header(response_headers); end
end

# source://openapi_parser//lib/openapi_parser/schemas/classes.rb#13
class OpenAPIParser::Schemas::Responses < ::OpenAPIParser::Schemas::Base
  # @return [Response, Reference, nil] default response object
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/object.rb#11
  def default; end

  # @return [Hash{String => Response, Reference}, nil] response object indexed by status code. see: https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#patterned-fields-1
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/hash_body.rb#9
  def response; end

  # validate params data by definition
  # find response object by status_code and content_type
  # https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#patterned-fields-1
  #
  # @param response_body [OpenAPIParser::RequestOperation::ValidatableResponseBody]
  # @param response_validate_options [OpenAPIParser::SchemaValidator::ResponseValidateOptions]
  # @raise [::OpenAPIParser::NotExistStatusCodeDefinition]
  #
  # source://openapi_parser//lib/openapi_parser/schemas/responses.rb#18
  def validate(response_body, response_validate_options); end

  private

  # @param status_code [Integer]
  # @return [Response]
  #
  # source://openapi_parser//lib/openapi_parser/schemas/responses.rb#35
  def find_response_object(status_code); end

  # parse 400 -> 4xx
  # OpenAPI3 allow 1xx, 2xx, 3xx... only, don't allow 41x
  #
  # @param status_code [Integer]
  #
  # source://openapi_parser//lib/openapi_parser/schemas/responses.rb#51
  def status_code_to_wild_card(status_code); end
end

# source://openapi_parser//lib/openapi_parser/schemas/classes.rb#16
class OpenAPIParser::Schemas::Schema < ::OpenAPIParser::Schemas::Base
  # additional_properties have default value
  # we should add default value feature in openapi_attr_object method, but we need temporary fix so override attr_reader
  #
  # source://openapi_parser//lib/openapi_parser/schemas/schema.rb#113
  def additional_properties; end

  # @return [Array<Schema, Reference>, nil]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/list.rb#7
  def all_of; end

  # @return [Array<Schema, Reference>, nil]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/list.rb#7
  def any_of; end

  # @return [Object, nil]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def default; end

  # @return [Boolean, nil]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def deprecated; end

  # @return [String, nil]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def description; end

  # @return [Discriminator, nil]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/object.rb#11
  def discriminator; end

  # @return [Array, nil] any type array
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def enum; end

  # @return [Object, nil]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def example; end

  # @return [Boolean, nil]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def exclusiveMaximum; end

  # @return [Boolean, nil]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def exclusiveMinimum; end

  # @return [String, nil]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def format; end

  # @return [Schema, nil]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/object.rb#11
  def items; end

  # @return [Integer, nil]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def maxItems; end

  # @return [Integer, nil]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def maxLength; end

  # @return [Integer, nil]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def maxProperties; end

  # @return [Float, nil]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def maximum; end

  # @return [Integer, nil]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def minItems; end

  # @return [Integer, nil]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def minLength; end

  # @return [Integer, nil]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def minProperties; end

  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def minimum; end

  # @return [Float, nil]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def multipleOf; end

  # @return [Boolean, nil]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def nullable; end

  # @return [Array<Schema, Reference>, nil]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/list.rb#7
  def one_of; end

  # @return [String, nil] regexp
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def pattern; end

  # @return [Hash{String => Schema}, nil]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/hash.rb#7
  def properties; end

  # @return [Boolean, nil]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def read_only; end

  # @return [Array<String>, nil] at least one item included
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def required; end

  # @return [String, nil]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def title; end

  # @return [String, nil] multiple types doesn't supported in OpenAPI3
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def type; end

  # @return [Boolean, nil]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def uniqueItems; end

  # @return [Boolean, nil]
  #
  # source://openapi_parser//lib/openapi_parser/concerns/parser/value.rb#11
  def write_only; end
end

# source://openapi_parser//lib/openapi_parser/version.rb#2
OpenAPIParser::VERSION = T.let(T.unsafe(nil), String)

# source://openapi_parser//lib/openapi_parser/errors.rb#14
class OpenAPIParser::ValidateError < ::OpenAPIParser::OpenAPIError
  # @return [ValidateError] a new instance of ValidateError
  #
  # source://openapi_parser//lib/openapi_parser/errors.rb#15
  def initialize(data, type, reference); end

  # source://openapi_parser//lib/openapi_parser/errors.rb#21
  def message; end

  class << self
    # create ValidateError for SchemaValidator return data
    #
    # @param value [Object]
    # @param schema [OpenAPIParser::Schemas::Base]
    #
    # source://openapi_parser//lib/openapi_parser/errors.rb#29
    def build_error_result(value, schema); end
  end
end
