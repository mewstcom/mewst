# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Google::Cloud::PubSub::V1::Subscription`.
# Please instead update this file by running `bin/tapioca dsl Google::Cloud::PubSub::V1::Subscription`.

class Google::Cloud::PubSub::V1::Subscription
  sig do
    params(
      ack_deadline_seconds: T.nilable(Integer),
      bigquery_config: T.nilable(Google::Cloud::PubSub::V1::BigQueryConfig),
      dead_letter_policy: T.nilable(Google::Cloud::PubSub::V1::DeadLetterPolicy),
      detached: T.nilable(T::Boolean),
      enable_exactly_once_delivery: T.nilable(T::Boolean),
      enable_message_ordering: T.nilable(T::Boolean),
      expiration_policy: T.nilable(Google::Cloud::PubSub::V1::ExpirationPolicy),
      filter: T.nilable(String),
      labels: T.nilable(T.any(Google::Protobuf::Map[String, String], T::Hash[String, String])),
      message_retention_duration: T.nilable(Google::Protobuf::Duration),
      name: T.nilable(String),
      push_config: T.nilable(Google::Cloud::PubSub::V1::PushConfig),
      retain_acked_messages: T.nilable(T::Boolean),
      retry_policy: T.nilable(Google::Cloud::PubSub::V1::RetryPolicy),
      state: T.nilable(T.any(Symbol, Integer)),
      topic: T.nilable(String),
      topic_message_retention_duration: T.nilable(Google::Protobuf::Duration)
    ).void
  end
  def initialize(ack_deadline_seconds: nil, bigquery_config: nil, dead_letter_policy: nil, detached: nil, enable_exactly_once_delivery: nil, enable_message_ordering: nil, expiration_policy: nil, filter: nil, labels: T.unsafe(nil), message_retention_duration: nil, name: nil, push_config: nil, retain_acked_messages: nil, retry_policy: nil, state: nil, topic: nil, topic_message_retention_duration: nil); end

  sig { returns(Integer) }
  def ack_deadline_seconds; end

  sig { params(value: Integer).void }
  def ack_deadline_seconds=(value); end

  sig { returns(T.nilable(Google::Cloud::PubSub::V1::BigQueryConfig)) }
  def bigquery_config; end

  sig { params(value: T.nilable(Google::Cloud::PubSub::V1::BigQueryConfig)).void }
  def bigquery_config=(value); end

  sig { void }
  def clear_ack_deadline_seconds; end

  sig { void }
  def clear_bigquery_config; end

  sig { void }
  def clear_dead_letter_policy; end

  sig { void }
  def clear_detached; end

  sig { void }
  def clear_enable_exactly_once_delivery; end

  sig { void }
  def clear_enable_message_ordering; end

  sig { void }
  def clear_expiration_policy; end

  sig { void }
  def clear_filter; end

  sig { void }
  def clear_labels; end

  sig { void }
  def clear_message_retention_duration; end

  sig { void }
  def clear_name; end

  sig { void }
  def clear_push_config; end

  sig { void }
  def clear_retain_acked_messages; end

  sig { void }
  def clear_retry_policy; end

  sig { void }
  def clear_state; end

  sig { void }
  def clear_topic; end

  sig { void }
  def clear_topic_message_retention_duration; end

  sig { returns(T.nilable(Google::Cloud::PubSub::V1::DeadLetterPolicy)) }
  def dead_letter_policy; end

  sig { params(value: T.nilable(Google::Cloud::PubSub::V1::DeadLetterPolicy)).void }
  def dead_letter_policy=(value); end

  sig { returns(T::Boolean) }
  def detached; end

  sig { params(value: T::Boolean).void }
  def detached=(value); end

  sig { returns(T::Boolean) }
  def enable_exactly_once_delivery; end

  sig { params(value: T::Boolean).void }
  def enable_exactly_once_delivery=(value); end

  sig { returns(T::Boolean) }
  def enable_message_ordering; end

  sig { params(value: T::Boolean).void }
  def enable_message_ordering=(value); end

  sig { returns(T.nilable(Google::Cloud::PubSub::V1::ExpirationPolicy)) }
  def expiration_policy; end

  sig { params(value: T.nilable(Google::Cloud::PubSub::V1::ExpirationPolicy)).void }
  def expiration_policy=(value); end

  sig { returns(String) }
  def filter; end

  sig { params(value: String).void }
  def filter=(value); end

  sig { returns(Google::Protobuf::Map[String, String]) }
  def labels; end

  sig { params(value: Google::Protobuf::Map[String, String]).void }
  def labels=(value); end

  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def message_retention_duration; end

  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def message_retention_duration=(value); end

  sig { returns(String) }
  def name; end

  sig { params(value: String).void }
  def name=(value); end

  sig { returns(T.nilable(Google::Cloud::PubSub::V1::PushConfig)) }
  def push_config; end

  sig { params(value: T.nilable(Google::Cloud::PubSub::V1::PushConfig)).void }
  def push_config=(value); end

  sig { returns(T::Boolean) }
  def retain_acked_messages; end

  sig { params(value: T::Boolean).void }
  def retain_acked_messages=(value); end

  sig { returns(T.nilable(Google::Cloud::PubSub::V1::RetryPolicy)) }
  def retry_policy; end

  sig { params(value: T.nilable(Google::Cloud::PubSub::V1::RetryPolicy)).void }
  def retry_policy=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def state; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def state=(value); end

  sig { returns(String) }
  def topic; end

  sig { params(value: String).void }
  def topic=(value); end

  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def topic_message_retention_duration; end

  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def topic_message_retention_duration=(value); end
end
