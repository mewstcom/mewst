# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `inline_svg` gem.
# Please instead update this file by running `bin/tapioca gem inline_svg`.


# Naive fallback asset finder for when sprockets >= 3.0 &&
# config.assets.precompile = false
# Thanks to @ryanswood for the original code:
# https://github.com/jamesmartin/inline_svg/commit/661bbb3bef7d1b4bd6ccd63f5f018305797b9509
#
# source://inline_svg//lib/inline_svg/version.rb#1
module InlineSvg
  class << self
    # Returns the value of attribute configuration.
    #
    # source://inline_svg//lib/inline_svg.rb#90
    def configuration; end

    # source://inline_svg//lib/inline_svg.rb#92
    def configure; end

    # source://inline_svg//lib/inline_svg.rb#100
    def reset_configuration!; end
  end
end

# source://inline_svg//lib/inline_svg/action_view/helpers.rb#5
module InlineSvg::ActionView; end

# source://inline_svg//lib/inline_svg/action_view/helpers.rb#6
module InlineSvg::ActionView::Helpers
  # source://inline_svg//lib/inline_svg/action_view/helpers.rb#19
  def inline_svg(filename, transform_params = T.unsafe(nil)); end

  # source://inline_svg//lib/inline_svg/action_view/helpers.rb#13
  def inline_svg_pack_tag(filename, transform_params = T.unsafe(nil)); end

  # source://inline_svg//lib/inline_svg/action_view/helpers.rb#7
  def inline_svg_tag(filename, transform_params = T.unsafe(nil)); end

  private

  # source://inline_svg//lib/inline_svg/action_view/helpers.rb#25
  def backwards_compatible_html_escape(filename); end

  # source://inline_svg//lib/inline_svg/action_view/helpers.rb#72
  def configured_asset_file; end

  # source://inline_svg//lib/inline_svg/action_view/helpers.rb#84
  def extension_hint(filename); end

  # source://inline_svg//lib/inline_svg/action_view/helpers.rb#61
  def placeholder(filename); end

  # source://inline_svg//lib/inline_svg/action_view/helpers.rb#53
  def read_svg(filename); end

  # source://inline_svg//lib/inline_svg/action_view/helpers.rb#34
  def render_inline_svg(filename, transform_params = T.unsafe(nil)); end

  # source://inline_svg//lib/inline_svg/action_view/helpers.rb#76
  def with_asset_finder(asset_finder); end
end

# source://inline_svg//lib/inline_svg/asset_file.rb#2
class InlineSvg::AssetFile
  class << self
    # source://inline_svg//lib/inline_svg/asset_file.rb#6
    def named(filename); end
  end
end

# source://inline_svg//lib/inline_svg/asset_file.rb#3
class InlineSvg::AssetFile::FileNotFound < ::IOError; end

# source://inline_svg//lib/inline_svg/asset_file.rb#4
InlineSvg::AssetFile::UNREADABLE_PATH = T.let(T.unsafe(nil), String)

# source://inline_svg//lib/inline_svg/cached_asset_file.rb#4
class InlineSvg::CachedAssetFile
  # For each of the given paths, recursively reads each asset and stores its
  # contents alongside the full path to the asset.
  #
  # paths   - One or more String representing directories on disk to search
  #           for asset files. Note: paths are searched recursively.
  # filters - One or more Strings/Regexps to match assets against. Only
  #           assets matching all filters will be cached and available to load.
  #           Note: Specifying no filters will cache every file found in
  #           paths.
  #
  # @return [CachedAssetFile] a new instance of CachedAssetFile
  #
  # source://inline_svg//lib/inline_svg/cached_asset_file.rb#17
  def initialize(paths: T.unsafe(nil), filters: T.unsafe(nil)); end

  # Returns the value of attribute assets.
  #
  # source://inline_svg//lib/inline_svg/cached_asset_file.rb#5
  def assets; end

  # Returns the value of attribute filters.
  #
  # source://inline_svg//lib/inline_svg/cached_asset_file.rb#5
  def filters; end

  # Public: Finds the named asset and returns the contents as a string.
  #
  # asset_name  - A string representing the name of the asset to load
  #
  # Returns: A String or raises InlineSvg::AssetFile::FileNotFound error
  #
  # source://inline_svg//lib/inline_svg/cached_asset_file.rb#29
  def named(asset_name); end

  # Returns the value of attribute paths.
  #
  # source://inline_svg//lib/inline_svg/cached_asset_file.rb#5
  def paths; end

  private

  # Internal: Finds the key for a given asset name (using a Regex). In the
  # event of an ambiguous asset_name matching multiple assets, this method
  # ranks the matches by their full file path, choosing the shortest (most
  # exact) match over all others.
  #
  # Returns a String representing the key for the named asset or nil if there
  # is no match.
  #
  # source://inline_svg//lib/inline_svg/cached_asset_file.rb#42
  def key_for_asset(asset_name); end

  # @return [Boolean]
  #
  # source://inline_svg//lib/inline_svg/cached_asset_file.rb#67
  def matches_all_filters?(path); end

  # Internal: Recursively descends through current_paths reading each file it
  # finds and adding them to the accumulator if the fullpath of the file
  # matches all configured filters.
  #
  # acc     - Hash representing the accumulated assets keyed by full path
  # paths   - Pathname representing the current node in the directory
  #           structure to consider
  #
  # Returns a Hash containing the contents of each asset, keyed by fullpath
  # to the asset.
  #
  # source://inline_svg//lib/inline_svg/cached_asset_file.rb#56
  def read_assets(acc, paths); end
end

# source://inline_svg//lib/inline_svg.rb#19
class InlineSvg::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://inline_svg//lib/inline_svg.rb#24
  def initialize; end

  # source://inline_svg//lib/inline_svg.rb#64
  def add_custom_transformation(options); end

  # Returns the value of attribute asset_file.
  #
  # source://inline_svg//lib/inline_svg.rb#22
  def asset_file; end

  # source://inline_svg//lib/inline_svg.rb#31
  def asset_file=(custom_asset_file); end

  # Returns the value of attribute asset_finder.
  #
  # source://inline_svg//lib/inline_svg.rb#22
  def asset_finder; end

  # source://inline_svg//lib/inline_svg.rb#44
  def asset_finder=(finder); end

  # Returns the value of attribute custom_transformations.
  #
  # source://inline_svg//lib/inline_svg.rb#22
  def custom_transformations; end

  # source://inline_svg//lib/inline_svg.rb#71
  def raise_on_file_not_found=(value); end

  # @return [Boolean]
  #
  # source://inline_svg//lib/inline_svg.rb#75
  def raise_on_file_not_found?; end

  # Returns the value of attribute svg_not_found_css_class.
  #
  # source://inline_svg//lib/inline_svg.rb#22
  def svg_not_found_css_class; end

  # source://inline_svg//lib/inline_svg.rb#58
  def svg_not_found_css_class=(css_class); end

  private

  # @return [Boolean]
  #
  # source://inline_svg//lib/inline_svg.rb#81
  def incompatible_transformation?(klass); end
end

# source://inline_svg//lib/inline_svg.rb#20
class InlineSvg::Configuration::Invalid < ::ArgumentError; end

# source://inline_svg//lib/inline_svg/transform_pipeline/transformations/transformation.rb#39
class InlineSvg::CustomTransformation < ::InlineSvg::TransformPipeline::Transformations::Transformation; end

# source://inline_svg//lib/inline_svg/finds_asset_paths.rb#2
class InlineSvg::FindsAssetPaths
  class << self
    # source://inline_svg//lib/inline_svg/finds_asset_paths.rb#3
    def by_filename(filename); end

    # source://inline_svg//lib/inline_svg/finds_asset_paths.rb#8
    def configured_asset_finder; end
  end
end

# source://inline_svg//lib/inline_svg/io_resource.rb#2
module InlineSvg::IOResource
  class << self
    # source://inline_svg//lib/inline_svg/io_resource.rb#3
    def ===(object); end

    # source://inline_svg//lib/inline_svg/io_resource.rb#7
    def default_for(object); end

    # source://inline_svg//lib/inline_svg/io_resource.rb#14
    def read(object); end
  end
end

# source://inline_svg//lib/inline_svg/id_generator.rb#4
class InlineSvg::IdGenerator
  class << self
    # source://inline_svg//lib/inline_svg/id_generator.rb#12
    def generate(base, salt, randomness: T.unsafe(nil)); end
  end
end

# source://inline_svg//lib/inline_svg/id_generator.rb#5
class InlineSvg::IdGenerator::Randomness
  class << self
    # source://inline_svg//lib/inline_svg/id_generator.rb#7
    def call; end
  end
end

# source://inline_svg//lib/inline_svg/propshaft_asset_finder.rb#2
class InlineSvg::PropshaftAssetFinder
  # @return [PropshaftAssetFinder] a new instance of PropshaftAssetFinder
  #
  # source://inline_svg//lib/inline_svg/propshaft_asset_finder.rb#7
  def initialize(filename); end

  # source://inline_svg//lib/inline_svg/propshaft_asset_finder.rb#11
  def pathname; end

  class << self
    # source://inline_svg//lib/inline_svg/propshaft_asset_finder.rb#3
    def find_asset(filename); end
  end
end

# source://inline_svg//lib/inline_svg/railtie.rb#3
class InlineSvg::Railtie < ::Rails::Railtie; end

# source://inline_svg//lib/inline_svg/static_asset_finder.rb#8
class InlineSvg::StaticAssetFinder
  # @return [StaticAssetFinder] a new instance of StaticAssetFinder
  #
  # source://inline_svg//lib/inline_svg/static_asset_finder.rb#13
  def initialize(filename); end

  # source://inline_svg//lib/inline_svg/static_asset_finder.rb#17
  def pathname; end

  class << self
    # source://inline_svg//lib/inline_svg/static_asset_finder.rb#9
    def find_asset(filename); end
  end
end

# source://inline_svg//lib/inline_svg/transform_pipeline.rb#2
module InlineSvg::TransformPipeline
  class << self
    # source://inline_svg//lib/inline_svg/transform_pipeline.rb#3
    def generate_html_from(svg_file, transform_params); end
  end
end

# source://inline_svg//lib/inline_svg/transform_pipeline/transformations.rb#1
module InlineSvg::TransformPipeline::Transformations
  class << self
    # source://inline_svg//lib/inline_svg/transform_pipeline/transformations.rb#65
    def all_default_values; end

    # source://inline_svg//lib/inline_svg/transform_pipeline/transformations.rb#39
    def all_transformations; end

    # Transformations are run in priority order, lowest number first:
    #
    # source://inline_svg//lib/inline_svg/transform_pipeline/transformations.rb#3
    def built_in_transformations; end

    # source://inline_svg//lib/inline_svg/transform_pipeline/transformations.rb#22
    def custom_transformations; end

    # source://inline_svg//lib/inline_svg/transform_pipeline/transformations.rb#53
    def in_priority_order(transforms); end

    # source://inline_svg//lib/inline_svg/transform_pipeline/transformations.rb#43
    def lookup(transform_params); end

    # source://inline_svg//lib/inline_svg/transform_pipeline/transformations.rb#35
    def magnify(priority = T.unsafe(nil)); end

    # source://inline_svg//lib/inline_svg/transform_pipeline/transformations.rb#26
    def magnify_priorities(transforms); end

    # source://inline_svg//lib/inline_svg/transform_pipeline/transformations.rb#73
    def no_transform; end

    # source://inline_svg//lib/inline_svg/transform_pipeline/transformations.rb#57
    def params_with_defaults(params); end

    # source://inline_svg//lib/inline_svg/transform_pipeline/transformations.rb#61
    def without_empty_values(params); end
  end
end

# source://inline_svg//lib/inline_svg/transform_pipeline/transformations/aria_attributes.rb#2
class InlineSvg::TransformPipeline::Transformations::AriaAttributes < ::InlineSvg::TransformPipeline::Transformations::Transformation
  # source://inline_svg//lib/inline_svg/transform_pipeline/transformations/aria_attributes.rb#24
  def element_id_for(base, element); end

  # source://inline_svg//lib/inline_svg/transform_pipeline/transformations/aria_attributes.rb#3
  def transform(doc); end
end

# source://inline_svg//lib/inline_svg/transform_pipeline/transformations/aria_hidden_attribute.rb#2
class InlineSvg::TransformPipeline::Transformations::AriaHiddenAttribute < ::InlineSvg::TransformPipeline::Transformations::Transformation
  # source://inline_svg//lib/inline_svg/transform_pipeline/transformations/aria_hidden_attribute.rb#3
  def transform(doc); end
end

# source://inline_svg//lib/inline_svg/transform_pipeline/transformations/class_attribute.rb#2
class InlineSvg::TransformPipeline::Transformations::ClassAttribute < ::InlineSvg::TransformPipeline::Transformations::Transformation
  # source://inline_svg//lib/inline_svg/transform_pipeline/transformations/class_attribute.rb#3
  def transform(doc); end
end

# source://inline_svg//lib/inline_svg/transform_pipeline/transformations/data_attributes.rb#2
class InlineSvg::TransformPipeline::Transformations::DataAttributes < ::InlineSvg::TransformPipeline::Transformations::Transformation
  # source://inline_svg//lib/inline_svg/transform_pipeline/transformations/data_attributes.rb#3
  def transform(doc); end

  private

  # source://inline_svg//lib/inline_svg/transform_pipeline/transformations/data_attributes.rb#17
  def dasherize(string); end

  # source://inline_svg//lib/inline_svg/transform_pipeline/transformations/data_attributes.rb#13
  def with_valid_hash_from(hash); end
end

# source://inline_svg//lib/inline_svg/transform_pipeline/transformations/description.rb#2
class InlineSvg::TransformPipeline::Transformations::Description < ::InlineSvg::TransformPipeline::Transformations::Transformation
  # source://inline_svg//lib/inline_svg/transform_pipeline/transformations/description.rb#3
  def transform(doc); end
end

# source://inline_svg//lib/inline_svg/transform_pipeline/transformations/height.rb#2
class InlineSvg::TransformPipeline::Transformations::Height < ::InlineSvg::TransformPipeline::Transformations::Transformation
  # source://inline_svg//lib/inline_svg/transform_pipeline/transformations/height.rb#3
  def transform(doc); end
end

# source://inline_svg//lib/inline_svg/transform_pipeline/transformations/id_attribute.rb#2
class InlineSvg::TransformPipeline::Transformations::IdAttribute < ::InlineSvg::TransformPipeline::Transformations::Transformation
  # source://inline_svg//lib/inline_svg/transform_pipeline/transformations/id_attribute.rb#3
  def transform(doc); end
end

# source://inline_svg//lib/inline_svg/transform_pipeline/transformations/no_comment.rb#3
class InlineSvg::TransformPipeline::Transformations::NoComment < ::InlineSvg::TransformPipeline::Transformations::Transformation
  # source://inline_svg//lib/inline_svg/transform_pipeline/transformations/no_comment.rb#4
  def transform(doc); end
end

# source://inline_svg//lib/inline_svg/transform_pipeline/transformations/transformation.rb#31
class InlineSvg::TransformPipeline::Transformations::NullTransformation < ::InlineSvg::TransformPipeline::Transformations::Transformation
  # source://inline_svg//lib/inline_svg/transform_pipeline/transformations/transformation.rb#32
  def transform(doc); end
end

# source://inline_svg//lib/inline_svg/transform_pipeline/transformations/preserve_aspect_ratio.rb#2
class InlineSvg::TransformPipeline::Transformations::PreserveAspectRatio < ::InlineSvg::TransformPipeline::Transformations::Transformation
  # source://inline_svg//lib/inline_svg/transform_pipeline/transformations/preserve_aspect_ratio.rb#3
  def transform(doc); end
end

# source://inline_svg//lib/inline_svg/transform_pipeline/transformations/size.rb#2
class InlineSvg::TransformPipeline::Transformations::Size < ::InlineSvg::TransformPipeline::Transformations::Transformation
  # source://inline_svg//lib/inline_svg/transform_pipeline/transformations/size.rb#14
  def height_of(value); end

  # source://inline_svg//lib/inline_svg/transform_pipeline/transformations/size.rb#3
  def transform(doc); end

  # source://inline_svg//lib/inline_svg/transform_pipeline/transformations/size.rb#10
  def width_of(value); end
end

# source://inline_svg//lib/inline_svg/transform_pipeline/transformations/style_attribute.rb#2
class InlineSvg::TransformPipeline::Transformations::StyleAttribute < ::InlineSvg::TransformPipeline::Transformations::Transformation
  # source://inline_svg//lib/inline_svg/transform_pipeline/transformations/style_attribute.rb#3
  def transform(doc); end
end

# source://inline_svg//lib/inline_svg/transform_pipeline/transformations/title.rb#2
class InlineSvg::TransformPipeline::Transformations::Title < ::InlineSvg::TransformPipeline::Transformations::Transformation
  # source://inline_svg//lib/inline_svg/transform_pipeline/transformations/title.rb#3
  def transform(doc); end
end

# source://inline_svg//lib/inline_svg/transform_pipeline/transformations/transformation.rb#2
class InlineSvg::TransformPipeline::Transformations::Transformation
  # @return [Transformation] a new instance of Transformation
  #
  # source://inline_svg//lib/inline_svg/transform_pipeline/transformations/transformation.rb#9
  def initialize(value); end

  # source://inline_svg//lib/inline_svg/transform_pipeline/transformations/transformation.rb#13
  def transform(*_arg0); end

  # Returns the value of attribute value.
  #
  # source://inline_svg//lib/inline_svg/transform_pipeline/transformations/transformation.rb#7
  def value; end

  # Parses a document and yields the contained SVG nodeset to the given block
  # if it exists.
  #
  # Returns a Nokogiri::XML::Document.
  #
  # @yield [svg]
  #
  # source://inline_svg//lib/inline_svg/transform_pipeline/transformations/transformation.rb#21
  def with_svg(doc); end

  class << self
    # source://inline_svg//lib/inline_svg/transform_pipeline/transformations/transformation.rb#3
    def create_with_value(value); end
  end
end

# source://inline_svg//lib/inline_svg/transform_pipeline/transformations/view_box.rb#2
class InlineSvg::TransformPipeline::Transformations::ViewBox < ::InlineSvg::TransformPipeline::Transformations::Transformation
  # source://inline_svg//lib/inline_svg/transform_pipeline/transformations/view_box.rb#3
  def transform(doc); end
end

# source://inline_svg//lib/inline_svg/transform_pipeline/transformations/width.rb#2
class InlineSvg::TransformPipeline::Transformations::Width < ::InlineSvg::TransformPipeline::Transformations::Transformation
  # source://inline_svg//lib/inline_svg/transform_pipeline/transformations/width.rb#3
  def transform(doc); end
end

# source://inline_svg//lib/inline_svg/version.rb#2
InlineSvg::VERSION = T.let(T.unsafe(nil), String)

# source://inline_svg//lib/inline_svg/webpack_asset_finder.rb#2
class InlineSvg::WebpackAssetFinder
  # @return [WebpackAssetFinder] a new instance of WebpackAssetFinder
  #
  # source://inline_svg//lib/inline_svg/webpack_asset_finder.rb#7
  def initialize(filename); end

  # source://inline_svg//lib/inline_svg/webpack_asset_finder.rb#13
  def pathname; end

  private

  # source://inline_svg//lib/inline_svg/webpack_asset_finder.rb#25
  def asset_helper; end

  # source://inline_svg//lib/inline_svg/webpack_asset_finder.rb#34
  def dev_server_asset(file_path); end

  # source://inline_svg//lib/inline_svg/webpack_asset_finder.rb#49
  def fetch_from_dev_server(file_path); end

  class << self
    # source://inline_svg//lib/inline_svg/webpack_asset_finder.rb#3
    def find_asset(filename); end
  end
end
