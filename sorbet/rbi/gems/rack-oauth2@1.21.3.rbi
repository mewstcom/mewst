# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rack-oauth2` gem.
# Please instead update this file by running `bin/tapioca gem rack-oauth2`.

# source://rack-oauth2//lib/rack/oauth2.rb#9
module Rack
  class << self
    # source://rack/2.2.4/lib/rack/version.rb#26
    def release; end

    # source://rack/2.2.4/lib/rack/version.rb#19
    def version; end
  end
end

# source://rack/2.2.4/lib/rack.rb#29
Rack::CACHE_CONTROL = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#31
Rack::CONTENT_LENGTH = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#32
Rack::CONTENT_TYPE = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#43
Rack::DELETE = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#36
Rack::ETAG = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#30
Rack::EXPIRES = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack/file.rb#6
Rack::File = Rack::Files

# source://rack/2.2.4/lib/rack.rb#39
Rack::GET = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#44
Rack::HEAD = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#20
Rack::HTTPS = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#35
Rack::HTTP_COOKIE = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#17
Rack::HTTP_HOST = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#18
Rack::HTTP_PORT = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#19
Rack::HTTP_VERSION = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#46
Rack::LINK = T.let(T.unsafe(nil), String)

# source://rack-test/2.0.2/lib/rack/test.rb#413
Rack::MockSession = Rack::Test::Session

# source://rack-oauth2//lib/rack/oauth2.rb#10
module Rack::OAuth2
  class << self
    # source://rack-oauth2//lib/rack/oauth2.rb#33
    def debug(&block); end

    # source://rack-oauth2//lib/rack/oauth2.rb#30
    def debug!; end

    # source://rack-oauth2//lib/rack/oauth2.rb#27
    def debugging=(boolean); end

    # @return [Boolean]
    #
    # source://rack-oauth2//lib/rack/oauth2.rb#24
    def debugging?; end

    # source://rack-oauth2//lib/rack/oauth2.rb#42
    def http_client(agent_name = T.unsafe(nil), &local_http_config); end

    # source://rack-oauth2//lib/rack/oauth2.rb#57
    def http_config(&block); end

    # source://rack-oauth2//lib/rack/oauth2.rb#15
    def logger; end

    # source://rack-oauth2//lib/rack/oauth2.rb#18
    def logger=(logger); end

    # source://rack-oauth2//lib/rack/oauth2.rb#61
    def reset_http_config!; end
  end
end

# source://rack-oauth2//lib/rack/oauth2/access_token.rb#3
class Rack::OAuth2::AccessToken
  include ::AttrOptional
  include ::AttrRequired
  extend ::AttrOptional::ClassMethods
  extend ::AttrRequired::ClassMethods

  # @return [AccessToken] a new instance of AccessToken
  #
  # source://rack-oauth2//lib/rack/oauth2/access_token.rb#12
  def initialize(attributes = T.unsafe(nil)); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def access_token; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def access_token=(_arg0); end

  # source://rack-oauth2//lib/rack/oauth2/access_token.rb#8
  def delete(*_arg0, **_arg1, &_arg2); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def expires_in; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def expires_in=(_arg0); end

  # source://rack-oauth2//lib/rack/oauth2/access_token.rb#8
  def get(*_arg0, **_arg1, &_arg2); end

  # source://rack-oauth2//lib/rack/oauth2/access_token.rb#21
  def httpclient; end

  # source://rack-oauth2//lib/rack/oauth2/access_token.rb#8
  def patch(*_arg0, **_arg1, &_arg2); end

  # source://rack-oauth2//lib/rack/oauth2/access_token.rb#8
  def post(*_arg0, **_arg1, &_arg2); end

  # source://rack-oauth2//lib/rack/oauth2/access_token.rb#8
  def put(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute raw_attributes.
  #
  # source://rack-oauth2//lib/rack/oauth2/access_token.rb#7
  def raw_attributes; end

  # Sets the attribute raw_attributes
  #
  # @param value the value to set the attribute raw_attributes to.
  #
  # source://rack-oauth2//lib/rack/oauth2/access_token.rb#7
  def raw_attributes=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def refresh_token; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def refresh_token=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def scope; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def scope=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def to_s; end

  # source://rack-oauth2//lib/rack/oauth2/access_token.rb#27
  def token_response(options = T.unsafe(nil)); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def token_type; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def token_type=(_arg0); end
end

# source://rack-oauth2//lib/rack/oauth2/access_token/authenticator.rb#4
class Rack::OAuth2::AccessToken::Authenticator
  # @return [Authenticator] a new instance of Authenticator
  #
  # source://rack-oauth2//lib/rack/oauth2/access_token/authenticator.rb#5
  def initialize(token); end

  # Callback called in HTTPClient (before sending a request)
  # request:: HTTP::Message
  #
  # source://rack-oauth2//lib/rack/oauth2/access_token/authenticator.rb#11
  def filter_request(request); end

  # Callback called in HTTPClient (after received a response)
  # response:: HTTP::Message
  # request::  HTTP::Message
  #
  # source://rack-oauth2//lib/rack/oauth2/access_token/authenticator.rb#18
  def filter_response(response, request); end
end

# source://rack-oauth2//lib/rack/oauth2/access_token/bearer.rb#4
class Rack::OAuth2::AccessToken::Bearer < ::Rack::OAuth2::AccessToken
  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def access_token; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def access_token=(_arg0); end

  # source://rack-oauth2//lib/rack/oauth2/access_token/bearer.rb#5
  def authenticate(request); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def expires_in; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def expires_in=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def refresh_token; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def refresh_token=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def scope; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def scope=(_arg0); end

  # source://rack-oauth2//lib/rack/oauth2/access_token/bearer.rb#9
  def to_mtls(attributes = T.unsafe(nil)); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def token_type; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def token_type=(_arg0); end
end

# source://rack-oauth2//lib/rack/oauth2/access_token/legacy.rb#4
class Rack::OAuth2::AccessToken::Legacy < ::Rack::OAuth2::AccessToken
  # @return [Legacy] a new instance of Legacy
  #
  # source://rack-oauth2//lib/rack/oauth2/access_token/legacy.rb#5
  def initialize(attributes = T.unsafe(nil)); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def access_token; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def access_token=(_arg0); end

  # source://rack-oauth2//lib/rack/oauth2/access_token/legacy.rb#13
  def authenticate(request); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def expires_in; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def expires_in=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def refresh_token; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def refresh_token=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def scope; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def scope=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def token_type; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def token_type=(_arg0); end
end

# source://rack-oauth2//lib/rack/oauth2/access_token/mac.rb#4
class Rack::OAuth2::AccessToken::MAC < ::Rack::OAuth2::AccessToken
  # @return [MAC] a new instance of MAC
  #
  # source://rack-oauth2//lib/rack/oauth2/access_token/mac.rb#9
  def initialize(attributes = T.unsafe(nil)); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def access_token; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def access_token=(_arg0); end

  # source://rack-oauth2//lib/rack/oauth2/access_token/mac.rb#53
  def authenticate(request); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def expires_in; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def expires_in=(_arg0); end

  # Returns the value of attribute ext.
  #
  # source://rack-oauth2//lib/rack/oauth2/access_token/mac.rb#7
  def ext; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def ext_verifier; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def ext_verifier=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def mac_algorithm; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def mac_algorithm=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def mac_key; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def mac_key=(_arg0); end

  # Returns the value of attribute nonce.
  #
  # source://rack-oauth2//lib/rack/oauth2/access_token/mac.rb#7
  def nonce; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def refresh_token; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def refresh_token=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def scope; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def scope=(_arg0); end

  # Returns the value of attribute signature.
  #
  # source://rack-oauth2//lib/rack/oauth2/access_token/mac.rb#7
  def signature; end

  # source://rack-oauth2//lib/rack/oauth2/access_token/mac.rb#15
  def token_response; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def token_type; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def token_type=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def ts; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def ts=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def ts_expires_in; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def ts_expires_in=(_arg0); end

  # source://rack-oauth2//lib/rack/oauth2/access_token/mac.rb#22
  def verify!(request); end

  private

  # source://rack-oauth2//lib/rack/oauth2/access_token/mac.rb#81
  def authorization_header; end

  # source://rack-oauth2//lib/rack/oauth2/access_token/mac.rb#90
  def generate_nonce; end
end

# source://rack-oauth2//lib/rack/oauth2/access_token/mac/sha256_hex_verifier.rb#5
class Rack::OAuth2::AccessToken::MAC::Sha256HexVerifier < ::Rack::OAuth2::AccessToken::MAC::Verifier
  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def algorithm; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def algorithm=(_arg0); end

  # source://rack-oauth2//lib/rack/oauth2/access_token/mac/sha256_hex_verifier.rb#8
  def calculate; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def raw_body; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def raw_body=(_arg0); end
end

# source://rack-oauth2//lib/rack/oauth2/access_token/mac/signature.rb#5
class Rack::OAuth2::AccessToken::MAC::Signature < ::Rack::OAuth2::AccessToken::MAC::Verifier
  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def algorithm; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def algorithm=(_arg0); end

  # source://rack-oauth2//lib/rack/oauth2/access_token/mac/signature.rb#9
  def calculate; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def ext; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def ext=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def host; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def host=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def method; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def method=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def nonce; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def nonce=(_arg0); end

  # source://rack-oauth2//lib/rack/oauth2/access_token/mac/signature.rb#17
  def normalized_request_string; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def port; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def port=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def query; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def query=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def request_uri; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def request_uri=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def secret; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def secret=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def ts; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def ts=(_arg0); end
end

# source://rack-oauth2//lib/rack/oauth2/access_token/mac/verifier.rb#5
class Rack::OAuth2::AccessToken::MAC::Verifier
  include ::AttrOptional
  include ::AttrRequired
  extend ::AttrOptional::ClassMethods
  extend ::AttrRequired::ClassMethods

  # @return [Verifier] a new instance of Verifier
  #
  # source://rack-oauth2//lib/rack/oauth2/access_token/mac/verifier.rb#11
  def initialize(attributes = T.unsafe(nil)); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def algorithm; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def algorithm=(_arg0); end

  # source://rack-oauth2//lib/rack/oauth2/access_token/mac/verifier.rb#20
  def verify!(expected); end

  private

  # source://rack-oauth2//lib/rack/oauth2/access_token/mac/verifier.rb#30
  def hash_generator; end
end

# source://rack-oauth2//lib/rack/oauth2/access_token/mac/verifier.rb#9
class Rack::OAuth2::AccessToken::MAC::Verifier::VerificationFailed < ::StandardError; end

# source://rack-oauth2//lib/rack/oauth2/access_token/mtls.rb#4
class Rack::OAuth2::AccessToken::MTLS < ::Rack::OAuth2::AccessToken::Bearer
  # @return [MTLS] a new instance of MTLS
  #
  # source://rack-oauth2//lib/rack/oauth2/access_token/mtls.rb#7
  def initialize(attributes = T.unsafe(nil)); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def access_token; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def access_token=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def certificate; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def certificate=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def expires_in; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def expires_in=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def private_key; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def private_key=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def refresh_token; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def refresh_token=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def scope; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def scope=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def token_type; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def token_type=(_arg0); end
end

# source://rack-oauth2//lib/rack/oauth2/client.rb#3
class Rack::OAuth2::Client
  include ::AttrOptional
  include ::AttrRequired
  extend ::AttrOptional::ClassMethods
  extend ::AttrRequired::ClassMethods

  # @return [Client] a new instance of Client
  #
  # source://rack-oauth2//lib/rack/oauth2/client.rb#8
  def initialize(attributes = T.unsafe(nil)); end

  # source://rack-oauth2//lib/rack/oauth2/client.rb#71
  def access_token!(*args); end

  # source://rack-oauth2//lib/rack/oauth2/client.rb#28
  def authorization_code=(code); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def authorization_endpoint; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def authorization_endpoint=(_arg0); end

  # source://rack-oauth2//lib/rack/oauth2/client.rb#18
  def authorization_uri(params = T.unsafe(nil)); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def certificate; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def certificate=(_arg0); end

  # source://rack-oauth2//lib/rack/oauth2/client.rb#67
  def force_token_type!(token_type); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def host; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def host=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def identifier; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def identifier=(_arg0); end

  # source://rack-oauth2//lib/rack/oauth2/client.rb#48
  def jwt_bearer=(assertion); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def port; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def port=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def private_key; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def private_key=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def redirect_uri; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def redirect_uri=(_arg0); end

  # source://rack-oauth2//lib/rack/oauth2/client.rb#42
  def refresh_token=(token); end

  # source://rack-oauth2//lib/rack/oauth2/client.rb#35
  def resource_owner_credentials=(credentials); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def revocation_endpoint; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def revocation_endpoint=(_arg0); end

  # source://rack-oauth2//lib/rack/oauth2/client.rb#85
  def revoke!(*args); end

  # source://rack-oauth2//lib/rack/oauth2/client.rb#54
  def saml2_bearer=(assertion); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def scheme; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def scheme=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def secret; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def secret=(_arg0); end

  # source://rack-oauth2//lib/rack/oauth2/client.rb#60
  def subject_token=(subject_token, subject_token_type = T.unsafe(nil)); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def token_endpoint; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def token_endpoint=(_arg0); end

  private

  # source://rack-oauth2//lib/rack/oauth2/client.rb#120
  def absolute_uri_for(endpoint); end

  # source://rack-oauth2//lib/rack/oauth2/client.rb#129
  def authenticated_context_from(*args); end

  # source://rack-oauth2//lib/rack/oauth2/client.rb#228
  def handle_error_response(response); end

  # source://rack-oauth2//lib/rack/oauth2/client.rb#191
  def handle_response; end

  # source://rack-oauth2//lib/rack/oauth2/client.rb#201
  def handle_revocation_response; end

  # source://rack-oauth2//lib/rack/oauth2/client.rb#211
  def handle_success_response(response); end
end

# source://rack-oauth2//lib/rack/oauth2/client/error.rb#4
class Rack::OAuth2::Client::Error < ::StandardError
  # @return [Error] a new instance of Error
  #
  # source://rack-oauth2//lib/rack/oauth2/client/error.rb#6
  def initialize(status, response); end

  # Returns the value of attribute response.
  #
  # source://rack-oauth2//lib/rack/oauth2/client/error.rb#5
  def response; end

  # Sets the attribute response
  #
  # @param value the value to set the attribute response to.
  #
  # source://rack-oauth2//lib/rack/oauth2/client/error.rb#5
  def response=(_arg0); end

  # Returns the value of attribute status.
  #
  # source://rack-oauth2//lib/rack/oauth2/client/error.rb#5
  def status; end

  # Sets the attribute status
  #
  # @param value the value to set the attribute status to.
  #
  # source://rack-oauth2//lib/rack/oauth2/client/error.rb#5
  def status=(_arg0); end
end

# source://rack-oauth2//lib/rack/oauth2/client/grant.rb#4
class Rack::OAuth2::Client::Grant
  include ::AttrOptional
  include ::AttrRequired
  extend ::AttrOptional::ClassMethods
  extend ::AttrRequired::ClassMethods

  # @return [Grant] a new instance of Grant
  #
  # source://rack-oauth2//lib/rack/oauth2/client/grant.rb#7
  def initialize(attributes = T.unsafe(nil)); end

  # source://rack-oauth2//lib/rack/oauth2/client/grant.rb#18
  def as_json(options = T.unsafe(nil)); end

  # source://rack-oauth2//lib/rack/oauth2/client/grant.rb#14
  def grant_type; end
end

# source://rack-oauth2//lib/rack/oauth2/client/grant/authorization_code.rb#5
class Rack::OAuth2::Client::Grant::AuthorizationCode < ::Rack::OAuth2::Client::Grant
  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def code; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def code=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def redirect_uri; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def redirect_uri=(_arg0); end
end

# source://rack-oauth2//lib/rack/oauth2/client/grant/client_credentials.rb#5
class Rack::OAuth2::Client::Grant::ClientCredentials < ::Rack::OAuth2::Client::Grant; end

# source://rack-oauth2//lib/rack/oauth2/client/grant/jwt_bearer.rb#5
class Rack::OAuth2::Client::Grant::JWTBearer < ::Rack::OAuth2::Client::Grant
  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def assertion; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def assertion=(_arg0); end

  # source://rack-oauth2//lib/rack/oauth2/client/grant/jwt_bearer.rb#8
  def grant_type; end
end

# source://rack-oauth2//lib/rack/oauth2/client/grant/password.rb#5
class Rack::OAuth2::Client::Grant::Password < ::Rack::OAuth2::Client::Grant
  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def password; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def password=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def username; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def username=(_arg0); end
end

# source://rack-oauth2//lib/rack/oauth2/client/grant/refresh_token.rb#5
class Rack::OAuth2::Client::Grant::RefreshToken < ::Rack::OAuth2::Client::Grant
  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def refresh_token; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def refresh_token=(_arg0); end
end

# source://rack-oauth2//lib/rack/oauth2/client/grant/saml2_bearer.rb#5
class Rack::OAuth2::Client::Grant::SAML2Bearer < ::Rack::OAuth2::Client::Grant
  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def assertion; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def assertion=(_arg0); end

  # source://rack-oauth2//lib/rack/oauth2/client/grant/saml2_bearer.rb#8
  def grant_type; end
end

# source://rack-oauth2//lib/rack/oauth2/client/grant/token_exchange.rb#5
class Rack::OAuth2::Client::Grant::TokenExchange < ::Rack::OAuth2::Client::Grant
  # source://rack-oauth2//lib/rack/oauth2/client/grant/token_exchange.rb#8
  def grant_type; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def subject_token; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def subject_token=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def subject_token_type; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def subject_token_type=(_arg0); end
end

# source://rack-oauth2//lib/rack/oauth2/debugger/request_filter.rb#3
module Rack::OAuth2::Debugger; end

# source://rack-oauth2//lib/rack/oauth2/debugger/request_filter.rb#4
class Rack::OAuth2::Debugger::RequestFilter
  # Callback called in HTTPClient (before sending a request)
  # request:: HTTP::Message
  #
  # source://rack-oauth2//lib/rack/oauth2/debugger/request_filter.rb#7
  def filter_request(request); end

  # Callback called in HTTPClient (after received a response)
  # request::  HTTP::Message
  # response:: HTTP::Message
  #
  # source://rack-oauth2//lib/rack/oauth2/debugger/request_filter.rb#15
  def filter_response(request, response); end

  private

  # source://rack-oauth2//lib/rack/oauth2/debugger/request_filter.rb#22
  def log(*outputs); end
end

# source://rack-oauth2//lib/rack/oauth2/server/abstract/handler.rb#3
module Rack::OAuth2::Server; end

# source://rack-oauth2//lib/rack/oauth2/server/abstract/handler.rb#4
module Rack::OAuth2::Server::Abstract; end

# source://rack-oauth2//lib/rack/oauth2/server/abstract/error.rb#37
class Rack::OAuth2::Server::Abstract::BadRequest < ::Rack::OAuth2::Server::Abstract::Error
  # @return [BadRequest] a new instance of BadRequest
  #
  # source://rack-oauth2//lib/rack/oauth2/server/abstract/error.rb#38
  def initialize(error = T.unsafe(nil), description = T.unsafe(nil), options = T.unsafe(nil)); end
end

# source://rack-oauth2//lib/rack/oauth2/server/abstract/error.rb#5
class Rack::OAuth2::Server::Abstract::Error < ::StandardError
  # @return [Error] a new instance of Error
  #
  # source://rack-oauth2//lib/rack/oauth2/server/abstract/error.rb#8
  def initialize(status, error, description = T.unsafe(nil), options = T.unsafe(nil)); end

  # Returns the value of attribute description.
  #
  # source://rack-oauth2//lib/rack/oauth2/server/abstract/error.rb#6
  def description; end

  # Sets the attribute description
  #
  # @param value the value to set the attribute description to.
  #
  # source://rack-oauth2//lib/rack/oauth2/server/abstract/error.rb#6
  def description=(_arg0); end

  # Returns the value of attribute error.
  #
  # source://rack-oauth2//lib/rack/oauth2/server/abstract/error.rb#6
  def error; end

  # Sets the attribute error
  #
  # @param value the value to set the attribute error to.
  #
  # source://rack-oauth2//lib/rack/oauth2/server/abstract/error.rb#6
  def error=(_arg0); end

  # @yield [response]
  #
  # source://rack-oauth2//lib/rack/oauth2/server/abstract/error.rb#25
  def finish; end

  # source://rack-oauth2//lib/rack/oauth2/server/abstract/error.rb#17
  def protocol_params; end

  # Returns the value of attribute realm.
  #
  # source://rack-oauth2//lib/rack/oauth2/server/abstract/error.rb#6
  def realm; end

  # Sets the attribute realm
  #
  # @param value the value to set the attribute realm to.
  #
  # source://rack-oauth2//lib/rack/oauth2/server/abstract/error.rb#6
  def realm=(_arg0); end

  # Returns the value of attribute status.
  #
  # source://rack-oauth2//lib/rack/oauth2/server/abstract/error.rb#6
  def status; end

  # Sets the attribute status
  #
  # @param value the value to set the attribute status to.
  #
  # source://rack-oauth2//lib/rack/oauth2/server/abstract/error.rb#6
  def status=(_arg0); end

  # Returns the value of attribute uri.
  #
  # source://rack-oauth2//lib/rack/oauth2/server/abstract/error.rb#6
  def uri; end

  # Sets the attribute uri
  #
  # @param value the value to set the attribute uri to.
  #
  # source://rack-oauth2//lib/rack/oauth2/server/abstract/error.rb#6
  def uri=(_arg0); end
end

# source://rack-oauth2//lib/rack/oauth2/server/abstract/error.rb#50
class Rack::OAuth2::Server::Abstract::Forbidden < ::Rack::OAuth2::Server::Abstract::Error
  # @return [Forbidden] a new instance of Forbidden
  #
  # source://rack-oauth2//lib/rack/oauth2/server/abstract/error.rb#51
  def initialize(error = T.unsafe(nil), description = T.unsafe(nil), options = T.unsafe(nil)); end
end

# source://rack-oauth2//lib/rack/oauth2/server/abstract/handler.rb#5
class Rack::OAuth2::Server::Abstract::Handler
  # @return [Handler] a new instance of Handler
  #
  # source://rack-oauth2//lib/rack/oauth2/server/abstract/handler.rb#8
  def initialize(&authenticator); end

  # source://rack-oauth2//lib/rack/oauth2/server/abstract/handler.rb#20
  def _call(env); end

  # Returns the value of attribute authenticator.
  #
  # source://rack-oauth2//lib/rack/oauth2/server/abstract/handler.rb#6
  def authenticator; end

  # Sets the attribute authenticator
  #
  # @param value the value to set the attribute authenticator to.
  #
  # source://rack-oauth2//lib/rack/oauth2/server/abstract/handler.rb#6
  def authenticator=(_arg0); end

  # source://rack-oauth2//lib/rack/oauth2/server/abstract/handler.rb#12
  def call(env); end

  # Returns the value of attribute request.
  #
  # source://rack-oauth2//lib/rack/oauth2/server/abstract/handler.rb#6
  def request; end

  # Sets the attribute request
  #
  # @param value the value to set the attribute request to.
  #
  # source://rack-oauth2//lib/rack/oauth2/server/abstract/handler.rb#6
  def request=(_arg0); end

  # Returns the value of attribute response.
  #
  # source://rack-oauth2//lib/rack/oauth2/server/abstract/handler.rb#6
  def response; end

  # Sets the attribute response
  #
  # @param value the value to set the attribute response to.
  #
  # source://rack-oauth2//lib/rack/oauth2/server/abstract/handler.rb#6
  def response=(_arg0); end
end

# source://rack-oauth2//lib/rack/oauth2/server/abstract/request.rb#5
class Rack::OAuth2::Server::Abstract::Request < ::Rack::Request
  include ::AttrOptional
  include ::AttrRequired
  extend ::AttrOptional::ClassMethods
  extend ::AttrRequired::ClassMethods

  # @return [Request] a new instance of Request
  #
  # source://rack-oauth2//lib/rack/oauth2/server/abstract/request.rb#10
  def initialize(env); end

  # source://rack-oauth2//lib/rack/oauth2/server/abstract/request.rb#16
  def attr_missing!; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def client_id; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def client_id=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def scope; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def scope=(_arg0); end
end

# source://rack-oauth2//lib/rack/oauth2/server/abstract/response.rb#5
class Rack::OAuth2::Server::Abstract::Response < ::Rack::Response
  include ::AttrOptional
  include ::AttrRequired
  extend ::AttrOptional::ClassMethods
  extend ::AttrRequired::ClassMethods

  # @return [Response] a new instance of Response
  #
  # source://rack-oauth2//lib/rack/oauth2/server/abstract/response.rb#8
  def initialize(request); end
end

# source://rack-oauth2//lib/rack/oauth2/server/abstract/error.rb#56
class Rack::OAuth2::Server::Abstract::ServerError < ::Rack::OAuth2::Server::Abstract::Error
  # @return [ServerError] a new instance of ServerError
  #
  # source://rack-oauth2//lib/rack/oauth2/server/abstract/error.rb#57
  def initialize(error = T.unsafe(nil), description = T.unsafe(nil), options = T.unsafe(nil)); end
end

# source://rack-oauth2//lib/rack/oauth2/server/abstract/error.rb#62
class Rack::OAuth2::Server::Abstract::TemporarilyUnavailable < ::Rack::OAuth2::Server::Abstract::Error
  # @return [TemporarilyUnavailable] a new instance of TemporarilyUnavailable
  #
  # source://rack-oauth2//lib/rack/oauth2/server/abstract/error.rb#63
  def initialize(error = T.unsafe(nil), description = T.unsafe(nil), options = T.unsafe(nil)); end
end

# source://rack-oauth2//lib/rack/oauth2/server/abstract/error.rb#43
class Rack::OAuth2::Server::Abstract::Unauthorized < ::Rack::OAuth2::Server::Abstract::Error
  # @return [Unauthorized] a new instance of Unauthorized
  #
  # source://rack-oauth2//lib/rack/oauth2/server/abstract/error.rb#44
  def initialize(error = T.unsafe(nil), description = T.unsafe(nil), options = T.unsafe(nil)); end
end

# source://rack-oauth2//lib/rack/oauth2/server/authorize.rb#4
class Rack::OAuth2::Server::Authorize < ::Rack::OAuth2::Server::Abstract::Handler
  # source://rack-oauth2//lib/rack/oauth2/server/authorize.rb#5
  def _call(env); end

  private

  # source://rack-oauth2//lib/rack/oauth2/server/authorize.rb#30
  def extensions; end

  # source://rack-oauth2//lib/rack/oauth2/server/authorize.rb#14
  def response_type_for(request); end
end

# source://rack-oauth2//lib/rack/oauth2/server/authorize/error.rb#30
class Rack::OAuth2::Server::Authorize::BadRequest < ::Rack::OAuth2::Server::Abstract::BadRequest
  include ::Rack::OAuth2::Server::Authorize::ErrorHandler

  # source://rack-oauth2//lib/rack/oauth2/server/authorize/error.rb#7
  def protocol_params_location; end

  # source://rack-oauth2//lib/rack/oauth2/server/authorize/error.rb#7
  def protocol_params_location=(_arg0); end

  # source://rack-oauth2//lib/rack/oauth2/server/authorize/error.rb#7
  def redirect_uri; end

  # source://rack-oauth2//lib/rack/oauth2/server/authorize/error.rb#7
  def redirect_uri=(_arg0); end

  # source://rack-oauth2//lib/rack/oauth2/server/authorize/error.rb#7
  def state; end

  # source://rack-oauth2//lib/rack/oauth2/server/authorize/error.rb#7
  def state=(_arg0); end
end

# source://rack-oauth2//lib/rack/oauth2/server/authorize/code.rb#5
class Rack::OAuth2::Server::Authorize::Code < ::Rack::OAuth2::Server::Abstract::Handler
  # source://rack-oauth2//lib/rack/oauth2/server/authorize/code.rb#6
  def _call(env); end
end

# source://rack-oauth2//lib/rack/oauth2/server/authorize/code.rb#12
class Rack::OAuth2::Server::Authorize::Code::Request < ::Rack::OAuth2::Server::Authorize::Request
  include ::Rack::OAuth2::Server::Extension::PKCE::AuthorizationRequest

  # @return [Request] a new instance of Request
  #
  # source://rack-oauth2//lib/rack/oauth2/server/authorize/code.rb#15
  def initialize(env); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def client_id; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def client_id=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def code_challenge; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def code_challenge=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def code_challenge_method; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def code_challenge_method=(_arg0); end

  # source://rack-oauth2//lib/rack/oauth2/server/authorize/code.rb#21
  def error_params_location; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def redirect_uri; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def redirect_uri=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def response_mode; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def response_mode=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def response_type; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def response_type=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def scope; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def scope=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def state; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def state=(_arg0); end
end

# source://rack-oauth2//lib/rack/oauth2/server/authorize/code.rb#26
class Rack::OAuth2::Server::Authorize::Code::Response < ::Rack::OAuth2::Server::Authorize::Response
  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def approval; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def approval=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def code; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def code=(_arg0); end

  # source://rack-oauth2//lib/rack/oauth2/server/authorize/code.rb#29
  def protocol_params; end

  # source://rack-oauth2//lib/rack/oauth2/server/authorize/code.rb#33
  def protocol_params_location; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def redirect_uri; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def redirect_uri=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def session_state; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def session_state=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def state; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def state=(_arg0); end
end

# source://rack-oauth2//lib/rack/oauth2/server/authorize/error.rb#5
module Rack::OAuth2::Server::Authorize::ErrorHandler
  # source://rack-oauth2//lib/rack/oauth2/server/authorize/error.rb#19
  def finish; end

  # source://rack-oauth2//lib/rack/oauth2/server/authorize/error.rb#10
  def protocol_params; end

  # @return [Boolean]
  #
  # source://rack-oauth2//lib/rack/oauth2/server/authorize/error.rb#14
  def redirect?; end

  class << self
    # @private
    #
    # source://rack-oauth2//lib/rack/oauth2/server/authorize/error.rb#6
    def included(klass); end
  end
end

# source://rack-oauth2//lib/rack/oauth2/server/authorize/error.rb#42
module Rack::OAuth2::Server::Authorize::ErrorMethods
  # source://rack-oauth2//lib/rack/oauth2/server/authorize/error.rb#68
  def bad_request!(error = T.unsafe(nil), description = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://rack-oauth2//lib/rack/oauth2/server/authorize/error.rb#72
  def server_error!(description = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://rack-oauth2//lib/rack/oauth2/server/authorize/error.rb#76
  def temporarily_unavailable!(description = T.unsafe(nil), options = T.unsafe(nil)); end

  private

  # source://rack-oauth2//lib/rack/oauth2/server/authorize/error.rb#82
  def error!(klass, error, description, options); end

  class << self
    # @private
    #
    # source://rack-oauth2//lib/rack/oauth2/server/authorize/error.rb#53
    def included(klass); end
  end
end

# source://rack-oauth2//lib/rack/oauth2/server/authorize/error.rb#43
Rack::OAuth2::Server::Authorize::ErrorMethods::DEFAULT_DESCRIPTION = T.let(T.unsafe(nil), Hash)

# source://rack-oauth2//lib/rack/oauth2/server/authorize/extension.rb#5
module Rack::OAuth2::Server::Authorize::Extension; end

# source://rack-oauth2//lib/rack/oauth2/server/authorize.rb#36
class Rack::OAuth2::Server::Authorize::Request < ::Rack::OAuth2::Server::Abstract::Request
  include ::Rack::OAuth2::Server::Extension::ResponseMode::AuthorizationRequest
  include ::Rack::OAuth2::Server::Authorize::ErrorMethods

  # @return [Request] a new instance of Request
  #
  # source://rack-oauth2//lib/rack/oauth2/server/authorize.rb#43
  def initialize(env); end

  def access_denied!(description = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def client_id; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def client_id=(_arg0); end

  # source://rack-oauth2//lib/rack/oauth2/server/authorize.rb#74
  def error_params_location; end

  def invalid_request!(description = T.unsafe(nil), options = T.unsafe(nil)); end
  def invalid_scope!(description = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def redirect_uri; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def redirect_uri=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def response_mode; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def response_mode=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def response_type; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def response_type=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def scope; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def scope=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def state; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def state=(_arg0); end

  def unauthorized_client!(description = T.unsafe(nil), options = T.unsafe(nil)); end
  def unsupported_response_type!(description = T.unsafe(nil), options = T.unsafe(nil)); end

  # Returns the value of attribute verified_redirect_uri.
  #
  # source://rack-oauth2//lib/rack/oauth2/server/authorize.rb#41
  def verified_redirect_uri; end

  # Sets the attribute verified_redirect_uri
  #
  # @param value the value to set the attribute verified_redirect_uri to.
  #
  # source://rack-oauth2//lib/rack/oauth2/server/authorize.rb#41
  def verified_redirect_uri=(_arg0); end

  # source://rack-oauth2//lib/rack/oauth2/server/authorize.rb#52
  def verify_redirect_uri!(pre_registered, allow_partial_match = T.unsafe(nil)); end
end

# source://rack-oauth2//lib/rack/oauth2/server/authorize.rb#79
class Rack::OAuth2::Server::Authorize::Response < ::Rack::OAuth2::Server::Abstract::Response
  # @return [Response] a new instance of Response
  #
  # source://rack-oauth2//lib/rack/oauth2/server/authorize.rb#83
  def initialize(request); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def approval; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def approval=(_arg0); end

  # source://rack-oauth2//lib/rack/oauth2/server/authorize.rb#92
  def approve!; end

  # @return [Boolean]
  #
  # source://rack-oauth2//lib/rack/oauth2/server/authorize.rb#88
  def approved?; end

  # source://rack-oauth2//lib/rack/oauth2/server/authorize.rb#104
  def finish; end

  # source://rack-oauth2//lib/rack/oauth2/server/authorize.rb#96
  def protocol_params; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def redirect_uri; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def redirect_uri=(_arg0); end

  # source://rack-oauth2//lib/rack/oauth2/server/authorize.rb#100
  def redirect_uri_with_credentials; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def session_state; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def session_state=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def state; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def state=(_arg0); end
end

# source://rack-oauth2//lib/rack/oauth2/server/authorize/error.rb#34
class Rack::OAuth2::Server::Authorize::ServerError < ::Rack::OAuth2::Server::Abstract::ServerError
  include ::Rack::OAuth2::Server::Authorize::ErrorHandler

  # source://rack-oauth2//lib/rack/oauth2/server/authorize/error.rb#7
  def protocol_params_location; end

  # source://rack-oauth2//lib/rack/oauth2/server/authorize/error.rb#7
  def protocol_params_location=(_arg0); end

  # source://rack-oauth2//lib/rack/oauth2/server/authorize/error.rb#7
  def redirect_uri; end

  # source://rack-oauth2//lib/rack/oauth2/server/authorize/error.rb#7
  def redirect_uri=(_arg0); end

  # source://rack-oauth2//lib/rack/oauth2/server/authorize/error.rb#7
  def state; end

  # source://rack-oauth2//lib/rack/oauth2/server/authorize/error.rb#7
  def state=(_arg0); end
end

# source://rack-oauth2//lib/rack/oauth2/server/authorize/error.rb#38
class Rack::OAuth2::Server::Authorize::TemporarilyUnavailable < ::Rack::OAuth2::Server::Abstract::TemporarilyUnavailable
  include ::Rack::OAuth2::Server::Authorize::ErrorHandler

  # source://rack-oauth2//lib/rack/oauth2/server/authorize/error.rb#7
  def protocol_params_location; end

  # source://rack-oauth2//lib/rack/oauth2/server/authorize/error.rb#7
  def protocol_params_location=(_arg0); end

  # source://rack-oauth2//lib/rack/oauth2/server/authorize/error.rb#7
  def redirect_uri; end

  # source://rack-oauth2//lib/rack/oauth2/server/authorize/error.rb#7
  def redirect_uri=(_arg0); end

  # source://rack-oauth2//lib/rack/oauth2/server/authorize/error.rb#7
  def state; end

  # source://rack-oauth2//lib/rack/oauth2/server/authorize/error.rb#7
  def state=(_arg0); end
end

# source://rack-oauth2//lib/rack/oauth2/server/authorize/token.rb#5
class Rack::OAuth2::Server::Authorize::Token < ::Rack::OAuth2::Server::Abstract::Handler
  # source://rack-oauth2//lib/rack/oauth2/server/authorize/token.rb#6
  def _call(env); end
end

# source://rack-oauth2//lib/rack/oauth2/server/authorize/token.rb#12
class Rack::OAuth2::Server::Authorize::Token::Request < ::Rack::OAuth2::Server::Authorize::Request
  # @return [Request] a new instance of Request
  #
  # source://rack-oauth2//lib/rack/oauth2/server/authorize/token.rb#13
  def initialize(env); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def client_id; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def client_id=(_arg0); end

  # source://rack-oauth2//lib/rack/oauth2/server/authorize/token.rb#19
  def error_params_location; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def redirect_uri; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def redirect_uri=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def response_mode; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def response_mode=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def response_type; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def response_type=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def scope; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def scope=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def state; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def state=(_arg0); end
end

# source://rack-oauth2//lib/rack/oauth2/server/authorize/token.rb#24
class Rack::OAuth2::Server::Authorize::Token::Response < ::Rack::OAuth2::Server::Authorize::Response
  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def access_token; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def access_token=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def approval; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def approval=(_arg0); end

  # source://rack-oauth2//lib/rack/oauth2/server/authorize/token.rb#27
  def protocol_params; end

  # source://rack-oauth2//lib/rack/oauth2/server/authorize/token.rb#35
  def protocol_params_location; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def redirect_uri; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def redirect_uri=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def session_state; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def session_state=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def state; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def state=(_arg0); end
end

# source://rack-oauth2//lib/rack/oauth2/server/extension/pkce.rb#4
module Rack::OAuth2::Server::Extension; end

# source://rack-oauth2//lib/rack/oauth2/server/extension/pkce.rb#5
module Rack::OAuth2::Server::Extension::PKCE; end

# source://rack-oauth2//lib/rack/oauth2/server/extension/pkce.rb#6
module Rack::OAuth2::Server::Extension::PKCE::AuthorizationRequest
  # source://rack-oauth2//lib/rack/oauth2/server/extension/pkce.rb#11
  def initialize(env); end

  class << self
    # @private
    #
    # source://rack-oauth2//lib/rack/oauth2/server/extension/pkce.rb#7
    def included(klass); end
  end
end

# source://rack-oauth2//lib/rack/oauth2/server/extension/pkce.rb#18
module Rack::OAuth2::Server::Extension::PKCE::TokenRequest
  # source://rack-oauth2//lib/rack/oauth2/server/extension/pkce.rb#23
  def initialize(env); end

  # source://rack-oauth2//lib/rack/oauth2/server/extension/pkce.rb#28
  def verify_code_verifier!(code_challenge, code_challenge_method = T.unsafe(nil)); end

  class << self
    # @private
    #
    # source://rack-oauth2//lib/rack/oauth2/server/extension/pkce.rb#19
    def included(klass); end
  end
end

# source://rack-oauth2//lib/rack/oauth2/server/extension/response_mode.rb#5
module Rack::OAuth2::Server::Extension::ResponseMode; end

# source://rack-oauth2//lib/rack/oauth2/server/extension/response_mode.rb#6
module Rack::OAuth2::Server::Extension::ResponseMode::AuthorizationRequest
  # source://rack-oauth2//lib/rack/oauth2/server/extension/response_mode.rb#11
  def initialize(env); end

  class << self
    # @private
    #
    # source://rack-oauth2//lib/rack/oauth2/server/extension/response_mode.rb#7
    def included(klass); end
  end
end

# source://rack-oauth2//lib/rack/oauth2/server/rails.rb#4
module Rack::OAuth2::Server::Rails; end

# source://rack-oauth2//lib/rack/oauth2/server/rails/authorize.rb#5
class Rack::OAuth2::Server::Rails::Authorize < ::Rack::OAuth2::Server::Authorize
  # @return [Authorize] a new instance of Authorize
  #
  # source://rack-oauth2//lib/rack/oauth2/server/rails/authorize.rb#6
  def initialize(app); end

  # source://rack-oauth2//lib/rack/oauth2/server/rails/authorize.rb#11
  def _call(env); end

  private

  # source://rack-oauth2//lib/rack/oauth2/server/rails/authorize.rb#20
  def prepare_oauth_env(env); end
end

# source://rack-oauth2//lib/rack/oauth2/server/rails/authorize.rb#32
module Rack::OAuth2::Server::Rails::Authorize::ResponseExt
  include ::Rack::OAuth2::Server::Rails::ResponseExt

  # source://rack-oauth2//lib/rack/oauth2/server/rails/authorize.rb#35
  def approve!; end
end

# source://rack-oauth2//lib/rack/oauth2/server/rails.rb#7
Rack::OAuth2::Server::Rails::ERROR = T.let(T.unsafe(nil), String)

# source://rack-oauth2//lib/rack/oauth2/server/rails.rb#5
Rack::OAuth2::Server::Rails::REQUEST = T.let(T.unsafe(nil), String)

# source://rack-oauth2//lib/rack/oauth2/server/rails.rb#6
Rack::OAuth2::Server::Rails::RESPONSE = T.let(T.unsafe(nil), String)

# source://rack-oauth2//lib/rack/oauth2/server/rails/response_ext.rb#5
module Rack::OAuth2::Server::Rails::ResponseExt
  # source://rack-oauth2//lib/rack/oauth2/server/rails/response_ext.rb#30
  def finish; end

  # source://rack-oauth2//lib/rack/oauth2/server/rails/response_ext.rb#24
  def headers; end

  # source://rack-oauth2//lib/rack/oauth2/server/rails/response_ext.rb#18
  def json; end

  # source://rack-oauth2//lib/rack/oauth2/server/rails/response_ext.rb#12
  def location; end

  # @return [Boolean]
  #
  # source://rack-oauth2//lib/rack/oauth2/server/rails/response_ext.rb#6
  def redirect?; end

  private

  # source://rack-oauth2//lib/rack/oauth2/server/rails/response_ext.rb#41
  def ensure_finish; end

  # @return [Boolean]
  #
  # source://rack-oauth2//lib/rack/oauth2/server/rails/response_ext.rb#37
  def finished?; end
end

# source://rack-oauth2//lib/rack/oauth2/server/resource.rb#4
class Rack::OAuth2::Server::Resource < ::Rack::OAuth2::Server::Abstract::Handler
  # @return [Resource] a new instance of Resource
  #
  # source://rack-oauth2//lib/rack/oauth2/server/resource.rb#9
  def initialize(app, realm = T.unsafe(nil), &authenticator); end

  # source://rack-oauth2//lib/rack/oauth2/server/resource.rb#15
  def _call(env); end

  # Returns the value of attribute realm.
  #
  # source://rack-oauth2//lib/rack/oauth2/server/resource.rb#7
  def realm; end

  # Sets the attribute realm
  #
  # @param value the value to set the attribute realm to.
  #
  # source://rack-oauth2//lib/rack/oauth2/server/resource.rb#7
  def realm=(_arg0); end

  # Returns the value of attribute request.
  #
  # source://rack-oauth2//lib/rack/oauth2/server/resource.rb#7
  def request; end

  # Sets the attribute request
  #
  # @param value the value to set the attribute request to.
  #
  # source://rack-oauth2//lib/rack/oauth2/server/resource.rb#7
  def request=(_arg0); end

  private

  # source://rack-oauth2//lib/rack/oauth2/server/resource.rb#28
  def authenticate!(request); end
end

# source://rack-oauth2//lib/rack/oauth2/server/resource.rb#5
Rack::OAuth2::Server::Resource::ACCESS_TOKEN = T.let(T.unsafe(nil), String)

# source://rack-oauth2//lib/rack/oauth2/server/resource/error.rb#5
class Rack::OAuth2::Server::Resource::BadRequest < ::Rack::OAuth2::Server::Abstract::BadRequest; end

# source://rack-oauth2//lib/rack/oauth2/server/resource/bearer.rb#5
class Rack::OAuth2::Server::Resource::Bearer < ::Rack::OAuth2::Server::Resource
  # source://rack-oauth2//lib/rack/oauth2/server/resource/bearer.rb#6
  def _call(env); end
end

# source://rack-oauth2//lib/rack/oauth2/server/resource/bearer/error.rb#12
module Rack::OAuth2::Server::Resource::Bearer::ErrorMethods
  include ::Rack::OAuth2::Server::Resource::ErrorMethods

  def insufficient_scope!(description = T.unsafe(nil), options = T.unsafe(nil)); end
  def invalid_request!(description = T.unsafe(nil), options = T.unsafe(nil)); end
  def invalid_token!(description = T.unsafe(nil), options = T.unsafe(nil)); end

  # @raise [Unauthorized]
  #
  # source://rack-oauth2//lib/rack/oauth2/server/resource/bearer/error.rb#14
  def unauthorized!(error = T.unsafe(nil), description = T.unsafe(nil), options = T.unsafe(nil)); end
end

# source://rack-oauth2//lib/rack/oauth2/server/resource/bearer.rb#13
class Rack::OAuth2::Server::Resource::Bearer::Request < ::Rack::OAuth2::Server::Resource::Request
  include ::Rack::OAuth2::Server::Resource::Bearer::ErrorMethods

  # source://rack-oauth2//lib/rack/oauth2/server/resource/bearer.rb#29
  def access_token_in_header; end

  # source://rack-oauth2//lib/rack/oauth2/server/resource/bearer.rb#37
  def access_token_in_payload; end

  # @return [Boolean]
  #
  # source://rack-oauth2//lib/rack/oauth2/server/resource/bearer.rb#25
  def oauth2?; end

  # source://rack-oauth2//lib/rack/oauth2/server/resource/bearer.rb#14
  def setup!; end
end

# source://rack-oauth2//lib/rack/oauth2/server/resource/bearer/error.rb#6
class Rack::OAuth2::Server::Resource::Bearer::Unauthorized < ::Rack::OAuth2::Server::Resource::Unauthorized
  # source://rack-oauth2//lib/rack/oauth2/server/resource/bearer/error.rb#7
  def scheme; end
end

# source://rack-oauth2//lib/rack/oauth2/server/resource.rb#6
Rack::OAuth2::Server::Resource::DEFAULT_REALM = T.let(T.unsafe(nil), String)

# source://rack-oauth2//lib/rack/oauth2/server/resource/error.rb#39
module Rack::OAuth2::Server::Resource::ErrorMethods
  # @raise [BadRequest]
  #
  # source://rack-oauth2//lib/rack/oauth2/server/resource/error.rb#64
  def bad_request!(error, description = T.unsafe(nil), options = T.unsafe(nil)); end

  # @raise [Forbidden]
  #
  # source://rack-oauth2//lib/rack/oauth2/server/resource/error.rb#72
  def forbidden!(error, description = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://rack-oauth2//lib/rack/oauth2/server/resource/error.rb#68
  def unauthorized!(error = T.unsafe(nil), description = T.unsafe(nil), options = T.unsafe(nil)); end

  class << self
    # @private
    #
    # source://rack-oauth2//lib/rack/oauth2/server/resource/error.rb#46
    def included(klass); end
  end
end

# source://rack-oauth2//lib/rack/oauth2/server/resource/error.rb#40
Rack::OAuth2::Server::Resource::ErrorMethods::DEFAULT_DESCRIPTION = T.let(T.unsafe(nil), Hash)

# source://rack-oauth2//lib/rack/oauth2/server/resource/error.rb#26
class Rack::OAuth2::Server::Resource::Forbidden < ::Rack::OAuth2::Server::Abstract::Forbidden
  # @return [Forbidden] a new instance of Forbidden
  #
  # source://rack-oauth2//lib/rack/oauth2/server/resource/error.rb#29
  def initialize(error = T.unsafe(nil), description = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://rack-oauth2//lib/rack/oauth2/server/resource/error.rb#34
  def protocol_params; end

  # Returns the value of attribute scope.
  #
  # source://rack-oauth2//lib/rack/oauth2/server/resource/error.rb#27
  def scope; end

  # Sets the attribute scope
  #
  # @param value the value to set the attribute scope to.
  #
  # source://rack-oauth2//lib/rack/oauth2/server/resource/error.rb#27
  def scope=(_arg0); end
end

# source://rack-oauth2//lib/rack/oauth2/server/resource/mac.rb#5
class Rack::OAuth2::Server::Resource::MAC < ::Rack::OAuth2::Server::Resource
  # source://rack-oauth2//lib/rack/oauth2/server/resource/mac.rb#6
  def _call(env); end
end

# source://rack-oauth2//lib/rack/oauth2/server/resource/mac/error.rb#12
module Rack::OAuth2::Server::Resource::MAC::ErrorMethods
  include ::Rack::OAuth2::Server::Resource::ErrorMethods

  def insufficient_scope!(description = T.unsafe(nil), options = T.unsafe(nil)); end
  def invalid_request!(description = T.unsafe(nil), options = T.unsafe(nil)); end
  def invalid_token!(description = T.unsafe(nil), options = T.unsafe(nil)); end

  # @raise [Unauthorized]
  #
  # source://rack-oauth2//lib/rack/oauth2/server/resource/mac/error.rb#14
  def unauthorized!(error = T.unsafe(nil), description = T.unsafe(nil), options = T.unsafe(nil)); end
end

# source://rack-oauth2//lib/rack/oauth2/server/resource/mac.rb#13
class Rack::OAuth2::Server::Resource::MAC::Request < ::Rack::OAuth2::Server::Resource::Request
  include ::Rack::OAuth2::Server::Resource::MAC::ErrorMethods

  # Returns the value of attribute ext.
  #
  # source://rack-oauth2//lib/rack/oauth2/server/resource/mac.rb#14
  def ext; end

  # Returns the value of attribute nonce.
  #
  # source://rack-oauth2//lib/rack/oauth2/server/resource/mac.rb#14
  def nonce; end

  # @return [Boolean]
  #
  # source://rack-oauth2//lib/rack/oauth2/server/resource/mac.rb#26
  def oauth2?; end

  # source://rack-oauth2//lib/rack/oauth2/server/resource/mac.rb#16
  def setup!; end

  # Returns the value of attribute signature.
  #
  # source://rack-oauth2//lib/rack/oauth2/server/resource/mac.rb#14
  def signature; end

  # Returns the value of attribute ts.
  #
  # source://rack-oauth2//lib/rack/oauth2/server/resource/mac.rb#14
  def ts; end
end

# source://rack-oauth2//lib/rack/oauth2/server/resource/mac/error.rb#6
class Rack::OAuth2::Server::Resource::MAC::Unauthorized < ::Rack::OAuth2::Server::Resource::Unauthorized
  # source://rack-oauth2//lib/rack/oauth2/server/resource/mac/error.rb#7
  def scheme; end
end

# source://rack-oauth2//lib/rack/oauth2/server/resource.rb#32
class Rack::OAuth2::Server::Resource::Request < ::Rack::Request
  include ::Rack::OAuth2::Server::Resource::ErrorMethods

  # @return [Request] a new instance of Request
  #
  # source://rack-oauth2//lib/rack/oauth2/server/resource.rb#35
  def initialize(env); end

  # Returns the value of attribute access_token.
  #
  # source://rack-oauth2//lib/rack/oauth2/server/resource.rb#33
  def access_token; end

  def insufficient_scope!(description = T.unsafe(nil), options = T.unsafe(nil)); end
  def invalid_request!(description = T.unsafe(nil), options = T.unsafe(nil)); end
  def invalid_token!(description = T.unsafe(nil), options = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://rack-oauth2//lib/rack/oauth2/server/resource.rb#44
  def oauth2?; end

  # source://rack-oauth2//lib/rack/oauth2/server/resource.rb#40
  def setup!; end
end

# source://rack-oauth2//lib/rack/oauth2/server/resource/error.rb#8
class Rack::OAuth2::Server::Resource::Unauthorized < ::Rack::OAuth2::Server::Abstract::Unauthorized
  # source://rack-oauth2//lib/rack/oauth2/server/resource/error.rb#13
  def finish; end

  # source://rack-oauth2//lib/rack/oauth2/server/resource/error.rb#9
  def scheme; end
end

# source://rack-oauth2//lib/rack/oauth2/server/token.rb#6
class Rack::OAuth2::Server::Token < ::Rack::OAuth2::Server::Abstract::Handler
  # source://rack-oauth2//lib/rack/oauth2/server/token.rb#7
  def _call(env); end

  private

  # source://rack-oauth2//lib/rack/oauth2/server/token.rb#39
  def extensions; end

  # source://rack-oauth2//lib/rack/oauth2/server/token.rb#16
  def grant_type_for(request); end
end

# source://rack-oauth2//lib/rack/oauth2/server/token/authorization_code.rb#5
class Rack::OAuth2::Server::Token::AuthorizationCode < ::Rack::OAuth2::Server::Abstract::Handler
  # source://rack-oauth2//lib/rack/oauth2/server/token/authorization_code.rb#6
  def _call(env); end
end

# source://rack-oauth2//lib/rack/oauth2/server/token/authorization_code.rb#12
class Rack::OAuth2::Server::Token::AuthorizationCode::Request < ::Rack::OAuth2::Server::Token::Request
  include ::Rack::OAuth2::Server::Extension::PKCE::TokenRequest

  # @return [Request] a new instance of Request
  #
  # source://rack-oauth2//lib/rack/oauth2/server/token/authorization_code.rb#18
  def initialize(env); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def client_assertion; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def client_assertion=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def client_assertion_type; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def client_assertion_type=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def client_id; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def client_id=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def client_secret; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def client_secret=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def code; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def code=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def code_verifier; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def code_verifier=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def grant_type; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def grant_type=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def redirect_uri; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def redirect_uri=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def scope; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def scope=(_arg0); end
end

# source://rack-oauth2//lib/rack/oauth2/server/token/error.rb#5
class Rack::OAuth2::Server::Token::BadRequest < ::Rack::OAuth2::Server::Abstract::BadRequest; end

# source://rack-oauth2//lib/rack/oauth2/server/token/client_credentials.rb#5
class Rack::OAuth2::Server::Token::ClientCredentials < ::Rack::OAuth2::Server::Abstract::Handler
  # source://rack-oauth2//lib/rack/oauth2/server/token/client_credentials.rb#6
  def _call(env); end
end

# source://rack-oauth2//lib/rack/oauth2/server/token/client_credentials.rb#12
class Rack::OAuth2::Server::Token::ClientCredentials::Request < ::Rack::OAuth2::Server::Token::Request
  # @return [Request] a new instance of Request
  #
  # source://rack-oauth2//lib/rack/oauth2/server/token/client_credentials.rb#13
  def initialize(env); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def client_assertion; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def client_assertion=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def client_assertion_type; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def client_assertion_type=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def client_id; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def client_id=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def client_secret; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def client_secret=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def grant_type; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def grant_type=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def scope; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def scope=(_arg0); end
end

# source://rack-oauth2//lib/rack/oauth2/server/token/error.rb#18
module Rack::OAuth2::Server::Token::ErrorMethods
  # @raise [BadRequest]
  #
  # source://rack-oauth2//lib/rack/oauth2/server/token/error.rb#43
  def bad_request!(error, description = T.unsafe(nil), options = T.unsafe(nil)); end

  # @raise [Unauthorized]
  #
  # source://rack-oauth2//lib/rack/oauth2/server/token/error.rb#47
  def unauthorized!(error, description = T.unsafe(nil), options = T.unsafe(nil)); end

  class << self
    # @private
    #
    # source://rack-oauth2//lib/rack/oauth2/server/token/error.rb#28
    def included(klass); end
  end
end

# source://rack-oauth2//lib/rack/oauth2/server/token/error.rb#19
Rack::OAuth2::Server::Token::ErrorMethods::DEFAULT_DESCRIPTION = T.let(T.unsafe(nil), Hash)

# source://rack-oauth2//lib/rack/oauth2/server/token/extension.rb#5
module Rack::OAuth2::Server::Token::Extension; end

# source://rack-oauth2//lib/rack/oauth2/server/token/jwt_bearer.rb#5
class Rack::OAuth2::Server::Token::JWTBearer < ::Rack::OAuth2::Server::Abstract::Handler
  # source://rack-oauth2//lib/rack/oauth2/server/token/jwt_bearer.rb#6
  def _call(env); end
end

# source://rack-oauth2//lib/rack/oauth2/server/token/jwt_bearer.rb#12
class Rack::OAuth2::Server::Token::JWTBearer::Request < ::Rack::OAuth2::Server::Token::Request
  # @return [Request] a new instance of Request
  #
  # source://rack-oauth2//lib/rack/oauth2/server/token/jwt_bearer.rb#16
  def initialize(env); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def assertion; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def assertion=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def client_assertion; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def client_assertion=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def client_assertion_type; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def client_assertion_type=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def client_id; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def client_id=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def client_secret; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def client_secret=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def grant_type; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def grant_type=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def scope; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def scope=(_arg0); end
end

# source://rack-oauth2//lib/rack/oauth2/server/token/password.rb#5
class Rack::OAuth2::Server::Token::Password < ::Rack::OAuth2::Server::Abstract::Handler
  # source://rack-oauth2//lib/rack/oauth2/server/token/password.rb#6
  def _call(env); end
end

# source://rack-oauth2//lib/rack/oauth2/server/token/password.rb#12
class Rack::OAuth2::Server::Token::Password::Request < ::Rack::OAuth2::Server::Token::Request
  # @return [Request] a new instance of Request
  #
  # source://rack-oauth2//lib/rack/oauth2/server/token/password.rb#15
  def initialize(env); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def client_assertion; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def client_assertion=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def client_assertion_type; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def client_assertion_type=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def client_id; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def client_id=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def client_secret; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def client_secret=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def grant_type; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def grant_type=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def password; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def password=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def scope; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def scope=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def username; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def username=(_arg0); end
end

# source://rack-oauth2//lib/rack/oauth2/server/token/refresh_token.rb#5
class Rack::OAuth2::Server::Token::RefreshToken < ::Rack::OAuth2::Server::Abstract::Handler
  # source://rack-oauth2//lib/rack/oauth2/server/token/refresh_token.rb#6
  def _call(env); end
end

# source://rack-oauth2//lib/rack/oauth2/server/token/refresh_token.rb#12
class Rack::OAuth2::Server::Token::RefreshToken::Request < ::Rack::OAuth2::Server::Token::Request
  # @return [Request] a new instance of Request
  #
  # source://rack-oauth2//lib/rack/oauth2/server/token/refresh_token.rb#15
  def initialize(env); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def client_assertion; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def client_assertion=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def client_assertion_type; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def client_assertion_type=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def client_id; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def client_id=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def client_secret; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def client_secret=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def grant_type; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def grant_type=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def refresh_token; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def refresh_token=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def scope; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def scope=(_arg0); end
end

# source://rack-oauth2//lib/rack/oauth2/server/token.rb#45
class Rack::OAuth2::Server::Token::Request < ::Rack::OAuth2::Server::Abstract::Request
  include ::Rack::OAuth2::Server::Token::ErrorMethods

  # @return [Request] a new instance of Request
  #
  # source://rack-oauth2//lib/rack/oauth2/server/token.rb#49
  def initialize(env); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def client_assertion; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def client_assertion=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def client_assertion_type; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def client_assertion_type=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def client_id; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def client_id=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def client_secret; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def client_secret=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def grant_type; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def grant_type=(_arg0); end

  def invalid_client!(description = T.unsafe(nil), options = T.unsafe(nil)); end
  def invalid_grant!(description = T.unsafe(nil), options = T.unsafe(nil)); end
  def invalid_request!(description = T.unsafe(nil), options = T.unsafe(nil)); end
  def invalid_scope!(description = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def scope; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def scope=(_arg0); end

  def unauthorized_client!(description = T.unsafe(nil), options = T.unsafe(nil)); end
  def unsupported_grant_type!(description = T.unsafe(nil), options = T.unsafe(nil)); end
end

# source://rack-oauth2//lib/rack/oauth2/server/token.rb#73
class Rack::OAuth2::Server::Token::Response < ::Rack::OAuth2::Server::Abstract::Response
  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def access_token; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def access_token=(_arg0); end

  # source://rack-oauth2//lib/rack/oauth2/server/token.rb#80
  def finish; end

  # source://rack-oauth2//lib/rack/oauth2/server/token.rb#76
  def protocol_params; end
end

# source://rack-oauth2//lib/rack/oauth2/server/token/saml2_bearer.rb#5
class Rack::OAuth2::Server::Token::SAML2Bearer < ::Rack::OAuth2::Server::Abstract::Handler
  # source://rack-oauth2//lib/rack/oauth2/server/token/saml2_bearer.rb#6
  def _call(env); end
end

# source://rack-oauth2//lib/rack/oauth2/server/token/saml2_bearer.rb#12
class Rack::OAuth2::Server::Token::SAML2Bearer::Request < ::Rack::OAuth2::Server::Token::Request
  # @return [Request] a new instance of Request
  #
  # source://rack-oauth2//lib/rack/oauth2/server/token/saml2_bearer.rb#16
  def initialize(env); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def assertion; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def assertion=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def client_assertion; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def client_assertion=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def client_assertion_type; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def client_assertion_type=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def client_id; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def client_id=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def client_secret; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def client_secret=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def grant_type; end

  # source://attr_required/1.0.1/lib/attr_required.rb#23
  def grant_type=(_arg0); end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def scope; end

  # source://attr_required/1.0.1/lib/attr_optional.rb#21
  def scope=(_arg0); end
end

# source://rack-oauth2//lib/rack/oauth2/server/token/error.rb#8
class Rack::OAuth2::Server::Token::Unauthorized < ::Rack::OAuth2::Server::Abstract::Unauthorized
  # source://rack-oauth2//lib/rack/oauth2/server/token/error.rb#9
  def finish; end
end

# source://rack-oauth2//lib/rack/oauth2/urn.rb#3
module Rack::OAuth2::URN; end

# source://rack-oauth2//lib/rack/oauth2/urn.rb#16
module Rack::OAuth2::URN::ClientAssertionType; end

# RFC7523
#
# source://rack-oauth2//lib/rack/oauth2/urn.rb#17
Rack::OAuth2::URN::ClientAssertionType::JWT_BEARER = T.let(T.unsafe(nil), String)

# RFC7522
#
# source://rack-oauth2//lib/rack/oauth2/urn.rb#18
Rack::OAuth2::URN::ClientAssertionType::SAML2_BEARER = T.let(T.unsafe(nil), String)

# source://rack-oauth2//lib/rack/oauth2/urn.rb#10
module Rack::OAuth2::URN::GrantType; end

# RFC7523
#
# source://rack-oauth2//lib/rack/oauth2/urn.rb#11
Rack::OAuth2::URN::GrantType::JWT_BEARER = T.let(T.unsafe(nil), String)

# RFC7522
#
# source://rack-oauth2//lib/rack/oauth2/urn.rb#12
Rack::OAuth2::URN::GrantType::SAML2_BEARER = T.let(T.unsafe(nil), String)

# RFC8693
#
# source://rack-oauth2//lib/rack/oauth2/urn.rb#13
Rack::OAuth2::URN::GrantType::TOKEN_EXCHANGE = T.let(T.unsafe(nil), String)

# source://rack-oauth2//lib/rack/oauth2/urn.rb#4
module Rack::OAuth2::URN::TokenType; end

# RFC8693
#
# source://rack-oauth2//lib/rack/oauth2/urn.rb#6
Rack::OAuth2::URN::TokenType::ACCESS_TOKEN = T.let(T.unsafe(nil), String)

# RFC7519
#
# source://rack-oauth2//lib/rack/oauth2/urn.rb#5
Rack::OAuth2::URN::TokenType::JWT = T.let(T.unsafe(nil), String)

# RFC8693
#
# source://rack-oauth2//lib/rack/oauth2/urn.rb#7
Rack::OAuth2::URN::TokenType::REFRESH_TOKEN = T.let(T.unsafe(nil), String)

# source://rack-oauth2//lib/rack/oauth2/util.rb#5
module Rack::OAuth2::Util
  class << self
    # source://rack-oauth2//lib/rack/oauth2/util.rb#15
    def base64_encode(text); end

    # source://rack-oauth2//lib/rack/oauth2/util.rb#23
    def compact_hash(hash); end

    # source://rack-oauth2//lib/rack/oauth2/util.rb#29
    def parse_uri(uri); end

    # source://rack-oauth2//lib/rack/oauth2/util.rb#40
    def redirect_uri(base_uri, location, params); end

    # @return [Boolean]
    #
    # source://rack-oauth2//lib/rack/oauth2/util.rb#52
    def uri_match?(base, given); end

    # source://rack-oauth2//lib/rack/oauth2/util.rb#19
    def urlsafe_base64_encode(text); end

    # source://rack-oauth2//lib/rack/oauth2/util.rb#11
    def www_form_url_decode(text); end

    # source://rack-oauth2//lib/rack/oauth2/util.rb#7
    def www_form_url_encode(text); end
  end
end

# source://rack-oauth2//lib/rack/oauth2.rb#11
Rack::OAuth2::VERSION = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#45
Rack::OPTIONS = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#42
Rack::PATCH = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#21
Rack::PATH_INFO = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#40
Rack::POST = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#41
Rack::PUT = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#25
Rack::QUERY_STRING = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#53
Rack::RACK_ERRORS = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#63
Rack::RACK_HIJACK = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#65
Rack::RACK_HIJACK_IO = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#55
Rack::RACK_INPUT = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#64
Rack::RACK_IS_HIJACK = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#54
Rack::RACK_LOGGER = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#76
Rack::RACK_METHODOVERRIDE_ORIGINAL_METHOD = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#67
Rack::RACK_MULTIPART_BUFFER_SIZE = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#68
Rack::RACK_MULTIPART_TEMPFILE_FACTORY = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#60
Rack::RACK_MULTIPROCESS = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#59
Rack::RACK_MULTITHREAD = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#66
Rack::RACK_RECURSIVE_INCLUDE = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#72
Rack::RACK_REQUEST_COOKIE_HASH = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#73
Rack::RACK_REQUEST_COOKIE_STRING = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#70
Rack::RACK_REQUEST_FORM_HASH = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#69
Rack::RACK_REQUEST_FORM_INPUT = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#71
Rack::RACK_REQUEST_FORM_VARS = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#74
Rack::RACK_REQUEST_QUERY_HASH = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#75
Rack::RACK_REQUEST_QUERY_STRING = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#61
Rack::RACK_RUNONCE = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#56
Rack::RACK_SESSION = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#57
Rack::RACK_SESSION_OPTIONS = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#77
Rack::RACK_SESSION_UNPACKED_COOKIE_DATA = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#58
Rack::RACK_SHOWSTATUS_DETAIL = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#52
Rack::RACK_TEMPFILES = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#62
Rack::RACK_URL_SCHEME = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#51
Rack::RACK_VERSION = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack/version.rb#23
Rack::RELEASE = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#22
Rack::REQUEST_METHOD = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#23
Rack::REQUEST_PATH = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#24
Rack::SCRIPT_NAME = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#27
Rack::SERVER_NAME = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#28
Rack::SERVER_PORT = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#26
Rack::SERVER_PROTOCOL = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#33
Rack::SET_COOKIE = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#48
Rack::TRACE = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#34
Rack::TRANSFER_ENCODING = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#47
Rack::UNLINK = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack/version.rb#16
Rack::VERSION = T.let(T.unsafe(nil), Array)
