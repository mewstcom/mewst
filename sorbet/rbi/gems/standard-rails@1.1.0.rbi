# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `standard-rails` gem.
# Please instead update this file by running `bin/tapioca gem standard-rails`.


# source://standard-rails//lib/standard/rails/version.rb#1
module Standard; end

# source://standard-rails//lib/standard/rails/version.rb#2
module Standard::Rails; end

# source://standard-rails//lib/standard/rails/plugin.rb#5
class Standard::Rails::Plugin < ::LintRoller::Plugin
  # @return [Plugin] a new instance of Plugin
  #
  # source://standard-rails//lib/standard/rails/plugin.rb#6
  def initialize(config); end

  # source://standard-rails//lib/standard/rails/plugin.rb#11
  def about; end

  # source://standard-rails//lib/standard/rails/plugin.rb#24
  def rules(context); end

  # @return [Boolean]
  #
  # source://standard-rails//lib/standard/rails/plugin.rb#20
  def supported?(context); end

  private

  # source://standard-rails//lib/standard/rails/plugin.rb#38
  def rules_with_config_applied; end

  # This is not fantastic.
  #
  # When you `require "rubocop-rails"`, it will not only load the cops,
  # but it will also monkey-patch RuboCop's default_configuration, which is
  # something that can't be undone for the lifetime of the process.
  #
  # See: https://github.com/rubocop/rubocop-rails/blob/master/lib/rubocop-rails.rb#L14
  #
  # As an alternative, standard-rails loads the cops directly, and then
  # simply tells the RuboCop config loader that it's been loaded. This is
  # taking advantage of a private API of an `attr_reader` that probably wasn't
  # meant to be mutated externally, but it's better than the `Inject` monkey
  # patching that rubocop-rails does (and many other RuboCop plugins do)
  #
  # source://standard-rails//lib/standard/rails/plugin.rb#74
  def trick_rubocop_into_thinking_we_required_rubocop_rails!; end

  # rubocop-rails adds additional options to a couple out-of-the-box cops
  # but Standard (1) doesn't enable these to begin with and (2) doesn't
  # allow rules' configs to be edited once they are defined, so we'll just
  # remove them here
  #
  # See: https://github.com/standardrb/standard-rails/issues/25#issuecomment-1881127173
  #
  # source://standard-rails//lib/standard/rails/plugin.rb#55
  def without_extended_rule_configs(rules); end

  # This is also not fantastic, but because loading RuboCop before loading
  # ActiveSupport will result in RuboCop redefining a number of ActiveSupport
  # methods like String#blank?, we need to suppress the warnings that are
  # emitted when we load the cops.
  #
  # source://standard-rails//lib/standard/rails/plugin.rb#85
  def without_warnings(&blk); end
end

# source://standard-rails//lib/standard/rails/version.rb#3
Standard::Rails::VERSION = T.let(T.unsafe(nil), String)
