# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `twilio-ruby` gem.
# Please instead update this file by running `bin/tapioca gem twilio-ruby`.

module Rack
  class << self
    def release; end
    def version; end
  end
end

Rack::CACHE_CONTROL = T.let(T.unsafe(nil), String)
Rack::CONTENT_LENGTH = T.let(T.unsafe(nil), String)
Rack::CONTENT_TYPE = T.let(T.unsafe(nil), String)
Rack::DELETE = T.let(T.unsafe(nil), String)
Rack::ETAG = T.let(T.unsafe(nil), String)
Rack::EXPIRES = T.let(T.unsafe(nil), String)
Rack::File = Rack::Files
Rack::GET = T.let(T.unsafe(nil), String)
Rack::HEAD = T.let(T.unsafe(nil), String)
Rack::HTTPS = T.let(T.unsafe(nil), String)
Rack::HTTP_COOKIE = T.let(T.unsafe(nil), String)
Rack::HTTP_HOST = T.let(T.unsafe(nil), String)
Rack::HTTP_PORT = T.let(T.unsafe(nil), String)
Rack::HTTP_VERSION = T.let(T.unsafe(nil), String)
Rack::LINK = T.let(T.unsafe(nil), String)
Rack::MockSession = Rack::Test::Session
Rack::OPTIONS = T.let(T.unsafe(nil), String)
Rack::PATCH = T.let(T.unsafe(nil), String)
Rack::PATH_INFO = T.let(T.unsafe(nil), String)
Rack::POST = T.let(T.unsafe(nil), String)
Rack::PUT = T.let(T.unsafe(nil), String)
Rack::QUERY_STRING = T.let(T.unsafe(nil), String)
Rack::RACK_ERRORS = T.let(T.unsafe(nil), String)
Rack::RACK_HIJACK = T.let(T.unsafe(nil), String)
Rack::RACK_HIJACK_IO = T.let(T.unsafe(nil), String)
Rack::RACK_INPUT = T.let(T.unsafe(nil), String)
Rack::RACK_IS_HIJACK = T.let(T.unsafe(nil), String)
Rack::RACK_LOGGER = T.let(T.unsafe(nil), String)
Rack::RACK_METHODOVERRIDE_ORIGINAL_METHOD = T.let(T.unsafe(nil), String)
Rack::RACK_MULTIPART_BUFFER_SIZE = T.let(T.unsafe(nil), String)
Rack::RACK_MULTIPART_TEMPFILE_FACTORY = T.let(T.unsafe(nil), String)
Rack::RACK_MULTIPROCESS = T.let(T.unsafe(nil), String)
Rack::RACK_MULTITHREAD = T.let(T.unsafe(nil), String)
Rack::RACK_RECURSIVE_INCLUDE = T.let(T.unsafe(nil), String)
Rack::RACK_REQUEST_COOKIE_HASH = T.let(T.unsafe(nil), String)
Rack::RACK_REQUEST_COOKIE_STRING = T.let(T.unsafe(nil), String)
Rack::RACK_REQUEST_FORM_HASH = T.let(T.unsafe(nil), String)
Rack::RACK_REQUEST_FORM_INPUT = T.let(T.unsafe(nil), String)
Rack::RACK_REQUEST_FORM_VARS = T.let(T.unsafe(nil), String)
Rack::RACK_REQUEST_QUERY_HASH = T.let(T.unsafe(nil), String)
Rack::RACK_REQUEST_QUERY_STRING = T.let(T.unsafe(nil), String)
Rack::RACK_RUNONCE = T.let(T.unsafe(nil), String)
Rack::RACK_SESSION = T.let(T.unsafe(nil), String)
Rack::RACK_SESSION_OPTIONS = T.let(T.unsafe(nil), String)
Rack::RACK_SESSION_UNPACKED_COOKIE_DATA = T.let(T.unsafe(nil), String)
Rack::RACK_SHOWSTATUS_DETAIL = T.let(T.unsafe(nil), String)
Rack::RACK_TEMPFILES = T.let(T.unsafe(nil), String)
Rack::RACK_URL_SCHEME = T.let(T.unsafe(nil), String)
Rack::RACK_VERSION = T.let(T.unsafe(nil), String)
Rack::RELEASE = T.let(T.unsafe(nil), String)
Rack::REQUEST_METHOD = T.let(T.unsafe(nil), String)
Rack::REQUEST_PATH = T.let(T.unsafe(nil), String)
Rack::SCRIPT_NAME = T.let(T.unsafe(nil), String)
Rack::SERVER_NAME = T.let(T.unsafe(nil), String)
Rack::SERVER_PORT = T.let(T.unsafe(nil), String)
Rack::SERVER_PROTOCOL = T.let(T.unsafe(nil), String)
Rack::SET_COOKIE = T.let(T.unsafe(nil), String)
Rack::TRACE = T.let(T.unsafe(nil), String)
Rack::TRANSFER_ENCODING = T.let(T.unsafe(nil), String)

class Rack::TwilioWebhookAuthentication
  def initialize(app, auth_token, *paths, &auth_token_lookup); end

  def call(env); end

  private

  def extract_params!(request); end
end

Rack::TwilioWebhookAuthentication::FORM_URLENCODED_MEDIA_TYPE = T.let(T.unsafe(nil), String)
Rack::UNLINK = T.let(T.unsafe(nil), String)
Rack::VERSION = T.let(T.unsafe(nil), Array)

module Twilio
  extend ::SingleForwardable

  class << self
    def account_sid(*args, **_arg1, &block); end
    def auth_token(*args, **_arg1, &block); end
    def configure(&block); end
    def deserialize_iso8601_date(date); end
    def deserialize_iso8601_datetime(date); end
    def deserialize_rfc2822(date); end
    def edge(*args, **_arg1, &block); end
    def flatten(map, result = T.unsafe(nil), previous = T.unsafe(nil)); end
    def http_client(*args, **_arg1, &block); end
    def logger(*args, **_arg1, &block); end
    def prefixed_collapsible_map(map, prefix); end
    def region(*args, **_arg1, &block); end
    def serialize_iso8601_date(date); end
    def serialize_iso8601_datetime(date); end
    def serialize_list(input_list); end
    def serialize_object(object); end

    private

    def configuration; end
  end
end

module Twilio::HTTP; end

class Twilio::HTTP::Client
  def initialize(proxy_prot = T.unsafe(nil), proxy_addr = T.unsafe(nil), proxy_port = T.unsafe(nil), proxy_user = T.unsafe(nil), proxy_pass = T.unsafe(nil), ssl_ca_file = T.unsafe(nil), timeout: T.unsafe(nil)); end

  def _request(request); end
  def adapter; end
  def adapter=(_arg0); end
  def configure_connection(&block); end
  def last_request; end
  def last_response; end
  def request(host, port, method, url, params = T.unsafe(nil), data = T.unsafe(nil), headers = T.unsafe(nil), auth = T.unsafe(nil), timeout = T.unsafe(nil)); end
  def send(request); end
  def timeout; end
end

module Twilio::JWT; end

class Twilio::JWT::AccessToken < ::Twilio::JWT::BaseJWT
  def initialize(account_sid, signing_key_sid, secret, grants = T.unsafe(nil), identity: T.unsafe(nil), nbf: T.unsafe(nil), ttl: T.unsafe(nil), valid_until: T.unsafe(nil), region: T.unsafe(nil)); end

  def account_sid; end
  def account_sid=(_arg0); end
  def add_grant(grant); end
  def grants; end
  def grants=(_arg0); end
  def identity; end
  def identity=(_arg0); end
  def nbf; end
  def nbf=(_arg0); end
  def region; end
  def region=(_arg0); end
  def secret; end
  def secret=(_arg0); end
  def signing_key_id; end
  def signing_key_id=(_arg0); end
  def ttl; end
  def ttl=(_arg0); end
  def valid_until; end
  def valid_until=(_arg0); end

  protected

  def _generate_headers; end
  def _generate_payload; end
end

class Twilio::JWT::AccessToken::ChatGrant
  include ::Twilio::JWT::AccessTokenGrant

  def _generate_payload; end
  def _key; end
  def deployment_role_sid; end
  def deployment_role_sid=(_arg0); end
  def endpoint_id; end
  def endpoint_id=(_arg0); end
  def push_credential_sid; end
  def push_credential_sid=(_arg0); end
  def service_sid; end
  def service_sid=(_arg0); end
end

class Twilio::JWT::AccessToken::ConversationsGrant
  include ::Twilio::JWT::AccessTokenGrant

  def _generate_payload; end
  def _key; end
  def configuration_profile_sid; end
  def configuration_profile_sid=(_arg0); end

  class << self
    def _deprecated_new(*_arg0); end
    def new(*args, **_arg1, &block); end
  end
end

class Twilio::JWT::AccessToken::IpMessagingGrant
  include ::Twilio::JWT::AccessTokenGrant

  def _generate_payload; end
  def _key; end
  def deployment_role_sid; end
  def deployment_role_sid=(_arg0); end
  def endpoint_id; end
  def endpoint_id=(_arg0); end
  def push_credential_sid; end
  def push_credential_sid=(_arg0); end
  def service_sid; end
  def service_sid=(_arg0); end

  class << self
    def _deprecated_new(*_arg0); end
    def new(*args, **_arg1, &block); end
  end
end

class Twilio::JWT::AccessToken::PlaybackGrant
  include ::Twilio::JWT::AccessTokenGrant

  def _generate_payload; end
  def _key; end
  def grant; end
  def grant=(_arg0); end
end

class Twilio::JWT::AccessToken::SyncGrant
  include ::Twilio::JWT::AccessTokenGrant

  def _generate_payload; end
  def _key; end
  def endpoint_id; end
  def endpoint_id=(_arg0); end
  def service_sid; end
  def service_sid=(_arg0); end
end

class Twilio::JWT::AccessToken::TaskRouterGrant
  include ::Twilio::JWT::AccessTokenGrant

  def _generate_payload; end
  def _key; end
  def role; end
  def role=(_arg0); end
  def worker_sid; end
  def worker_sid=(_arg0); end
  def workspace_sid; end
  def workspace_sid=(_arg0); end
end

class Twilio::JWT::AccessToken::VideoGrant
  include ::Twilio::JWT::AccessTokenGrant

  def _generate_payload; end
  def _key; end
  def room; end
  def room=(_arg0); end
end

class Twilio::JWT::AccessToken::VoiceGrant
  include ::Twilio::JWT::AccessTokenGrant

  def _generate_payload; end
  def _key; end
  def endpoint_id; end
  def endpoint_id=(_arg0); end
  def incoming_allow; end
  def incoming_allow=(_arg0); end
  def outgoing_application_params; end
  def outgoing_application_params=(_arg0); end
  def outgoing_application_sid; end
  def outgoing_application_sid=(_arg0); end
  def push_credential_sid; end
  def push_credential_sid=(_arg0); end
end

module Twilio::JWT::AccessTokenGrant
  def _generate_payload; end
  def _key; end
end

class Twilio::JWT::BaseJWT
  def initialize(secret_key: T.unsafe(nil), issuer: T.unsafe(nil), subject: T.unsafe(nil), nbf: T.unsafe(nil), ttl: T.unsafe(nil), valid_until: T.unsafe(nil)); end

  def _generate_headers; end
  def _generate_payload; end
  def headers; end
  def payload; end
  def to_jwt; end
  def to_s; end
end

class Twilio::JWT::ClientCapability < ::Twilio::JWT::BaseJWT
  def initialize(account_sid, auth_token, scopes: T.unsafe(nil), nbf: T.unsafe(nil), ttl: T.unsafe(nil), valid_until: T.unsafe(nil)); end

  def account_sid; end
  def account_sid=(_arg0); end
  def add_scope(scope); end
  def auth_token; end
  def auth_token=(_arg0); end
  def client_name; end
  def client_name=(_arg0); end
  def scopes; end
  def scopes=(_arg0); end

  protected

  def _generate_payload; end
end

class Twilio::JWT::ClientCapability::EventStreamScope
  include ::Twilio::JWT::Scope

  def initialize(filters = T.unsafe(nil)); end

  def _generate_payload; end
end

class Twilio::JWT::ClientCapability::IncomingClientScope
  include ::Twilio::JWT::Scope

  def initialize(client_name); end

  def _generate_payload; end
end

class Twilio::JWT::ClientCapability::OutgoingClientScope
  include ::Twilio::JWT::Scope

  def initialize(application_sid, client_name = T.unsafe(nil), params = T.unsafe(nil)); end

  def _generate_payload; end
end

module Twilio::JWT::Scope
  def _generate_payload; end
end

class Twilio::JWT::TaskRouterCapability < ::Twilio::JWT::BaseJWT
  def initialize(account_sid, auth_token, workspace_sid, channel_id, nbf: T.unsafe(nil), ttl: T.unsafe(nil), valid_until: T.unsafe(nil)); end

  def add_policy(policy); end

  protected

  def _generate_payload; end
end

class Twilio::JWT::TaskRouterCapability::Policy
  def initialize(url, method, allowed, post_filters = T.unsafe(nil), query_filters = T.unsafe(nil)); end

  def _generate_payload; end
  def allowed; end
  def allowed=(_arg0); end
  def method; end
  def method=(_arg0); end
  def post_filters; end
  def post_filters=(_arg0); end
  def query_filters; end
  def query_filters=(_arg0); end
  def url; end
  def url=(_arg0); end
end

Twilio::JWT::TaskRouterCapability::TASK_ROUTER_VERSION = T.let(T.unsafe(nil), String)

class Twilio::JWT::TaskRouterCapability::TaskRouterUtils
  class << self
    def activities(workspace_sid); end
    def activity(workspace_sid, activity_sid); end
    def all_activities(workspace_sid); end
    def all_reservations(workspace_sid, worker_sid); end
    def all_task_queues(workspace_sid); end
    def all_tasks(workspace_sid); end
    def all_workers(workspace_sid); end
    def all_workspaces; end
    def reservation(workspace_sid, worker_sid, reservation_sid); end
    def reservations(workspace_sid, worker_sid); end
    def task(workspace_sid, tasks_sid); end
    def task_queue(workspace_sid, taskqueue_sid); end
    def task_queues(workspace_sid); end
    def tasks(workspace_sid); end
    def web_socket_policies(account_sid, channel_sid); end
    def worker(workspace_sid, worker_sid); end
    def worker_policies(workspace_sid, worker_sid); end
    def workers(workspace_sid); end
    def workspace(workspace_sid); end
    def workspaces; end
  end
end

Twilio::JWT::TaskRouterCapability::TaskRouterUtils::TASK_ROUTER_BASE_URL = T.let(T.unsafe(nil), String)
Twilio::JWT::TaskRouterCapability::TaskRouterUtils::TASK_ROUTER_VERSION = T.let(T.unsafe(nil), String)
Twilio::JWT::TaskRouterCapability::TaskRouterUtils::TASK_ROUTER_WEBSOCKET_BASE_URL = T.let(T.unsafe(nil), String)

module Twilio::REST
  def url_join(left, right); end
end

class Twilio::REST::Accounts < ::Twilio::REST::Domain
  def initialize(twilio); end

  def auth_token_promotion; end
  def credentials; end
  def secondary_auth_token; end
  def to_s; end
  def v1; end
end

class Twilio::REST::Accounts::V1 < ::Twilio::REST::Version
  def initialize(domain); end

  def auth_token_promotion; end
  def credentials; end
  def secondary_auth_token; end
  def to_s; end
end

class Twilio::REST::Accounts::V1::AuthTokenPromotionContext < ::Twilio::REST::InstanceContext
  def initialize(version); end

  def inspect; end
  def to_s; end
  def update; end
end

class Twilio::REST::Accounts::V1::AuthTokenPromotionInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload); end

  def account_sid; end
  def auth_token; end
  def context; end
  def date_created; end
  def date_updated; end
  def inspect; end
  def to_s; end
  def update; end
  def url; end
end

class Twilio::REST::Accounts::V1::AuthTokenPromotionList < ::Twilio::REST::ListResource
  def initialize(version); end

  def to_s; end
end

class Twilio::REST::Accounts::V1::AuthTokenPromotionPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Accounts::V1::CredentialInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload); end

  def inspect; end
  def to_s; end
end

class Twilio::REST::Accounts::V1::CredentialList < ::Twilio::REST::ListResource
  def initialize(version); end

  def aws(sid = T.unsafe(nil)); end
  def public_key(sid = T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Accounts::V1::CredentialList::AwsContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil)); end
end

class Twilio::REST::Accounts::V1::CredentialList::AwsInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def sid; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Accounts::V1::CredentialList::AwsList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(credentials: T.unsafe(nil), friendly_name: T.unsafe(nil), account_sid: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Accounts::V1::CredentialList::AwsPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Accounts::V1::CredentialList::PublicKeyContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil)); end
end

class Twilio::REST::Accounts::V1::CredentialList::PublicKeyInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def sid; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Accounts::V1::CredentialList::PublicKeyList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(public_key: T.unsafe(nil), friendly_name: T.unsafe(nil), account_sid: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Accounts::V1::CredentialList::PublicKeyPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Accounts::V1::CredentialPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Accounts::V1::SecondaryAuthTokenContext < ::Twilio::REST::InstanceContext
  def initialize(version); end

  def create; end
  def delete; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Accounts::V1::SecondaryAuthTokenInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload); end

  def account_sid; end
  def context; end
  def create; end
  def date_created; end
  def date_updated; end
  def delete; end
  def inspect; end
  def secondary_auth_token; end
  def to_s; end
  def url; end
end

class Twilio::REST::Accounts::V1::SecondaryAuthTokenList < ::Twilio::REST::ListResource
  def initialize(version); end

  def to_s; end
end

class Twilio::REST::Accounts::V1::SecondaryAuthTokenPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api < ::Twilio::REST::Domain
  def initialize(twilio); end

  def account; end
  def accounts(sid = T.unsafe(nil)); end
  def addresses(sid = T.unsafe(nil)); end
  def applications(sid = T.unsafe(nil)); end
  def authorized_connect_apps(connect_app_sid = T.unsafe(nil)); end
  def available_phone_numbers(country_code = T.unsafe(nil)); end
  def balance; end
  def calls(sid = T.unsafe(nil)); end
  def conferences(sid = T.unsafe(nil)); end
  def connect_apps(sid = T.unsafe(nil)); end
  def incoming_phone_numbers(sid = T.unsafe(nil)); end
  def keys(sid = T.unsafe(nil)); end
  def messages(sid = T.unsafe(nil)); end
  def new_keys; end
  def new_signing_keys; end
  def notifications(sid = T.unsafe(nil)); end
  def outgoing_caller_ids(sid = T.unsafe(nil)); end
  def queues(sid = T.unsafe(nil)); end
  def recordings(sid = T.unsafe(nil)); end
  def short_codes(sid = T.unsafe(nil)); end
  def signing_keys(sid = T.unsafe(nil)); end
  def sip; end
  def to_s; end
  def tokens; end
  def transcriptions(sid = T.unsafe(nil)); end
  def usage; end
  def v2010; end
  def validation_requests; end
end

class Twilio::REST::Api::V2010 < ::Twilio::REST::Version
  def initialize(domain); end

  def account; end
  def account=(value); end
  def accounts(sid = T.unsafe(nil)); end
  def addresses(sid = T.unsafe(nil)); end
  def applications(sid = T.unsafe(nil)); end
  def authorized_connect_apps(connect_app_sid = T.unsafe(nil)); end
  def available_phone_numbers(country_code = T.unsafe(nil)); end
  def balance; end
  def calls(sid = T.unsafe(nil)); end
  def conferences(sid = T.unsafe(nil)); end
  def connect_apps(sid = T.unsafe(nil)); end
  def incoming_phone_numbers(sid = T.unsafe(nil)); end
  def keys(sid = T.unsafe(nil)); end
  def messages(sid = T.unsafe(nil)); end
  def new_keys; end
  def new_signing_keys; end
  def notifications(sid = T.unsafe(nil)); end
  def outgoing_caller_ids(sid = T.unsafe(nil)); end
  def queues(sid = T.unsafe(nil)); end
  def recordings(sid = T.unsafe(nil)); end
  def short_codes(sid = T.unsafe(nil)); end
  def signing_keys(sid = T.unsafe(nil)); end
  def sip; end
  def to_s; end
  def tokens; end
  def transcriptions(sid = T.unsafe(nil)); end
  def usage; end
  def validation_requests; end
end

class Twilio::REST::Api::V2010::AccountContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def addresses(sid = T.unsafe(nil)); end
  def applications(sid = T.unsafe(nil)); end
  def authorized_connect_apps(connect_app_sid = T.unsafe(nil)); end
  def available_phone_numbers(country_code = T.unsafe(nil)); end
  def balance; end
  def calls(sid = T.unsafe(nil)); end
  def conferences(sid = T.unsafe(nil)); end
  def connect_apps(sid = T.unsafe(nil)); end
  def fetch; end
  def incoming_phone_numbers(sid = T.unsafe(nil)); end
  def inspect; end
  def keys(sid = T.unsafe(nil)); end
  def messages(sid = T.unsafe(nil)); end
  def new_keys; end
  def new_signing_keys; end
  def notifications(sid = T.unsafe(nil)); end
  def outgoing_caller_ids(sid = T.unsafe(nil)); end
  def queues(sid = T.unsafe(nil)); end
  def recordings(sid = T.unsafe(nil)); end
  def short_codes(sid = T.unsafe(nil)); end
  def signing_keys(sid = T.unsafe(nil)); end
  def sip; end
  def to_s; end
  def tokens; end
  def transcriptions(sid = T.unsafe(nil)); end
  def update(friendly_name: T.unsafe(nil), status: T.unsafe(nil)); end
  def usage; end
  def validation_requests; end
end

class Twilio::REST::Api::V2010::AccountContext::AddressContext < ::Twilio::REST::InstanceContext
  def initialize(version, account_sid, sid); end

  def delete; end
  def dependent_phone_numbers; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), customer_name: T.unsafe(nil), street: T.unsafe(nil), city: T.unsafe(nil), region: T.unsafe(nil), postal_code: T.unsafe(nil), emergency_enabled: T.unsafe(nil), auto_correct_address: T.unsafe(nil)); end
end

class Twilio::REST::Api::V2010::AccountContext::AddressContext::DependentPhoneNumberInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), address_sid: T.unsafe(nil)); end

  def account_sid; end
  def address_requirements; end
  def api_version; end
  def capabilities; end
  def date_created; end
  def date_updated; end
  def emergency_address_sid; end
  def emergency_status; end
  def friendly_name; end
  def inspect; end
  def phone_number; end
  def sid; end
  def sms_application_sid; end
  def sms_fallback_method; end
  def sms_fallback_url; end
  def sms_method; end
  def sms_url; end
  def status_callback; end
  def status_callback_method; end
  def to_s; end
  def trunk_sid; end
  def uri; end
  def voice_application_sid; end
  def voice_caller_id_lookup; end
  def voice_fallback_method; end
  def voice_fallback_url; end
  def voice_method; end
  def voice_url; end
end

class Twilio::REST::Api::V2010::AccountContext::AddressContext::DependentPhoneNumberList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil), address_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::AddressContext::DependentPhoneNumberPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::AddressInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def city; end
  def context; end
  def customer_name; end
  def date_created; end
  def date_updated; end
  def delete; end
  def dependent_phone_numbers; end
  def emergency_enabled; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def iso_country; end
  def postal_code; end
  def region; end
  def sid; end
  def street; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), customer_name: T.unsafe(nil), street: T.unsafe(nil), city: T.unsafe(nil), region: T.unsafe(nil), postal_code: T.unsafe(nil), emergency_enabled: T.unsafe(nil), auto_correct_address: T.unsafe(nil)); end
  def uri; end
  def validated; end
  def verified; end
end

class Twilio::REST::Api::V2010::AccountContext::AddressList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil)); end

  def create(customer_name: T.unsafe(nil), street: T.unsafe(nil), city: T.unsafe(nil), region: T.unsafe(nil), postal_code: T.unsafe(nil), iso_country: T.unsafe(nil), friendly_name: T.unsafe(nil), emergency_enabled: T.unsafe(nil), auto_correct_address: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(customer_name: T.unsafe(nil), friendly_name: T.unsafe(nil), iso_country: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(customer_name: T.unsafe(nil), friendly_name: T.unsafe(nil), iso_country: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(customer_name: T.unsafe(nil), friendly_name: T.unsafe(nil), iso_country: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::AddressPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::ApplicationContext < ::Twilio::REST::InstanceContext
  def initialize(version, account_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), api_version: T.unsafe(nil), voice_url: T.unsafe(nil), voice_method: T.unsafe(nil), voice_fallback_url: T.unsafe(nil), voice_fallback_method: T.unsafe(nil), status_callback: T.unsafe(nil), status_callback_method: T.unsafe(nil), voice_caller_id_lookup: T.unsafe(nil), sms_url: T.unsafe(nil), sms_method: T.unsafe(nil), sms_fallback_url: T.unsafe(nil), sms_fallback_method: T.unsafe(nil), sms_status_callback: T.unsafe(nil), message_status_callback: T.unsafe(nil)); end
end

class Twilio::REST::Api::V2010::AccountContext::ApplicationInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def api_version; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def message_status_callback; end
  def sid; end
  def sms_fallback_method; end
  def sms_fallback_url; end
  def sms_method; end
  def sms_status_callback; end
  def sms_url; end
  def status_callback; end
  def status_callback_method; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), api_version: T.unsafe(nil), voice_url: T.unsafe(nil), voice_method: T.unsafe(nil), voice_fallback_url: T.unsafe(nil), voice_fallback_method: T.unsafe(nil), status_callback: T.unsafe(nil), status_callback_method: T.unsafe(nil), voice_caller_id_lookup: T.unsafe(nil), sms_url: T.unsafe(nil), sms_method: T.unsafe(nil), sms_fallback_url: T.unsafe(nil), sms_fallback_method: T.unsafe(nil), sms_status_callback: T.unsafe(nil), message_status_callback: T.unsafe(nil)); end
  def uri; end
  def voice_caller_id_lookup; end
  def voice_fallback_method; end
  def voice_fallback_url; end
  def voice_method; end
  def voice_url; end
end

class Twilio::REST::Api::V2010::AccountContext::ApplicationList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil)); end

  def create(api_version: T.unsafe(nil), voice_url: T.unsafe(nil), voice_method: T.unsafe(nil), voice_fallback_url: T.unsafe(nil), voice_fallback_method: T.unsafe(nil), status_callback: T.unsafe(nil), status_callback_method: T.unsafe(nil), voice_caller_id_lookup: T.unsafe(nil), sms_url: T.unsafe(nil), sms_method: T.unsafe(nil), sms_fallback_url: T.unsafe(nil), sms_fallback_method: T.unsafe(nil), sms_status_callback: T.unsafe(nil), message_status_callback: T.unsafe(nil), friendly_name: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(friendly_name: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(friendly_name: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(friendly_name: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::ApplicationPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::AuthorizedConnectAppContext < ::Twilio::REST::InstanceContext
  def initialize(version, account_sid, connect_app_sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::AuthorizedConnectAppInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), connect_app_sid: T.unsafe(nil)); end

  def account_sid; end
  def connect_app_company_name; end
  def connect_app_description; end
  def connect_app_friendly_name; end
  def connect_app_homepage_url; end
  def connect_app_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def fetch; end
  def inspect; end
  def permissions; end
  def to_s; end
  def uri; end
end

class Twilio::REST::Api::V2010::AccountContext::AuthorizedConnectAppList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::AuthorizedConnectAppPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryContext < ::Twilio::REST::InstanceContext
  def initialize(version, account_sid, country_code); end

  def fetch; end
  def inspect; end
  def local; end
  def machine_to_machine; end
  def mobile; end
  def national; end
  def shared_cost; end
  def to_s; end
  def toll_free; end
  def voip; end
end

class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryContext::LocalInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), country_code: T.unsafe(nil)); end

  def address_requirements; end
  def beta; end
  def capabilities; end
  def friendly_name; end
  def inspect; end
  def iso_country; end
  def lata; end
  def latitude; end
  def locality; end
  def longitude; end
  def phone_number; end
  def postal_code; end
  def rate_center; end
  def region; end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryContext::LocalList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil), country_code: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(area_code: T.unsafe(nil), contains: T.unsafe(nil), sms_enabled: T.unsafe(nil), mms_enabled: T.unsafe(nil), voice_enabled: T.unsafe(nil), exclude_all_address_required: T.unsafe(nil), exclude_local_address_required: T.unsafe(nil), exclude_foreign_address_required: T.unsafe(nil), beta: T.unsafe(nil), near_number: T.unsafe(nil), near_lat_long: T.unsafe(nil), distance: T.unsafe(nil), in_postal_code: T.unsafe(nil), in_region: T.unsafe(nil), in_rate_center: T.unsafe(nil), in_lata: T.unsafe(nil), in_locality: T.unsafe(nil), fax_enabled: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(area_code: T.unsafe(nil), contains: T.unsafe(nil), sms_enabled: T.unsafe(nil), mms_enabled: T.unsafe(nil), voice_enabled: T.unsafe(nil), exclude_all_address_required: T.unsafe(nil), exclude_local_address_required: T.unsafe(nil), exclude_foreign_address_required: T.unsafe(nil), beta: T.unsafe(nil), near_number: T.unsafe(nil), near_lat_long: T.unsafe(nil), distance: T.unsafe(nil), in_postal_code: T.unsafe(nil), in_region: T.unsafe(nil), in_rate_center: T.unsafe(nil), in_lata: T.unsafe(nil), in_locality: T.unsafe(nil), fax_enabled: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(area_code: T.unsafe(nil), contains: T.unsafe(nil), sms_enabled: T.unsafe(nil), mms_enabled: T.unsafe(nil), voice_enabled: T.unsafe(nil), exclude_all_address_required: T.unsafe(nil), exclude_local_address_required: T.unsafe(nil), exclude_foreign_address_required: T.unsafe(nil), beta: T.unsafe(nil), near_number: T.unsafe(nil), near_lat_long: T.unsafe(nil), distance: T.unsafe(nil), in_postal_code: T.unsafe(nil), in_region: T.unsafe(nil), in_rate_center: T.unsafe(nil), in_lata: T.unsafe(nil), in_locality: T.unsafe(nil), fax_enabled: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryContext::LocalPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryContext::MachineToMachineInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), country_code: T.unsafe(nil)); end

  def address_requirements; end
  def beta; end
  def capabilities; end
  def friendly_name; end
  def inspect; end
  def iso_country; end
  def lata; end
  def latitude; end
  def locality; end
  def longitude; end
  def phone_number; end
  def postal_code; end
  def rate_center; end
  def region; end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryContext::MachineToMachineList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil), country_code: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(area_code: T.unsafe(nil), contains: T.unsafe(nil), sms_enabled: T.unsafe(nil), mms_enabled: T.unsafe(nil), voice_enabled: T.unsafe(nil), exclude_all_address_required: T.unsafe(nil), exclude_local_address_required: T.unsafe(nil), exclude_foreign_address_required: T.unsafe(nil), beta: T.unsafe(nil), near_number: T.unsafe(nil), near_lat_long: T.unsafe(nil), distance: T.unsafe(nil), in_postal_code: T.unsafe(nil), in_region: T.unsafe(nil), in_rate_center: T.unsafe(nil), in_lata: T.unsafe(nil), in_locality: T.unsafe(nil), fax_enabled: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(area_code: T.unsafe(nil), contains: T.unsafe(nil), sms_enabled: T.unsafe(nil), mms_enabled: T.unsafe(nil), voice_enabled: T.unsafe(nil), exclude_all_address_required: T.unsafe(nil), exclude_local_address_required: T.unsafe(nil), exclude_foreign_address_required: T.unsafe(nil), beta: T.unsafe(nil), near_number: T.unsafe(nil), near_lat_long: T.unsafe(nil), distance: T.unsafe(nil), in_postal_code: T.unsafe(nil), in_region: T.unsafe(nil), in_rate_center: T.unsafe(nil), in_lata: T.unsafe(nil), in_locality: T.unsafe(nil), fax_enabled: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(area_code: T.unsafe(nil), contains: T.unsafe(nil), sms_enabled: T.unsafe(nil), mms_enabled: T.unsafe(nil), voice_enabled: T.unsafe(nil), exclude_all_address_required: T.unsafe(nil), exclude_local_address_required: T.unsafe(nil), exclude_foreign_address_required: T.unsafe(nil), beta: T.unsafe(nil), near_number: T.unsafe(nil), near_lat_long: T.unsafe(nil), distance: T.unsafe(nil), in_postal_code: T.unsafe(nil), in_region: T.unsafe(nil), in_rate_center: T.unsafe(nil), in_lata: T.unsafe(nil), in_locality: T.unsafe(nil), fax_enabled: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryContext::MachineToMachinePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryContext::MobileInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), country_code: T.unsafe(nil)); end

  def address_requirements; end
  def beta; end
  def capabilities; end
  def friendly_name; end
  def inspect; end
  def iso_country; end
  def lata; end
  def latitude; end
  def locality; end
  def longitude; end
  def phone_number; end
  def postal_code; end
  def rate_center; end
  def region; end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryContext::MobileList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil), country_code: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(area_code: T.unsafe(nil), contains: T.unsafe(nil), sms_enabled: T.unsafe(nil), mms_enabled: T.unsafe(nil), voice_enabled: T.unsafe(nil), exclude_all_address_required: T.unsafe(nil), exclude_local_address_required: T.unsafe(nil), exclude_foreign_address_required: T.unsafe(nil), beta: T.unsafe(nil), near_number: T.unsafe(nil), near_lat_long: T.unsafe(nil), distance: T.unsafe(nil), in_postal_code: T.unsafe(nil), in_region: T.unsafe(nil), in_rate_center: T.unsafe(nil), in_lata: T.unsafe(nil), in_locality: T.unsafe(nil), fax_enabled: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(area_code: T.unsafe(nil), contains: T.unsafe(nil), sms_enabled: T.unsafe(nil), mms_enabled: T.unsafe(nil), voice_enabled: T.unsafe(nil), exclude_all_address_required: T.unsafe(nil), exclude_local_address_required: T.unsafe(nil), exclude_foreign_address_required: T.unsafe(nil), beta: T.unsafe(nil), near_number: T.unsafe(nil), near_lat_long: T.unsafe(nil), distance: T.unsafe(nil), in_postal_code: T.unsafe(nil), in_region: T.unsafe(nil), in_rate_center: T.unsafe(nil), in_lata: T.unsafe(nil), in_locality: T.unsafe(nil), fax_enabled: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(area_code: T.unsafe(nil), contains: T.unsafe(nil), sms_enabled: T.unsafe(nil), mms_enabled: T.unsafe(nil), voice_enabled: T.unsafe(nil), exclude_all_address_required: T.unsafe(nil), exclude_local_address_required: T.unsafe(nil), exclude_foreign_address_required: T.unsafe(nil), beta: T.unsafe(nil), near_number: T.unsafe(nil), near_lat_long: T.unsafe(nil), distance: T.unsafe(nil), in_postal_code: T.unsafe(nil), in_region: T.unsafe(nil), in_rate_center: T.unsafe(nil), in_lata: T.unsafe(nil), in_locality: T.unsafe(nil), fax_enabled: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryContext::MobilePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryContext::NationalInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), country_code: T.unsafe(nil)); end

  def address_requirements; end
  def beta; end
  def capabilities; end
  def friendly_name; end
  def inspect; end
  def iso_country; end
  def lata; end
  def latitude; end
  def locality; end
  def longitude; end
  def phone_number; end
  def postal_code; end
  def rate_center; end
  def region; end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryContext::NationalList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil), country_code: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(area_code: T.unsafe(nil), contains: T.unsafe(nil), sms_enabled: T.unsafe(nil), mms_enabled: T.unsafe(nil), voice_enabled: T.unsafe(nil), exclude_all_address_required: T.unsafe(nil), exclude_local_address_required: T.unsafe(nil), exclude_foreign_address_required: T.unsafe(nil), beta: T.unsafe(nil), near_number: T.unsafe(nil), near_lat_long: T.unsafe(nil), distance: T.unsafe(nil), in_postal_code: T.unsafe(nil), in_region: T.unsafe(nil), in_rate_center: T.unsafe(nil), in_lata: T.unsafe(nil), in_locality: T.unsafe(nil), fax_enabled: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(area_code: T.unsafe(nil), contains: T.unsafe(nil), sms_enabled: T.unsafe(nil), mms_enabled: T.unsafe(nil), voice_enabled: T.unsafe(nil), exclude_all_address_required: T.unsafe(nil), exclude_local_address_required: T.unsafe(nil), exclude_foreign_address_required: T.unsafe(nil), beta: T.unsafe(nil), near_number: T.unsafe(nil), near_lat_long: T.unsafe(nil), distance: T.unsafe(nil), in_postal_code: T.unsafe(nil), in_region: T.unsafe(nil), in_rate_center: T.unsafe(nil), in_lata: T.unsafe(nil), in_locality: T.unsafe(nil), fax_enabled: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(area_code: T.unsafe(nil), contains: T.unsafe(nil), sms_enabled: T.unsafe(nil), mms_enabled: T.unsafe(nil), voice_enabled: T.unsafe(nil), exclude_all_address_required: T.unsafe(nil), exclude_local_address_required: T.unsafe(nil), exclude_foreign_address_required: T.unsafe(nil), beta: T.unsafe(nil), near_number: T.unsafe(nil), near_lat_long: T.unsafe(nil), distance: T.unsafe(nil), in_postal_code: T.unsafe(nil), in_region: T.unsafe(nil), in_rate_center: T.unsafe(nil), in_lata: T.unsafe(nil), in_locality: T.unsafe(nil), fax_enabled: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryContext::NationalPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryContext::SharedCostInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), country_code: T.unsafe(nil)); end

  def address_requirements; end
  def beta; end
  def capabilities; end
  def friendly_name; end
  def inspect; end
  def iso_country; end
  def lata; end
  def latitude; end
  def locality; end
  def longitude; end
  def phone_number; end
  def postal_code; end
  def rate_center; end
  def region; end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryContext::SharedCostList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil), country_code: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(area_code: T.unsafe(nil), contains: T.unsafe(nil), sms_enabled: T.unsafe(nil), mms_enabled: T.unsafe(nil), voice_enabled: T.unsafe(nil), exclude_all_address_required: T.unsafe(nil), exclude_local_address_required: T.unsafe(nil), exclude_foreign_address_required: T.unsafe(nil), beta: T.unsafe(nil), near_number: T.unsafe(nil), near_lat_long: T.unsafe(nil), distance: T.unsafe(nil), in_postal_code: T.unsafe(nil), in_region: T.unsafe(nil), in_rate_center: T.unsafe(nil), in_lata: T.unsafe(nil), in_locality: T.unsafe(nil), fax_enabled: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(area_code: T.unsafe(nil), contains: T.unsafe(nil), sms_enabled: T.unsafe(nil), mms_enabled: T.unsafe(nil), voice_enabled: T.unsafe(nil), exclude_all_address_required: T.unsafe(nil), exclude_local_address_required: T.unsafe(nil), exclude_foreign_address_required: T.unsafe(nil), beta: T.unsafe(nil), near_number: T.unsafe(nil), near_lat_long: T.unsafe(nil), distance: T.unsafe(nil), in_postal_code: T.unsafe(nil), in_region: T.unsafe(nil), in_rate_center: T.unsafe(nil), in_lata: T.unsafe(nil), in_locality: T.unsafe(nil), fax_enabled: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(area_code: T.unsafe(nil), contains: T.unsafe(nil), sms_enabled: T.unsafe(nil), mms_enabled: T.unsafe(nil), voice_enabled: T.unsafe(nil), exclude_all_address_required: T.unsafe(nil), exclude_local_address_required: T.unsafe(nil), exclude_foreign_address_required: T.unsafe(nil), beta: T.unsafe(nil), near_number: T.unsafe(nil), near_lat_long: T.unsafe(nil), distance: T.unsafe(nil), in_postal_code: T.unsafe(nil), in_region: T.unsafe(nil), in_rate_center: T.unsafe(nil), in_lata: T.unsafe(nil), in_locality: T.unsafe(nil), fax_enabled: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryContext::SharedCostPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryContext::TollFreeInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), country_code: T.unsafe(nil)); end

  def address_requirements; end
  def beta; end
  def capabilities; end
  def friendly_name; end
  def inspect; end
  def iso_country; end
  def lata; end
  def latitude; end
  def locality; end
  def longitude; end
  def phone_number; end
  def postal_code; end
  def rate_center; end
  def region; end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryContext::TollFreeList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil), country_code: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(area_code: T.unsafe(nil), contains: T.unsafe(nil), sms_enabled: T.unsafe(nil), mms_enabled: T.unsafe(nil), voice_enabled: T.unsafe(nil), exclude_all_address_required: T.unsafe(nil), exclude_local_address_required: T.unsafe(nil), exclude_foreign_address_required: T.unsafe(nil), beta: T.unsafe(nil), near_number: T.unsafe(nil), near_lat_long: T.unsafe(nil), distance: T.unsafe(nil), in_postal_code: T.unsafe(nil), in_region: T.unsafe(nil), in_rate_center: T.unsafe(nil), in_lata: T.unsafe(nil), in_locality: T.unsafe(nil), fax_enabled: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(area_code: T.unsafe(nil), contains: T.unsafe(nil), sms_enabled: T.unsafe(nil), mms_enabled: T.unsafe(nil), voice_enabled: T.unsafe(nil), exclude_all_address_required: T.unsafe(nil), exclude_local_address_required: T.unsafe(nil), exclude_foreign_address_required: T.unsafe(nil), beta: T.unsafe(nil), near_number: T.unsafe(nil), near_lat_long: T.unsafe(nil), distance: T.unsafe(nil), in_postal_code: T.unsafe(nil), in_region: T.unsafe(nil), in_rate_center: T.unsafe(nil), in_lata: T.unsafe(nil), in_locality: T.unsafe(nil), fax_enabled: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(area_code: T.unsafe(nil), contains: T.unsafe(nil), sms_enabled: T.unsafe(nil), mms_enabled: T.unsafe(nil), voice_enabled: T.unsafe(nil), exclude_all_address_required: T.unsafe(nil), exclude_local_address_required: T.unsafe(nil), exclude_foreign_address_required: T.unsafe(nil), beta: T.unsafe(nil), near_number: T.unsafe(nil), near_lat_long: T.unsafe(nil), distance: T.unsafe(nil), in_postal_code: T.unsafe(nil), in_region: T.unsafe(nil), in_rate_center: T.unsafe(nil), in_lata: T.unsafe(nil), in_locality: T.unsafe(nil), fax_enabled: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryContext::TollFreePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryContext::VoipInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), country_code: T.unsafe(nil)); end

  def address_requirements; end
  def beta; end
  def capabilities; end
  def friendly_name; end
  def inspect; end
  def iso_country; end
  def lata; end
  def latitude; end
  def locality; end
  def longitude; end
  def phone_number; end
  def postal_code; end
  def rate_center; end
  def region; end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryContext::VoipList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil), country_code: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(area_code: T.unsafe(nil), contains: T.unsafe(nil), sms_enabled: T.unsafe(nil), mms_enabled: T.unsafe(nil), voice_enabled: T.unsafe(nil), exclude_all_address_required: T.unsafe(nil), exclude_local_address_required: T.unsafe(nil), exclude_foreign_address_required: T.unsafe(nil), beta: T.unsafe(nil), near_number: T.unsafe(nil), near_lat_long: T.unsafe(nil), distance: T.unsafe(nil), in_postal_code: T.unsafe(nil), in_region: T.unsafe(nil), in_rate_center: T.unsafe(nil), in_lata: T.unsafe(nil), in_locality: T.unsafe(nil), fax_enabled: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(area_code: T.unsafe(nil), contains: T.unsafe(nil), sms_enabled: T.unsafe(nil), mms_enabled: T.unsafe(nil), voice_enabled: T.unsafe(nil), exclude_all_address_required: T.unsafe(nil), exclude_local_address_required: T.unsafe(nil), exclude_foreign_address_required: T.unsafe(nil), beta: T.unsafe(nil), near_number: T.unsafe(nil), near_lat_long: T.unsafe(nil), distance: T.unsafe(nil), in_postal_code: T.unsafe(nil), in_region: T.unsafe(nil), in_rate_center: T.unsafe(nil), in_lata: T.unsafe(nil), in_locality: T.unsafe(nil), fax_enabled: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(area_code: T.unsafe(nil), contains: T.unsafe(nil), sms_enabled: T.unsafe(nil), mms_enabled: T.unsafe(nil), voice_enabled: T.unsafe(nil), exclude_all_address_required: T.unsafe(nil), exclude_local_address_required: T.unsafe(nil), exclude_foreign_address_required: T.unsafe(nil), beta: T.unsafe(nil), near_number: T.unsafe(nil), near_lat_long: T.unsafe(nil), distance: T.unsafe(nil), in_postal_code: T.unsafe(nil), in_region: T.unsafe(nil), in_rate_center: T.unsafe(nil), in_lata: T.unsafe(nil), in_locality: T.unsafe(nil), fax_enabled: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryContext::VoipPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), country_code: T.unsafe(nil)); end

  def beta; end
  def context; end
  def country; end
  def country_code; end
  def fetch; end
  def inspect; end
  def local; end
  def machine_to_machine; end
  def mobile; end
  def national; end
  def shared_cost; end
  def subresource_uris; end
  def to_s; end
  def toll_free; end
  def uri; end
  def voip; end
end

class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::BalanceInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil)); end

  def account_sid; end
  def balance; end
  def currency; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::BalanceList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil)); end

  def fetch; end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::BalancePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::CallContext < ::Twilio::REST::InstanceContext
  def initialize(version, account_sid, sid); end

  def delete; end
  def events; end
  def feedback; end
  def fetch; end
  def inspect; end
  def notifications(sid = T.unsafe(nil)); end
  def payments(sid = T.unsafe(nil)); end
  def recordings(sid = T.unsafe(nil)); end
  def siprec(sid = T.unsafe(nil)); end
  def streams(sid = T.unsafe(nil)); end
  def to_s; end
  def update(url: T.unsafe(nil), method: T.unsafe(nil), status: T.unsafe(nil), fallback_url: T.unsafe(nil), fallback_method: T.unsafe(nil), status_callback: T.unsafe(nil), status_callback_method: T.unsafe(nil), twiml: T.unsafe(nil), time_limit: T.unsafe(nil)); end
  def user_defined_message_subscriptions(sid = T.unsafe(nil)); end
  def user_defined_messages; end
end

class Twilio::REST::Api::V2010::AccountContext::CallContext::EventInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), call_sid: T.unsafe(nil)); end

  def inspect; end
  def request; end
  def response; end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::CallContext::EventList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil), call_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::CallContext::EventPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::CallContext::FeedbackContext < ::Twilio::REST::InstanceContext
  def initialize(version, account_sid, call_sid); end

  def create(quality_score: T.unsafe(nil), issue: T.unsafe(nil)); end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(quality_score: T.unsafe(nil), issue: T.unsafe(nil)); end
end

class Twilio::REST::Api::V2010::AccountContext::CallContext::FeedbackInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), call_sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def create(quality_score: T.unsafe(nil), issue: T.unsafe(nil)); end
  def date_created; end
  def date_updated; end
  def fetch; end
  def inspect; end
  def issues; end
  def quality_score; end
  def sid; end
  def to_s; end
  def update(quality_score: T.unsafe(nil), issue: T.unsafe(nil)); end
end

class Twilio::REST::Api::V2010::AccountContext::CallContext::FeedbackList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil), call_sid: T.unsafe(nil)); end

  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::CallContext::FeedbackPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::CallContext::NotificationContext < ::Twilio::REST::InstanceContext
  def initialize(version, account_sid, call_sid, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::CallContext::NotificationInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), call_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def api_version; end
  def call_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def error_code; end
  def fetch; end
  def inspect; end
  def log; end
  def message_date; end
  def message_text; end
  def more_info; end
  def request_method; end
  def request_url; end
  def request_variables; end
  def response_body; end
  def response_headers; end
  def sid; end
  def to_s; end
  def uri; end
end

class Twilio::REST::Api::V2010::AccountContext::CallContext::NotificationList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil), call_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(log: T.unsafe(nil), message_date_before: T.unsafe(nil), message_date: T.unsafe(nil), message_date_after: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(log: T.unsafe(nil), message_date_before: T.unsafe(nil), message_date: T.unsafe(nil), message_date_after: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(log: T.unsafe(nil), message_date_before: T.unsafe(nil), message_date: T.unsafe(nil), message_date_after: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::CallContext::NotificationPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::CallContext::PaymentContext < ::Twilio::REST::InstanceContext
  def initialize(version, account_sid, call_sid, sid); end

  def inspect; end
  def to_s; end
  def update(idempotency_key: T.unsafe(nil), status_callback: T.unsafe(nil), capture: T.unsafe(nil), status: T.unsafe(nil)); end
end

class Twilio::REST::Api::V2010::AccountContext::CallContext::PaymentInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), call_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def call_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def inspect; end
  def sid; end
  def to_s; end
  def update(idempotency_key: T.unsafe(nil), status_callback: T.unsafe(nil), capture: T.unsafe(nil), status: T.unsafe(nil)); end
  def uri; end
end

class Twilio::REST::Api::V2010::AccountContext::CallContext::PaymentList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil), call_sid: T.unsafe(nil)); end

  def create(idempotency_key: T.unsafe(nil), status_callback: T.unsafe(nil), bank_account_type: T.unsafe(nil), charge_amount: T.unsafe(nil), currency: T.unsafe(nil), description: T.unsafe(nil), input: T.unsafe(nil), min_postal_code_length: T.unsafe(nil), parameter: T.unsafe(nil), payment_connector: T.unsafe(nil), payment_method: T.unsafe(nil), postal_code: T.unsafe(nil), security_code: T.unsafe(nil), timeout: T.unsafe(nil), token_type: T.unsafe(nil), valid_card_types: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::CallContext::PaymentPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::CallContext::RecordingContext < ::Twilio::REST::InstanceContext
  def initialize(version, account_sid, call_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(status: T.unsafe(nil), pause_behavior: T.unsafe(nil)); end
end

class Twilio::REST::Api::V2010::AccountContext::CallContext::RecordingInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), call_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def api_version; end
  def call_sid; end
  def channels; end
  def conference_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def duration; end
  def encryption_details; end
  def error_code; end
  def fetch; end
  def inspect; end
  def price; end
  def price_unit; end
  def sid; end
  def source; end
  def start_time; end
  def status; end
  def to_s; end
  def track; end
  def update(status: T.unsafe(nil), pause_behavior: T.unsafe(nil)); end
  def uri; end
end

class Twilio::REST::Api::V2010::AccountContext::CallContext::RecordingList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil), call_sid: T.unsafe(nil)); end

  def create(recording_status_callback_event: T.unsafe(nil), recording_status_callback: T.unsafe(nil), recording_status_callback_method: T.unsafe(nil), trim: T.unsafe(nil), recording_channels: T.unsafe(nil), recording_track: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(date_created_before: T.unsafe(nil), date_created: T.unsafe(nil), date_created_after: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(date_created_before: T.unsafe(nil), date_created: T.unsafe(nil), date_created_after: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(date_created_before: T.unsafe(nil), date_created: T.unsafe(nil), date_created_after: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::CallContext::RecordingPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::CallContext::SiprecContext < ::Twilio::REST::InstanceContext
  def initialize(version, account_sid, call_sid, sid); end

  def inspect; end
  def to_s; end
  def update(status: T.unsafe(nil)); end
end

class Twilio::REST::Api::V2010::AccountContext::CallContext::SiprecInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), call_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def call_sid; end
  def context; end
  def date_updated; end
  def inspect; end
  def name; end
  def sid; end
  def status; end
  def to_s; end
  def update(status: T.unsafe(nil)); end
  def uri; end
end

class Twilio::REST::Api::V2010::AccountContext::CallContext::SiprecList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil), call_sid: T.unsafe(nil)); end

  def create(name: T.unsafe(nil), connector_name: T.unsafe(nil), track: T.unsafe(nil), status_callback: T.unsafe(nil), status_callback_method: T.unsafe(nil), parameter1_name: T.unsafe(nil), parameter1_value: T.unsafe(nil), parameter2_name: T.unsafe(nil), parameter2_value: T.unsafe(nil), parameter3_name: T.unsafe(nil), parameter3_value: T.unsafe(nil), parameter4_name: T.unsafe(nil), parameter4_value: T.unsafe(nil), parameter5_name: T.unsafe(nil), parameter5_value: T.unsafe(nil), parameter6_name: T.unsafe(nil), parameter6_value: T.unsafe(nil), parameter7_name: T.unsafe(nil), parameter7_value: T.unsafe(nil), parameter8_name: T.unsafe(nil), parameter8_value: T.unsafe(nil), parameter9_name: T.unsafe(nil), parameter9_value: T.unsafe(nil), parameter10_name: T.unsafe(nil), parameter10_value: T.unsafe(nil), parameter11_name: T.unsafe(nil), parameter11_value: T.unsafe(nil), parameter12_name: T.unsafe(nil), parameter12_value: T.unsafe(nil), parameter13_name: T.unsafe(nil), parameter13_value: T.unsafe(nil), parameter14_name: T.unsafe(nil), parameter14_value: T.unsafe(nil), parameter15_name: T.unsafe(nil), parameter15_value: T.unsafe(nil), parameter16_name: T.unsafe(nil), parameter16_value: T.unsafe(nil), parameter17_name: T.unsafe(nil), parameter17_value: T.unsafe(nil), parameter18_name: T.unsafe(nil), parameter18_value: T.unsafe(nil), parameter19_name: T.unsafe(nil), parameter19_value: T.unsafe(nil), parameter20_name: T.unsafe(nil), parameter20_value: T.unsafe(nil), parameter21_name: T.unsafe(nil), parameter21_value: T.unsafe(nil), parameter22_name: T.unsafe(nil), parameter22_value: T.unsafe(nil), parameter23_name: T.unsafe(nil), parameter23_value: T.unsafe(nil), parameter24_name: T.unsafe(nil), parameter24_value: T.unsafe(nil), parameter25_name: T.unsafe(nil), parameter25_value: T.unsafe(nil), parameter26_name: T.unsafe(nil), parameter26_value: T.unsafe(nil), parameter27_name: T.unsafe(nil), parameter27_value: T.unsafe(nil), parameter28_name: T.unsafe(nil), parameter28_value: T.unsafe(nil), parameter29_name: T.unsafe(nil), parameter29_value: T.unsafe(nil), parameter30_name: T.unsafe(nil), parameter30_value: T.unsafe(nil), parameter31_name: T.unsafe(nil), parameter31_value: T.unsafe(nil), parameter32_name: T.unsafe(nil), parameter32_value: T.unsafe(nil), parameter33_name: T.unsafe(nil), parameter33_value: T.unsafe(nil), parameter34_name: T.unsafe(nil), parameter34_value: T.unsafe(nil), parameter35_name: T.unsafe(nil), parameter35_value: T.unsafe(nil), parameter36_name: T.unsafe(nil), parameter36_value: T.unsafe(nil), parameter37_name: T.unsafe(nil), parameter37_value: T.unsafe(nil), parameter38_name: T.unsafe(nil), parameter38_value: T.unsafe(nil), parameter39_name: T.unsafe(nil), parameter39_value: T.unsafe(nil), parameter40_name: T.unsafe(nil), parameter40_value: T.unsafe(nil), parameter41_name: T.unsafe(nil), parameter41_value: T.unsafe(nil), parameter42_name: T.unsafe(nil), parameter42_value: T.unsafe(nil), parameter43_name: T.unsafe(nil), parameter43_value: T.unsafe(nil), parameter44_name: T.unsafe(nil), parameter44_value: T.unsafe(nil), parameter45_name: T.unsafe(nil), parameter45_value: T.unsafe(nil), parameter46_name: T.unsafe(nil), parameter46_value: T.unsafe(nil), parameter47_name: T.unsafe(nil), parameter47_value: T.unsafe(nil), parameter48_name: T.unsafe(nil), parameter48_value: T.unsafe(nil), parameter49_name: T.unsafe(nil), parameter49_value: T.unsafe(nil), parameter50_name: T.unsafe(nil), parameter50_value: T.unsafe(nil), parameter51_name: T.unsafe(nil), parameter51_value: T.unsafe(nil), parameter52_name: T.unsafe(nil), parameter52_value: T.unsafe(nil), parameter53_name: T.unsafe(nil), parameter53_value: T.unsafe(nil), parameter54_name: T.unsafe(nil), parameter54_value: T.unsafe(nil), parameter55_name: T.unsafe(nil), parameter55_value: T.unsafe(nil), parameter56_name: T.unsafe(nil), parameter56_value: T.unsafe(nil), parameter57_name: T.unsafe(nil), parameter57_value: T.unsafe(nil), parameter58_name: T.unsafe(nil), parameter58_value: T.unsafe(nil), parameter59_name: T.unsafe(nil), parameter59_value: T.unsafe(nil), parameter60_name: T.unsafe(nil), parameter60_value: T.unsafe(nil), parameter61_name: T.unsafe(nil), parameter61_value: T.unsafe(nil), parameter62_name: T.unsafe(nil), parameter62_value: T.unsafe(nil), parameter63_name: T.unsafe(nil), parameter63_value: T.unsafe(nil), parameter64_name: T.unsafe(nil), parameter64_value: T.unsafe(nil), parameter65_name: T.unsafe(nil), parameter65_value: T.unsafe(nil), parameter66_name: T.unsafe(nil), parameter66_value: T.unsafe(nil), parameter67_name: T.unsafe(nil), parameter67_value: T.unsafe(nil), parameter68_name: T.unsafe(nil), parameter68_value: T.unsafe(nil), parameter69_name: T.unsafe(nil), parameter69_value: T.unsafe(nil), parameter70_name: T.unsafe(nil), parameter70_value: T.unsafe(nil), parameter71_name: T.unsafe(nil), parameter71_value: T.unsafe(nil), parameter72_name: T.unsafe(nil), parameter72_value: T.unsafe(nil), parameter73_name: T.unsafe(nil), parameter73_value: T.unsafe(nil), parameter74_name: T.unsafe(nil), parameter74_value: T.unsafe(nil), parameter75_name: T.unsafe(nil), parameter75_value: T.unsafe(nil), parameter76_name: T.unsafe(nil), parameter76_value: T.unsafe(nil), parameter77_name: T.unsafe(nil), parameter77_value: T.unsafe(nil), parameter78_name: T.unsafe(nil), parameter78_value: T.unsafe(nil), parameter79_name: T.unsafe(nil), parameter79_value: T.unsafe(nil), parameter80_name: T.unsafe(nil), parameter80_value: T.unsafe(nil), parameter81_name: T.unsafe(nil), parameter81_value: T.unsafe(nil), parameter82_name: T.unsafe(nil), parameter82_value: T.unsafe(nil), parameter83_name: T.unsafe(nil), parameter83_value: T.unsafe(nil), parameter84_name: T.unsafe(nil), parameter84_value: T.unsafe(nil), parameter85_name: T.unsafe(nil), parameter85_value: T.unsafe(nil), parameter86_name: T.unsafe(nil), parameter86_value: T.unsafe(nil), parameter87_name: T.unsafe(nil), parameter87_value: T.unsafe(nil), parameter88_name: T.unsafe(nil), parameter88_value: T.unsafe(nil), parameter89_name: T.unsafe(nil), parameter89_value: T.unsafe(nil), parameter90_name: T.unsafe(nil), parameter90_value: T.unsafe(nil), parameter91_name: T.unsafe(nil), parameter91_value: T.unsafe(nil), parameter92_name: T.unsafe(nil), parameter92_value: T.unsafe(nil), parameter93_name: T.unsafe(nil), parameter93_value: T.unsafe(nil), parameter94_name: T.unsafe(nil), parameter94_value: T.unsafe(nil), parameter95_name: T.unsafe(nil), parameter95_value: T.unsafe(nil), parameter96_name: T.unsafe(nil), parameter96_value: T.unsafe(nil), parameter97_name: T.unsafe(nil), parameter97_value: T.unsafe(nil), parameter98_name: T.unsafe(nil), parameter98_value: T.unsafe(nil), parameter99_name: T.unsafe(nil), parameter99_value: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::CallContext::SiprecPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::CallContext::StreamContext < ::Twilio::REST::InstanceContext
  def initialize(version, account_sid, call_sid, sid); end

  def inspect; end
  def to_s; end
  def update(status: T.unsafe(nil)); end
end

class Twilio::REST::Api::V2010::AccountContext::CallContext::StreamInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), call_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def call_sid; end
  def context; end
  def date_updated; end
  def inspect; end
  def name; end
  def sid; end
  def status; end
  def to_s; end
  def update(status: T.unsafe(nil)); end
  def uri; end
end

class Twilio::REST::Api::V2010::AccountContext::CallContext::StreamList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil), call_sid: T.unsafe(nil)); end

  def create(url: T.unsafe(nil), name: T.unsafe(nil), track: T.unsafe(nil), status_callback: T.unsafe(nil), status_callback_method: T.unsafe(nil), parameter1_name: T.unsafe(nil), parameter1_value: T.unsafe(nil), parameter2_name: T.unsafe(nil), parameter2_value: T.unsafe(nil), parameter3_name: T.unsafe(nil), parameter3_value: T.unsafe(nil), parameter4_name: T.unsafe(nil), parameter4_value: T.unsafe(nil), parameter5_name: T.unsafe(nil), parameter5_value: T.unsafe(nil), parameter6_name: T.unsafe(nil), parameter6_value: T.unsafe(nil), parameter7_name: T.unsafe(nil), parameter7_value: T.unsafe(nil), parameter8_name: T.unsafe(nil), parameter8_value: T.unsafe(nil), parameter9_name: T.unsafe(nil), parameter9_value: T.unsafe(nil), parameter10_name: T.unsafe(nil), parameter10_value: T.unsafe(nil), parameter11_name: T.unsafe(nil), parameter11_value: T.unsafe(nil), parameter12_name: T.unsafe(nil), parameter12_value: T.unsafe(nil), parameter13_name: T.unsafe(nil), parameter13_value: T.unsafe(nil), parameter14_name: T.unsafe(nil), parameter14_value: T.unsafe(nil), parameter15_name: T.unsafe(nil), parameter15_value: T.unsafe(nil), parameter16_name: T.unsafe(nil), parameter16_value: T.unsafe(nil), parameter17_name: T.unsafe(nil), parameter17_value: T.unsafe(nil), parameter18_name: T.unsafe(nil), parameter18_value: T.unsafe(nil), parameter19_name: T.unsafe(nil), parameter19_value: T.unsafe(nil), parameter20_name: T.unsafe(nil), parameter20_value: T.unsafe(nil), parameter21_name: T.unsafe(nil), parameter21_value: T.unsafe(nil), parameter22_name: T.unsafe(nil), parameter22_value: T.unsafe(nil), parameter23_name: T.unsafe(nil), parameter23_value: T.unsafe(nil), parameter24_name: T.unsafe(nil), parameter24_value: T.unsafe(nil), parameter25_name: T.unsafe(nil), parameter25_value: T.unsafe(nil), parameter26_name: T.unsafe(nil), parameter26_value: T.unsafe(nil), parameter27_name: T.unsafe(nil), parameter27_value: T.unsafe(nil), parameter28_name: T.unsafe(nil), parameter28_value: T.unsafe(nil), parameter29_name: T.unsafe(nil), parameter29_value: T.unsafe(nil), parameter30_name: T.unsafe(nil), parameter30_value: T.unsafe(nil), parameter31_name: T.unsafe(nil), parameter31_value: T.unsafe(nil), parameter32_name: T.unsafe(nil), parameter32_value: T.unsafe(nil), parameter33_name: T.unsafe(nil), parameter33_value: T.unsafe(nil), parameter34_name: T.unsafe(nil), parameter34_value: T.unsafe(nil), parameter35_name: T.unsafe(nil), parameter35_value: T.unsafe(nil), parameter36_name: T.unsafe(nil), parameter36_value: T.unsafe(nil), parameter37_name: T.unsafe(nil), parameter37_value: T.unsafe(nil), parameter38_name: T.unsafe(nil), parameter38_value: T.unsafe(nil), parameter39_name: T.unsafe(nil), parameter39_value: T.unsafe(nil), parameter40_name: T.unsafe(nil), parameter40_value: T.unsafe(nil), parameter41_name: T.unsafe(nil), parameter41_value: T.unsafe(nil), parameter42_name: T.unsafe(nil), parameter42_value: T.unsafe(nil), parameter43_name: T.unsafe(nil), parameter43_value: T.unsafe(nil), parameter44_name: T.unsafe(nil), parameter44_value: T.unsafe(nil), parameter45_name: T.unsafe(nil), parameter45_value: T.unsafe(nil), parameter46_name: T.unsafe(nil), parameter46_value: T.unsafe(nil), parameter47_name: T.unsafe(nil), parameter47_value: T.unsafe(nil), parameter48_name: T.unsafe(nil), parameter48_value: T.unsafe(nil), parameter49_name: T.unsafe(nil), parameter49_value: T.unsafe(nil), parameter50_name: T.unsafe(nil), parameter50_value: T.unsafe(nil), parameter51_name: T.unsafe(nil), parameter51_value: T.unsafe(nil), parameter52_name: T.unsafe(nil), parameter52_value: T.unsafe(nil), parameter53_name: T.unsafe(nil), parameter53_value: T.unsafe(nil), parameter54_name: T.unsafe(nil), parameter54_value: T.unsafe(nil), parameter55_name: T.unsafe(nil), parameter55_value: T.unsafe(nil), parameter56_name: T.unsafe(nil), parameter56_value: T.unsafe(nil), parameter57_name: T.unsafe(nil), parameter57_value: T.unsafe(nil), parameter58_name: T.unsafe(nil), parameter58_value: T.unsafe(nil), parameter59_name: T.unsafe(nil), parameter59_value: T.unsafe(nil), parameter60_name: T.unsafe(nil), parameter60_value: T.unsafe(nil), parameter61_name: T.unsafe(nil), parameter61_value: T.unsafe(nil), parameter62_name: T.unsafe(nil), parameter62_value: T.unsafe(nil), parameter63_name: T.unsafe(nil), parameter63_value: T.unsafe(nil), parameter64_name: T.unsafe(nil), parameter64_value: T.unsafe(nil), parameter65_name: T.unsafe(nil), parameter65_value: T.unsafe(nil), parameter66_name: T.unsafe(nil), parameter66_value: T.unsafe(nil), parameter67_name: T.unsafe(nil), parameter67_value: T.unsafe(nil), parameter68_name: T.unsafe(nil), parameter68_value: T.unsafe(nil), parameter69_name: T.unsafe(nil), parameter69_value: T.unsafe(nil), parameter70_name: T.unsafe(nil), parameter70_value: T.unsafe(nil), parameter71_name: T.unsafe(nil), parameter71_value: T.unsafe(nil), parameter72_name: T.unsafe(nil), parameter72_value: T.unsafe(nil), parameter73_name: T.unsafe(nil), parameter73_value: T.unsafe(nil), parameter74_name: T.unsafe(nil), parameter74_value: T.unsafe(nil), parameter75_name: T.unsafe(nil), parameter75_value: T.unsafe(nil), parameter76_name: T.unsafe(nil), parameter76_value: T.unsafe(nil), parameter77_name: T.unsafe(nil), parameter77_value: T.unsafe(nil), parameter78_name: T.unsafe(nil), parameter78_value: T.unsafe(nil), parameter79_name: T.unsafe(nil), parameter79_value: T.unsafe(nil), parameter80_name: T.unsafe(nil), parameter80_value: T.unsafe(nil), parameter81_name: T.unsafe(nil), parameter81_value: T.unsafe(nil), parameter82_name: T.unsafe(nil), parameter82_value: T.unsafe(nil), parameter83_name: T.unsafe(nil), parameter83_value: T.unsafe(nil), parameter84_name: T.unsafe(nil), parameter84_value: T.unsafe(nil), parameter85_name: T.unsafe(nil), parameter85_value: T.unsafe(nil), parameter86_name: T.unsafe(nil), parameter86_value: T.unsafe(nil), parameter87_name: T.unsafe(nil), parameter87_value: T.unsafe(nil), parameter88_name: T.unsafe(nil), parameter88_value: T.unsafe(nil), parameter89_name: T.unsafe(nil), parameter89_value: T.unsafe(nil), parameter90_name: T.unsafe(nil), parameter90_value: T.unsafe(nil), parameter91_name: T.unsafe(nil), parameter91_value: T.unsafe(nil), parameter92_name: T.unsafe(nil), parameter92_value: T.unsafe(nil), parameter93_name: T.unsafe(nil), parameter93_value: T.unsafe(nil), parameter94_name: T.unsafe(nil), parameter94_value: T.unsafe(nil), parameter95_name: T.unsafe(nil), parameter95_value: T.unsafe(nil), parameter96_name: T.unsafe(nil), parameter96_value: T.unsafe(nil), parameter97_name: T.unsafe(nil), parameter97_value: T.unsafe(nil), parameter98_name: T.unsafe(nil), parameter98_value: T.unsafe(nil), parameter99_name: T.unsafe(nil), parameter99_value: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::CallContext::StreamPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::CallContext::UserDefinedMessageInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), call_sid: T.unsafe(nil)); end

  def account_sid; end
  def call_sid; end
  def date_created; end
  def inspect; end
  def sid; end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::CallContext::UserDefinedMessageList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil), call_sid: T.unsafe(nil)); end

  def create(content: T.unsafe(nil), idempotency_key: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::CallContext::UserDefinedMessagePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::CallContext::UserDefinedMessageSubscriptionContext < ::Twilio::REST::InstanceContext
  def initialize(version, account_sid, call_sid, sid); end

  def delete; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::CallContext::UserDefinedMessageSubscriptionInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), call_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def call_sid; end
  def context; end
  def date_created; end
  def delete; end
  def inspect; end
  def sid; end
  def to_s; end
  def uri; end
end

class Twilio::REST::Api::V2010::AccountContext::CallContext::UserDefinedMessageSubscriptionList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil), call_sid: T.unsafe(nil)); end

  def create(callback: T.unsafe(nil), method: T.unsafe(nil), idempotency_key: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::CallContext::UserDefinedMessageSubscriptionPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::CallInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def answered_by; end
  def api_version; end
  def caller_name; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def direction; end
  def duration; end
  def end_time; end
  def events; end
  def feedback; end
  def fetch; end
  def forwarded_from; end
  def from; end
  def from_formatted; end
  def group_sid; end
  def inspect; end
  def notifications; end
  def parent_call_sid; end
  def payments; end
  def phone_number_sid; end
  def price; end
  def price_unit; end
  def queue_time; end
  def recordings; end
  def sid; end
  def siprec; end
  def start_time; end
  def status; end
  def streams; end
  def subresource_uris; end
  def to; end
  def to_formatted; end
  def to_s; end
  def trunk_sid; end
  def update(url: T.unsafe(nil), method: T.unsafe(nil), status: T.unsafe(nil), fallback_url: T.unsafe(nil), fallback_method: T.unsafe(nil), status_callback: T.unsafe(nil), status_callback_method: T.unsafe(nil), twiml: T.unsafe(nil), time_limit: T.unsafe(nil)); end
  def uri; end
  def user_defined_message_subscriptions; end
  def user_defined_messages; end
end

class Twilio::REST::Api::V2010::AccountContext::CallList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil)); end

  def create(to: T.unsafe(nil), from: T.unsafe(nil), method: T.unsafe(nil), fallback_url: T.unsafe(nil), fallback_method: T.unsafe(nil), status_callback: T.unsafe(nil), status_callback_event: T.unsafe(nil), status_callback_method: T.unsafe(nil), send_digits: T.unsafe(nil), timeout: T.unsafe(nil), record: T.unsafe(nil), recording_channels: T.unsafe(nil), recording_status_callback: T.unsafe(nil), recording_status_callback_method: T.unsafe(nil), sip_auth_username: T.unsafe(nil), sip_auth_password: T.unsafe(nil), machine_detection: T.unsafe(nil), machine_detection_timeout: T.unsafe(nil), recording_status_callback_event: T.unsafe(nil), trim: T.unsafe(nil), caller_id: T.unsafe(nil), machine_detection_speech_threshold: T.unsafe(nil), machine_detection_speech_end_threshold: T.unsafe(nil), machine_detection_silence_timeout: T.unsafe(nil), async_amd: T.unsafe(nil), async_amd_status_callback: T.unsafe(nil), async_amd_status_callback_method: T.unsafe(nil), byoc: T.unsafe(nil), call_reason: T.unsafe(nil), call_token: T.unsafe(nil), recording_track: T.unsafe(nil), time_limit: T.unsafe(nil), url: T.unsafe(nil), twiml: T.unsafe(nil), application_sid: T.unsafe(nil)); end
  def each; end
  def feedback_summaries(sid = T.unsafe(nil)); end
  def get_page(target_url); end
  def list(to: T.unsafe(nil), from: T.unsafe(nil), parent_call_sid: T.unsafe(nil), status: T.unsafe(nil), start_time_before: T.unsafe(nil), start_time: T.unsafe(nil), start_time_after: T.unsafe(nil), end_time_before: T.unsafe(nil), end_time: T.unsafe(nil), end_time_after: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(to: T.unsafe(nil), from: T.unsafe(nil), parent_call_sid: T.unsafe(nil), status: T.unsafe(nil), start_time_before: T.unsafe(nil), start_time: T.unsafe(nil), start_time_after: T.unsafe(nil), end_time_before: T.unsafe(nil), end_time: T.unsafe(nil), end_time_after: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(to: T.unsafe(nil), from: T.unsafe(nil), parent_call_sid: T.unsafe(nil), status: T.unsafe(nil), start_time_before: T.unsafe(nil), start_time: T.unsafe(nil), start_time_after: T.unsafe(nil), end_time_before: T.unsafe(nil), end_time: T.unsafe(nil), end_time_after: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::CallList::FeedbackSummaryContext < ::Twilio::REST::InstanceContext
  def initialize(version, account_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::CallList::FeedbackSummaryInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def call_count; end
  def call_feedback_count; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def end_date; end
  def fetch; end
  def include_subaccounts; end
  def inspect; end
  def issues; end
  def quality_score_average; end
  def quality_score_median; end
  def quality_score_standard_deviation; end
  def sid; end
  def start_date; end
  def status; end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::CallList::FeedbackSummaryList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil)); end

  def create(start_date: T.unsafe(nil), end_date: T.unsafe(nil), include_subaccounts: T.unsafe(nil), status_callback: T.unsafe(nil), status_callback_method: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::CallList::FeedbackSummaryPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::CallPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::ConferenceContext < ::Twilio::REST::InstanceContext
  def initialize(version, account_sid, sid); end

  def fetch; end
  def inspect; end
  def participants(call_sid = T.unsafe(nil)); end
  def recordings(sid = T.unsafe(nil)); end
  def to_s; end
  def update(status: T.unsafe(nil), announce_url: T.unsafe(nil), announce_method: T.unsafe(nil)); end
end

class Twilio::REST::Api::V2010::AccountContext::ConferenceContext::ParticipantContext < ::Twilio::REST::InstanceContext
  def initialize(version, account_sid, conference_sid, call_sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(muted: T.unsafe(nil), hold: T.unsafe(nil), hold_url: T.unsafe(nil), hold_method: T.unsafe(nil), announce_url: T.unsafe(nil), announce_method: T.unsafe(nil), wait_url: T.unsafe(nil), wait_method: T.unsafe(nil), beep_on_exit: T.unsafe(nil), end_conference_on_exit: T.unsafe(nil), coaching: T.unsafe(nil), call_sid_to_coach: T.unsafe(nil)); end
end

class Twilio::REST::Api::V2010::AccountContext::ConferenceContext::ParticipantInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), conference_sid: T.unsafe(nil), call_sid: T.unsafe(nil)); end

  def account_sid; end
  def call_sid; end
  def call_sid_to_coach; end
  def coaching; end
  def conference_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def end_conference_on_exit; end
  def fetch; end
  def hold; end
  def inspect; end
  def label; end
  def muted; end
  def start_conference_on_enter; end
  def status; end
  def to_s; end
  def update(muted: T.unsafe(nil), hold: T.unsafe(nil), hold_url: T.unsafe(nil), hold_method: T.unsafe(nil), announce_url: T.unsafe(nil), announce_method: T.unsafe(nil), wait_url: T.unsafe(nil), wait_method: T.unsafe(nil), beep_on_exit: T.unsafe(nil), end_conference_on_exit: T.unsafe(nil), coaching: T.unsafe(nil), call_sid_to_coach: T.unsafe(nil)); end
  def uri; end
end

class Twilio::REST::Api::V2010::AccountContext::ConferenceContext::ParticipantList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil), conference_sid: T.unsafe(nil)); end

  def create(from: T.unsafe(nil), to: T.unsafe(nil), status_callback: T.unsafe(nil), status_callback_method: T.unsafe(nil), status_callback_event: T.unsafe(nil), label: T.unsafe(nil), timeout: T.unsafe(nil), record: T.unsafe(nil), muted: T.unsafe(nil), beep: T.unsafe(nil), start_conference_on_enter: T.unsafe(nil), end_conference_on_exit: T.unsafe(nil), wait_url: T.unsafe(nil), wait_method: T.unsafe(nil), early_media: T.unsafe(nil), max_participants: T.unsafe(nil), conference_record: T.unsafe(nil), conference_trim: T.unsafe(nil), conference_status_callback: T.unsafe(nil), conference_status_callback_method: T.unsafe(nil), conference_status_callback_event: T.unsafe(nil), recording_channels: T.unsafe(nil), recording_status_callback: T.unsafe(nil), recording_status_callback_method: T.unsafe(nil), sip_auth_username: T.unsafe(nil), sip_auth_password: T.unsafe(nil), region: T.unsafe(nil), conference_recording_status_callback: T.unsafe(nil), conference_recording_status_callback_method: T.unsafe(nil), recording_status_callback_event: T.unsafe(nil), conference_recording_status_callback_event: T.unsafe(nil), coaching: T.unsafe(nil), call_sid_to_coach: T.unsafe(nil), jitter_buffer_size: T.unsafe(nil), byoc: T.unsafe(nil), caller_id: T.unsafe(nil), call_reason: T.unsafe(nil), recording_track: T.unsafe(nil), time_limit: T.unsafe(nil), machine_detection: T.unsafe(nil), machine_detection_timeout: T.unsafe(nil), machine_detection_speech_threshold: T.unsafe(nil), machine_detection_speech_end_threshold: T.unsafe(nil), machine_detection_silence_timeout: T.unsafe(nil), amd_status_callback: T.unsafe(nil), amd_status_callback_method: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(muted: T.unsafe(nil), hold: T.unsafe(nil), coaching: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(muted: T.unsafe(nil), hold: T.unsafe(nil), coaching: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(muted: T.unsafe(nil), hold: T.unsafe(nil), coaching: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::ConferenceContext::ParticipantPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::ConferenceContext::RecordingContext < ::Twilio::REST::InstanceContext
  def initialize(version, account_sid, conference_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(status: T.unsafe(nil), pause_behavior: T.unsafe(nil)); end
end

class Twilio::REST::Api::V2010::AccountContext::ConferenceContext::RecordingInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), conference_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def api_version; end
  def call_sid; end
  def channels; end
  def conference_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def duration; end
  def encryption_details; end
  def error_code; end
  def fetch; end
  def inspect; end
  def price; end
  def price_unit; end
  def sid; end
  def source; end
  def start_time; end
  def status; end
  def to_s; end
  def update(status: T.unsafe(nil), pause_behavior: T.unsafe(nil)); end
  def uri; end
end

class Twilio::REST::Api::V2010::AccountContext::ConferenceContext::RecordingList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil), conference_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(date_created_before: T.unsafe(nil), date_created: T.unsafe(nil), date_created_after: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(date_created_before: T.unsafe(nil), date_created: T.unsafe(nil), date_created_after: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(date_created_before: T.unsafe(nil), date_created: T.unsafe(nil), date_created_after: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::ConferenceContext::RecordingPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::ConferenceInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def api_version; end
  def call_sid_ending_conference; end
  def context; end
  def date_created; end
  def date_updated; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def participants; end
  def reason_conference_ended; end
  def recordings; end
  def region; end
  def sid; end
  def status; end
  def subresource_uris; end
  def to_s; end
  def update(status: T.unsafe(nil), announce_url: T.unsafe(nil), announce_method: T.unsafe(nil)); end
  def uri; end
end

class Twilio::REST::Api::V2010::AccountContext::ConferenceList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(date_created_before: T.unsafe(nil), date_created: T.unsafe(nil), date_created_after: T.unsafe(nil), date_updated_before: T.unsafe(nil), date_updated: T.unsafe(nil), date_updated_after: T.unsafe(nil), friendly_name: T.unsafe(nil), status: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(date_created_before: T.unsafe(nil), date_created: T.unsafe(nil), date_created_after: T.unsafe(nil), date_updated_before: T.unsafe(nil), date_updated: T.unsafe(nil), date_updated_after: T.unsafe(nil), friendly_name: T.unsafe(nil), status: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(date_created_before: T.unsafe(nil), date_created: T.unsafe(nil), date_created_after: T.unsafe(nil), date_updated_before: T.unsafe(nil), date_updated: T.unsafe(nil), date_updated_after: T.unsafe(nil), friendly_name: T.unsafe(nil), status: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::ConferencePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::ConnectAppContext < ::Twilio::REST::InstanceContext
  def initialize(version, account_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(authorize_redirect_url: T.unsafe(nil), company_name: T.unsafe(nil), deauthorize_callback_method: T.unsafe(nil), deauthorize_callback_url: T.unsafe(nil), description: T.unsafe(nil), friendly_name: T.unsafe(nil), homepage_url: T.unsafe(nil), permissions: T.unsafe(nil)); end
end

class Twilio::REST::Api::V2010::AccountContext::ConnectAppInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def authorize_redirect_url; end
  def company_name; end
  def context; end
  def deauthorize_callback_method; end
  def deauthorize_callback_url; end
  def delete; end
  def description; end
  def fetch; end
  def friendly_name; end
  def homepage_url; end
  def inspect; end
  def permissions; end
  def sid; end
  def to_s; end
  def update(authorize_redirect_url: T.unsafe(nil), company_name: T.unsafe(nil), deauthorize_callback_method: T.unsafe(nil), deauthorize_callback_url: T.unsafe(nil), description: T.unsafe(nil), friendly_name: T.unsafe(nil), homepage_url: T.unsafe(nil), permissions: T.unsafe(nil)); end
  def uri; end
end

class Twilio::REST::Api::V2010::AccountContext::ConnectAppList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::ConnectAppPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::IncomingPhoneNumberContext < ::Twilio::REST::InstanceContext
  def initialize(version, account_sid, sid); end

  def assigned_add_ons(sid = T.unsafe(nil)); end
  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(account_sid: T.unsafe(nil), api_version: T.unsafe(nil), friendly_name: T.unsafe(nil), sms_application_sid: T.unsafe(nil), sms_fallback_method: T.unsafe(nil), sms_fallback_url: T.unsafe(nil), sms_method: T.unsafe(nil), sms_url: T.unsafe(nil), status_callback: T.unsafe(nil), status_callback_method: T.unsafe(nil), voice_application_sid: T.unsafe(nil), voice_caller_id_lookup: T.unsafe(nil), voice_fallback_method: T.unsafe(nil), voice_fallback_url: T.unsafe(nil), voice_method: T.unsafe(nil), voice_url: T.unsafe(nil), emergency_status: T.unsafe(nil), emergency_address_sid: T.unsafe(nil), trunk_sid: T.unsafe(nil), voice_receive_mode: T.unsafe(nil), identity_sid: T.unsafe(nil), address_sid: T.unsafe(nil), bundle_sid: T.unsafe(nil)); end
end

class Twilio::REST::Api::V2010::AccountContext::IncomingPhoneNumberContext::AssignedAddOnContext < ::Twilio::REST::InstanceContext
  def initialize(version, account_sid, resource_sid, sid); end

  def delete; end
  def extensions(sid = T.unsafe(nil)); end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::IncomingPhoneNumberContext::AssignedAddOnContext::AssignedAddOnExtensionContext < ::Twilio::REST::InstanceContext
  def initialize(version, account_sid, resource_sid, assigned_add_on_sid, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::IncomingPhoneNumberContext::AssignedAddOnContext::AssignedAddOnExtensionInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), resource_sid: T.unsafe(nil), assigned_add_on_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def assigned_add_on_sid; end
  def context; end
  def enabled; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def product_name; end
  def resource_sid; end
  def sid; end
  def to_s; end
  def unique_name; end
  def uri; end
end

class Twilio::REST::Api::V2010::AccountContext::IncomingPhoneNumberContext::AssignedAddOnContext::AssignedAddOnExtensionList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil), resource_sid: T.unsafe(nil), assigned_add_on_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::IncomingPhoneNumberContext::AssignedAddOnContext::AssignedAddOnExtensionPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::IncomingPhoneNumberContext::AssignedAddOnInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), resource_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def configuration; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def description; end
  def extensions; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def resource_sid; end
  def sid; end
  def subresource_uris; end
  def to_s; end
  def unique_name; end
  def uri; end
end

class Twilio::REST::Api::V2010::AccountContext::IncomingPhoneNumberContext::AssignedAddOnList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil), resource_sid: T.unsafe(nil)); end

  def create(installed_add_on_sid: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::IncomingPhoneNumberContext::AssignedAddOnPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::IncomingPhoneNumberInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def address_requirements; end
  def address_sid; end
  def api_version; end
  def assigned_add_ons; end
  def beta; end
  def bundle_sid; end
  def capabilities; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def emergency_address_sid; end
  def emergency_address_status; end
  def emergency_status; end
  def fetch; end
  def friendly_name; end
  def identity_sid; end
  def inspect; end
  def origin; end
  def phone_number; end
  def sid; end
  def sms_application_sid; end
  def sms_fallback_method; end
  def sms_fallback_url; end
  def sms_method; end
  def sms_url; end
  def status; end
  def status_callback; end
  def status_callback_method; end
  def to_s; end
  def trunk_sid; end
  def update(account_sid: T.unsafe(nil), api_version: T.unsafe(nil), friendly_name: T.unsafe(nil), sms_application_sid: T.unsafe(nil), sms_fallback_method: T.unsafe(nil), sms_fallback_url: T.unsafe(nil), sms_method: T.unsafe(nil), sms_url: T.unsafe(nil), status_callback: T.unsafe(nil), status_callback_method: T.unsafe(nil), voice_application_sid: T.unsafe(nil), voice_caller_id_lookup: T.unsafe(nil), voice_fallback_method: T.unsafe(nil), voice_fallback_url: T.unsafe(nil), voice_method: T.unsafe(nil), voice_url: T.unsafe(nil), emergency_status: T.unsafe(nil), emergency_address_sid: T.unsafe(nil), trunk_sid: T.unsafe(nil), voice_receive_mode: T.unsafe(nil), identity_sid: T.unsafe(nil), address_sid: T.unsafe(nil), bundle_sid: T.unsafe(nil)); end
  def uri; end
  def voice_application_sid; end
  def voice_caller_id_lookup; end
  def voice_fallback_method; end
  def voice_fallback_url; end
  def voice_method; end
  def voice_receive_mode; end
  def voice_url; end
end

class Twilio::REST::Api::V2010::AccountContext::IncomingPhoneNumberList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil)); end

  def create(api_version: T.unsafe(nil), friendly_name: T.unsafe(nil), sms_application_sid: T.unsafe(nil), sms_fallback_method: T.unsafe(nil), sms_fallback_url: T.unsafe(nil), sms_method: T.unsafe(nil), sms_url: T.unsafe(nil), status_callback: T.unsafe(nil), status_callback_method: T.unsafe(nil), voice_application_sid: T.unsafe(nil), voice_caller_id_lookup: T.unsafe(nil), voice_fallback_method: T.unsafe(nil), voice_fallback_url: T.unsafe(nil), voice_method: T.unsafe(nil), voice_url: T.unsafe(nil), emergency_status: T.unsafe(nil), emergency_address_sid: T.unsafe(nil), trunk_sid: T.unsafe(nil), identity_sid: T.unsafe(nil), address_sid: T.unsafe(nil), voice_receive_mode: T.unsafe(nil), bundle_sid: T.unsafe(nil), phone_number: T.unsafe(nil), area_code: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(beta: T.unsafe(nil), friendly_name: T.unsafe(nil), phone_number: T.unsafe(nil), origin: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def local; end
  def mobile; end
  def page(beta: T.unsafe(nil), friendly_name: T.unsafe(nil), phone_number: T.unsafe(nil), origin: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(beta: T.unsafe(nil), friendly_name: T.unsafe(nil), phone_number: T.unsafe(nil), origin: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
  def toll_free; end
end

class Twilio::REST::Api::V2010::AccountContext::IncomingPhoneNumberList::LocalInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil)); end

  def account_sid; end
  def address_requirements; end
  def address_sid; end
  def api_version; end
  def beta; end
  def bundle_sid; end
  def capabilities; end
  def date_created; end
  def date_updated; end
  def emergency_address_sid; end
  def emergency_address_status; end
  def emergency_status; end
  def friendly_name; end
  def identity_sid; end
  def inspect; end
  def origin; end
  def phone_number; end
  def sid; end
  def sms_application_sid; end
  def sms_fallback_method; end
  def sms_fallback_url; end
  def sms_method; end
  def sms_url; end
  def status; end
  def status_callback; end
  def status_callback_method; end
  def to_s; end
  def trunk_sid; end
  def uri; end
  def voice_application_sid; end
  def voice_caller_id_lookup; end
  def voice_fallback_method; end
  def voice_fallback_url; end
  def voice_method; end
  def voice_receive_mode; end
  def voice_url; end
end

class Twilio::REST::Api::V2010::AccountContext::IncomingPhoneNumberList::LocalList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil)); end

  def create(phone_number: T.unsafe(nil), api_version: T.unsafe(nil), friendly_name: T.unsafe(nil), sms_application_sid: T.unsafe(nil), sms_fallback_method: T.unsafe(nil), sms_fallback_url: T.unsafe(nil), sms_method: T.unsafe(nil), sms_url: T.unsafe(nil), status_callback: T.unsafe(nil), status_callback_method: T.unsafe(nil), voice_application_sid: T.unsafe(nil), voice_caller_id_lookup: T.unsafe(nil), voice_fallback_method: T.unsafe(nil), voice_fallback_url: T.unsafe(nil), voice_method: T.unsafe(nil), voice_url: T.unsafe(nil), identity_sid: T.unsafe(nil), address_sid: T.unsafe(nil), emergency_status: T.unsafe(nil), emergency_address_sid: T.unsafe(nil), trunk_sid: T.unsafe(nil), voice_receive_mode: T.unsafe(nil), bundle_sid: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(beta: T.unsafe(nil), friendly_name: T.unsafe(nil), phone_number: T.unsafe(nil), origin: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(beta: T.unsafe(nil), friendly_name: T.unsafe(nil), phone_number: T.unsafe(nil), origin: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(beta: T.unsafe(nil), friendly_name: T.unsafe(nil), phone_number: T.unsafe(nil), origin: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::IncomingPhoneNumberList::LocalPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::IncomingPhoneNumberList::MobileInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil)); end

  def account_sid; end
  def address_requirements; end
  def address_sid; end
  def api_version; end
  def beta; end
  def bundle_sid; end
  def capabilities; end
  def date_created; end
  def date_updated; end
  def emergency_address_sid; end
  def emergency_address_status; end
  def emergency_status; end
  def friendly_name; end
  def identity_sid; end
  def inspect; end
  def origin; end
  def phone_number; end
  def sid; end
  def sms_application_sid; end
  def sms_fallback_method; end
  def sms_fallback_url; end
  def sms_method; end
  def sms_url; end
  def status; end
  def status_callback; end
  def status_callback_method; end
  def to_s; end
  def trunk_sid; end
  def uri; end
  def voice_application_sid; end
  def voice_caller_id_lookup; end
  def voice_fallback_method; end
  def voice_fallback_url; end
  def voice_method; end
  def voice_receive_mode; end
  def voice_url; end
end

class Twilio::REST::Api::V2010::AccountContext::IncomingPhoneNumberList::MobileList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil)); end

  def create(phone_number: T.unsafe(nil), api_version: T.unsafe(nil), friendly_name: T.unsafe(nil), sms_application_sid: T.unsafe(nil), sms_fallback_method: T.unsafe(nil), sms_fallback_url: T.unsafe(nil), sms_method: T.unsafe(nil), sms_url: T.unsafe(nil), status_callback: T.unsafe(nil), status_callback_method: T.unsafe(nil), voice_application_sid: T.unsafe(nil), voice_caller_id_lookup: T.unsafe(nil), voice_fallback_method: T.unsafe(nil), voice_fallback_url: T.unsafe(nil), voice_method: T.unsafe(nil), voice_url: T.unsafe(nil), identity_sid: T.unsafe(nil), address_sid: T.unsafe(nil), emergency_status: T.unsafe(nil), emergency_address_sid: T.unsafe(nil), trunk_sid: T.unsafe(nil), voice_receive_mode: T.unsafe(nil), bundle_sid: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(beta: T.unsafe(nil), friendly_name: T.unsafe(nil), phone_number: T.unsafe(nil), origin: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(beta: T.unsafe(nil), friendly_name: T.unsafe(nil), phone_number: T.unsafe(nil), origin: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(beta: T.unsafe(nil), friendly_name: T.unsafe(nil), phone_number: T.unsafe(nil), origin: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::IncomingPhoneNumberList::MobilePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::IncomingPhoneNumberList::TollFreeInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil)); end

  def account_sid; end
  def address_requirements; end
  def address_sid; end
  def api_version; end
  def beta; end
  def bundle_sid; end
  def capabilities; end
  def date_created; end
  def date_updated; end
  def emergency_address_sid; end
  def emergency_address_status; end
  def emergency_status; end
  def friendly_name; end
  def identity_sid; end
  def inspect; end
  def origin; end
  def phone_number; end
  def sid; end
  def sms_application_sid; end
  def sms_fallback_method; end
  def sms_fallback_url; end
  def sms_method; end
  def sms_url; end
  def status; end
  def status_callback; end
  def status_callback_method; end
  def to_s; end
  def trunk_sid; end
  def uri; end
  def voice_application_sid; end
  def voice_caller_id_lookup; end
  def voice_fallback_method; end
  def voice_fallback_url; end
  def voice_method; end
  def voice_receive_mode; end
  def voice_url; end
end

class Twilio::REST::Api::V2010::AccountContext::IncomingPhoneNumberList::TollFreeList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil)); end

  def create(phone_number: T.unsafe(nil), api_version: T.unsafe(nil), friendly_name: T.unsafe(nil), sms_application_sid: T.unsafe(nil), sms_fallback_method: T.unsafe(nil), sms_fallback_url: T.unsafe(nil), sms_method: T.unsafe(nil), sms_url: T.unsafe(nil), status_callback: T.unsafe(nil), status_callback_method: T.unsafe(nil), voice_application_sid: T.unsafe(nil), voice_caller_id_lookup: T.unsafe(nil), voice_fallback_method: T.unsafe(nil), voice_fallback_url: T.unsafe(nil), voice_method: T.unsafe(nil), voice_url: T.unsafe(nil), identity_sid: T.unsafe(nil), address_sid: T.unsafe(nil), emergency_status: T.unsafe(nil), emergency_address_sid: T.unsafe(nil), trunk_sid: T.unsafe(nil), voice_receive_mode: T.unsafe(nil), bundle_sid: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(beta: T.unsafe(nil), friendly_name: T.unsafe(nil), phone_number: T.unsafe(nil), origin: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(beta: T.unsafe(nil), friendly_name: T.unsafe(nil), phone_number: T.unsafe(nil), origin: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(beta: T.unsafe(nil), friendly_name: T.unsafe(nil), phone_number: T.unsafe(nil), origin: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::IncomingPhoneNumberList::TollFreePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::IncomingPhoneNumberPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::KeyContext < ::Twilio::REST::InstanceContext
  def initialize(version, account_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil)); end
end

class Twilio::REST::Api::V2010::AccountContext::KeyInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def sid; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil)); end
end

class Twilio::REST::Api::V2010::AccountContext::KeyList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::KeyPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::MessageContext < ::Twilio::REST::InstanceContext
  def initialize(version, account_sid, sid); end

  def delete; end
  def feedback; end
  def fetch; end
  def inspect; end
  def media(sid = T.unsafe(nil)); end
  def to_s; end
  def update(body: T.unsafe(nil), status: T.unsafe(nil)); end
end

class Twilio::REST::Api::V2010::AccountContext::MessageContext::FeedbackInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), message_sid: T.unsafe(nil)); end

  def account_sid; end
  def date_created; end
  def date_updated; end
  def inspect; end
  def message_sid; end
  def outcome; end
  def to_s; end
  def uri; end
end

class Twilio::REST::Api::V2010::AccountContext::MessageContext::FeedbackList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil), message_sid: T.unsafe(nil)); end

  def create(outcome: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::MessageContext::FeedbackPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::MessageContext::MediaContext < ::Twilio::REST::InstanceContext
  def initialize(version, account_sid, message_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::MessageContext::MediaInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), message_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def content_type; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def inspect; end
  def parent_sid; end
  def sid; end
  def to_s; end
  def uri; end
end

class Twilio::REST::Api::V2010::AccountContext::MessageContext::MediaList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil), message_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(date_created_before: T.unsafe(nil), date_created: T.unsafe(nil), date_created_after: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(date_created_before: T.unsafe(nil), date_created: T.unsafe(nil), date_created_after: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(date_created_before: T.unsafe(nil), date_created: T.unsafe(nil), date_created_after: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::MessageContext::MediaPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::MessageInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def api_version; end
  def body; end
  def context; end
  def date_created; end
  def date_sent; end
  def date_updated; end
  def delete; end
  def direction; end
  def error_code; end
  def error_message; end
  def feedback; end
  def fetch; end
  def from; end
  def inspect; end
  def media; end
  def messaging_service_sid; end
  def num_media; end
  def num_segments; end
  def price; end
  def price_unit; end
  def sid; end
  def status; end
  def subresource_uris; end
  def to; end
  def to_s; end
  def update(body: T.unsafe(nil), status: T.unsafe(nil)); end
  def uri; end
end

class Twilio::REST::Api::V2010::AccountContext::MessageList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil)); end

  def create(to: T.unsafe(nil), status_callback: T.unsafe(nil), application_sid: T.unsafe(nil), max_price: T.unsafe(nil), provide_feedback: T.unsafe(nil), attempt: T.unsafe(nil), validity_period: T.unsafe(nil), force_delivery: T.unsafe(nil), content_retention: T.unsafe(nil), address_retention: T.unsafe(nil), smart_encoded: T.unsafe(nil), persistent_action: T.unsafe(nil), shorten_urls: T.unsafe(nil), schedule_type: T.unsafe(nil), send_at: T.unsafe(nil), send_as_mms: T.unsafe(nil), content_sid: T.unsafe(nil), content_variables: T.unsafe(nil), from: T.unsafe(nil), messaging_service_sid: T.unsafe(nil), body: T.unsafe(nil), media_url: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(to: T.unsafe(nil), from: T.unsafe(nil), date_sent_before: T.unsafe(nil), date_sent: T.unsafe(nil), date_sent_after: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(to: T.unsafe(nil), from: T.unsafe(nil), date_sent_before: T.unsafe(nil), date_sent: T.unsafe(nil), date_sent_after: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(to: T.unsafe(nil), from: T.unsafe(nil), date_sent_before: T.unsafe(nil), date_sent: T.unsafe(nil), date_sent_after: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::MessagePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::NewKeyInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil)); end

  def date_created; end
  def date_updated; end
  def friendly_name; end
  def inspect; end
  def secret; end
  def sid; end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::NewKeyList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil)); end

  def create(friendly_name: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::NewKeyPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::NewSigningKeyInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil)); end

  def date_created; end
  def date_updated; end
  def friendly_name; end
  def inspect; end
  def secret; end
  def sid; end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::NewSigningKeyList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil)); end

  def create(friendly_name: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::NewSigningKeyPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::NotificationContext < ::Twilio::REST::InstanceContext
  def initialize(version, account_sid, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::NotificationInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def api_version; end
  def call_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def error_code; end
  def fetch; end
  def inspect; end
  def log; end
  def message_date; end
  def message_text; end
  def more_info; end
  def request_method; end
  def request_url; end
  def request_variables; end
  def response_body; end
  def response_headers; end
  def sid; end
  def to_s; end
  def uri; end
end

class Twilio::REST::Api::V2010::AccountContext::NotificationList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(log: T.unsafe(nil), message_date_before: T.unsafe(nil), message_date: T.unsafe(nil), message_date_after: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(log: T.unsafe(nil), message_date_before: T.unsafe(nil), message_date: T.unsafe(nil), message_date_after: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(log: T.unsafe(nil), message_date_before: T.unsafe(nil), message_date: T.unsafe(nil), message_date_after: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::NotificationPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::OutgoingCallerIdContext < ::Twilio::REST::InstanceContext
  def initialize(version, account_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil)); end
end

class Twilio::REST::Api::V2010::AccountContext::OutgoingCallerIdInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def phone_number; end
  def sid; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil)); end
  def uri; end
end

class Twilio::REST::Api::V2010::AccountContext::OutgoingCallerIdList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(phone_number: T.unsafe(nil), friendly_name: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(phone_number: T.unsafe(nil), friendly_name: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(phone_number: T.unsafe(nil), friendly_name: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::OutgoingCallerIdPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::QueueContext < ::Twilio::REST::InstanceContext
  def initialize(version, account_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def members(call_sid = T.unsafe(nil)); end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), max_size: T.unsafe(nil)); end
end

class Twilio::REST::Api::V2010::AccountContext::QueueContext::MemberContext < ::Twilio::REST::InstanceContext
  def initialize(version, account_sid, queue_sid, call_sid); end

  def fetch; end
  def inspect; end
  def to_s; end
  def update(url: T.unsafe(nil), method: T.unsafe(nil)); end
end

class Twilio::REST::Api::V2010::AccountContext::QueueContext::MemberInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), queue_sid: T.unsafe(nil), call_sid: T.unsafe(nil)); end

  def call_sid; end
  def context; end
  def date_enqueued; end
  def fetch; end
  def inspect; end
  def position; end
  def queue_sid; end
  def to_s; end
  def update(url: T.unsafe(nil), method: T.unsafe(nil)); end
  def uri; end
  def wait_time; end
end

class Twilio::REST::Api::V2010::AccountContext::QueueContext::MemberList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil), queue_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::QueueContext::MemberPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::QueueInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def average_wait_time; end
  def context; end
  def current_size; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def max_size; end
  def members; end
  def sid; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), max_size: T.unsafe(nil)); end
  def uri; end
end

class Twilio::REST::Api::V2010::AccountContext::QueueList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil)); end

  def create(friendly_name: T.unsafe(nil), max_size: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::QueuePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::RecordingContext < ::Twilio::REST::InstanceContext
  def initialize(version, account_sid, sid); end

  def add_on_results(sid = T.unsafe(nil)); end
  def delete; end
  def fetch(include_soft_deleted: T.unsafe(nil)); end
  def inspect; end
  def to_s; end
  def transcriptions(sid = T.unsafe(nil)); end
end

class Twilio::REST::Api::V2010::AccountContext::RecordingContext::AddOnResultContext < ::Twilio::REST::InstanceContext
  def initialize(version, account_sid, reference_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def payloads(sid = T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::RecordingContext::AddOnResultContext::PayloadContext < ::Twilio::REST::InstanceContext
  def initialize(version, account_sid, reference_sid, add_on_result_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::RecordingContext::AddOnResultContext::PayloadInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), reference_sid: T.unsafe(nil), add_on_result_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def add_on_configuration_sid; end
  def add_on_result_sid; end
  def add_on_sid; end
  def content_type; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def inspect; end
  def label; end
  def reference_sid; end
  def sid; end
  def subresource_uris; end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::RecordingContext::AddOnResultContext::PayloadList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil), reference_sid: T.unsafe(nil), add_on_result_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::RecordingContext::AddOnResultContext::PayloadPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::RecordingContext::AddOnResultInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), reference_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def add_on_configuration_sid; end
  def add_on_sid; end
  def context; end
  def date_completed; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def inspect; end
  def payloads; end
  def reference_sid; end
  def sid; end
  def status; end
  def subresource_uris; end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::RecordingContext::AddOnResultList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil), reference_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::RecordingContext::AddOnResultPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::RecordingContext::TranscriptionContext < ::Twilio::REST::InstanceContext
  def initialize(version, account_sid, recording_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::RecordingContext::TranscriptionInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), recording_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def api_version; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def duration; end
  def fetch; end
  def inspect; end
  def price; end
  def price_unit; end
  def recording_sid; end
  def sid; end
  def status; end
  def to_s; end
  def transcription_text; end
  def type; end
  def uri; end
end

class Twilio::REST::Api::V2010::AccountContext::RecordingContext::TranscriptionList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil), recording_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::RecordingContext::TranscriptionPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::RecordingInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def add_on_results; end
  def api_version; end
  def call_sid; end
  def channels; end
  def conference_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def duration; end
  def encryption_details; end
  def error_code; end
  def fetch(include_soft_deleted: T.unsafe(nil)); end
  def inspect; end
  def media_url; end
  def price; end
  def price_unit; end
  def sid; end
  def source; end
  def start_time; end
  def status; end
  def subresource_uris; end
  def to_s; end
  def transcriptions; end
  def uri; end
end

class Twilio::REST::Api::V2010::AccountContext::RecordingList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(date_created_before: T.unsafe(nil), date_created: T.unsafe(nil), date_created_after: T.unsafe(nil), call_sid: T.unsafe(nil), conference_sid: T.unsafe(nil), include_soft_deleted: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(date_created_before: T.unsafe(nil), date_created: T.unsafe(nil), date_created_after: T.unsafe(nil), call_sid: T.unsafe(nil), conference_sid: T.unsafe(nil), include_soft_deleted: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(date_created_before: T.unsafe(nil), date_created: T.unsafe(nil), date_created_after: T.unsafe(nil), call_sid: T.unsafe(nil), conference_sid: T.unsafe(nil), include_soft_deleted: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::RecordingPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::ShortCodeContext < ::Twilio::REST::InstanceContext
  def initialize(version, account_sid, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), api_version: T.unsafe(nil), sms_url: T.unsafe(nil), sms_method: T.unsafe(nil), sms_fallback_url: T.unsafe(nil), sms_fallback_method: T.unsafe(nil)); end
end

class Twilio::REST::Api::V2010::AccountContext::ShortCodeInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def api_version; end
  def context; end
  def date_created; end
  def date_updated; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def short_code; end
  def sid; end
  def sms_fallback_method; end
  def sms_fallback_url; end
  def sms_method; end
  def sms_url; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), api_version: T.unsafe(nil), sms_url: T.unsafe(nil), sms_method: T.unsafe(nil), sms_fallback_url: T.unsafe(nil), sms_fallback_method: T.unsafe(nil)); end
  def uri; end
end

class Twilio::REST::Api::V2010::AccountContext::ShortCodeList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(friendly_name: T.unsafe(nil), short_code: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(friendly_name: T.unsafe(nil), short_code: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(friendly_name: T.unsafe(nil), short_code: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::ShortCodePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::SigningKeyContext < ::Twilio::REST::InstanceContext
  def initialize(version, account_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil)); end
end

class Twilio::REST::Api::V2010::AccountContext::SigningKeyInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def sid; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil)); end
end

class Twilio::REST::Api::V2010::AccountContext::SigningKeyList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::SigningKeyPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::SipInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil)); end

  def inspect; end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::SipList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil)); end

  def credential_lists(sid = T.unsafe(nil)); end
  def domains(sid = T.unsafe(nil)); end
  def ip_access_control_lists(sid = T.unsafe(nil)); end
  def regions; end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::CredentialListContext < ::Twilio::REST::InstanceContext
  def initialize(version, account_sid, sid); end

  def credentials(sid = T.unsafe(nil)); end
  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil)); end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::CredentialListContext::CredentialContext < ::Twilio::REST::InstanceContext
  def initialize(version, account_sid, credential_list_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(password: T.unsafe(nil)); end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::CredentialListContext::CredentialInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), credential_list_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def credential_list_sid; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def inspect; end
  def sid; end
  def to_s; end
  def update(password: T.unsafe(nil)); end
  def uri; end
  def username; end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::CredentialListContext::CredentialList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil), credential_list_sid: T.unsafe(nil)); end

  def create(username: T.unsafe(nil), password: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::CredentialListContext::CredentialPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::CredentialListInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def credentials; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def sid; end
  def subresource_uris; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil)); end
  def uri; end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::CredentialListList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil)); end

  def create(friendly_name: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::CredentialListPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext < ::Twilio::REST::InstanceContext
  def initialize(version, account_sid, sid); end

  def auth; end
  def credential_list_mappings(sid = T.unsafe(nil)); end
  def delete; end
  def fetch; end
  def inspect; end
  def ip_access_control_list_mappings(sid = T.unsafe(nil)); end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), voice_fallback_method: T.unsafe(nil), voice_fallback_url: T.unsafe(nil), voice_method: T.unsafe(nil), voice_status_callback_method: T.unsafe(nil), voice_status_callback_url: T.unsafe(nil), voice_url: T.unsafe(nil), sip_registration: T.unsafe(nil), domain_name: T.unsafe(nil), emergency_calling_enabled: T.unsafe(nil), secure: T.unsafe(nil), byoc_trunk_sid: T.unsafe(nil), emergency_caller_sid: T.unsafe(nil)); end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::AuthTypesInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), domain_sid: T.unsafe(nil)); end

  def inspect; end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::AuthTypesList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil), domain_sid: T.unsafe(nil)); end

  def calls; end
  def registrations; end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::AuthTypesList::AuthTypeCallsInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), domain_sid: T.unsafe(nil)); end

  def inspect; end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::AuthTypesList::AuthTypeCallsList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil), domain_sid: T.unsafe(nil)); end

  def credential_list_mappings(sid = T.unsafe(nil)); end
  def ip_access_control_list_mappings(sid = T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::AuthTypesList::AuthTypeCallsList::AuthCallsCredentialListMappingContext < ::Twilio::REST::InstanceContext
  def initialize(version, account_sid, domain_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::AuthTypesList::AuthTypeCallsList::AuthCallsCredentialListMappingInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), domain_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def sid; end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::AuthTypesList::AuthTypeCallsList::AuthCallsCredentialListMappingList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil), domain_sid: T.unsafe(nil)); end

  def create(credential_list_sid: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::AuthTypesList::AuthTypeCallsList::AuthCallsCredentialListMappingPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::AuthTypesList::AuthTypeCallsList::AuthCallsIpAccessControlListMappingContext < ::Twilio::REST::InstanceContext
  def initialize(version, account_sid, domain_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::AuthTypesList::AuthTypeCallsList::AuthCallsIpAccessControlListMappingInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), domain_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def sid; end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::AuthTypesList::AuthTypeCallsList::AuthCallsIpAccessControlListMappingList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil), domain_sid: T.unsafe(nil)); end

  def create(ip_access_control_list_sid: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::AuthTypesList::AuthTypeCallsList::AuthCallsIpAccessControlListMappingPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::AuthTypesList::AuthTypeCallsPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::AuthTypesList::AuthTypeRegistrationsInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), domain_sid: T.unsafe(nil)); end

  def inspect; end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::AuthTypesList::AuthTypeRegistrationsList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil), domain_sid: T.unsafe(nil)); end

  def credential_list_mappings(sid = T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::AuthTypesList::AuthTypeRegistrationsList::AuthRegistrationsCredentialListMappingContext < ::Twilio::REST::InstanceContext
  def initialize(version, account_sid, domain_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::AuthTypesList::AuthTypeRegistrationsList::AuthRegistrationsCredentialListMappingInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), domain_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def sid; end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::AuthTypesList::AuthTypeRegistrationsList::AuthRegistrationsCredentialListMappingList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil), domain_sid: T.unsafe(nil)); end

  def create(credential_list_sid: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::AuthTypesList::AuthTypeRegistrationsList::AuthRegistrationsCredentialListMappingPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::AuthTypesList::AuthTypeRegistrationsPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::AuthTypesPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::CredentialListMappingContext < ::Twilio::REST::InstanceContext
  def initialize(version, account_sid, domain_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::CredentialListMappingInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), domain_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def domain_sid; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def sid; end
  def to_s; end
  def uri; end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::CredentialListMappingList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil), domain_sid: T.unsafe(nil)); end

  def create(credential_list_sid: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::CredentialListMappingPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::IpAccessControlListMappingContext < ::Twilio::REST::InstanceContext
  def initialize(version, account_sid, domain_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::IpAccessControlListMappingInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), domain_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def domain_sid; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def sid; end
  def to_s; end
  def uri; end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::IpAccessControlListMappingList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil), domain_sid: T.unsafe(nil)); end

  def create(ip_access_control_list_sid: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::IpAccessControlListMappingPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::DomainInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def api_version; end
  def auth; end
  def auth_type; end
  def byoc_trunk_sid; end
  def context; end
  def credential_list_mappings; end
  def date_created; end
  def date_updated; end
  def delete; end
  def domain_name; end
  def emergency_caller_sid; end
  def emergency_calling_enabled; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def ip_access_control_list_mappings; end
  def secure; end
  def sid; end
  def sip_registration; end
  def subresource_uris; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), voice_fallback_method: T.unsafe(nil), voice_fallback_url: T.unsafe(nil), voice_method: T.unsafe(nil), voice_status_callback_method: T.unsafe(nil), voice_status_callback_url: T.unsafe(nil), voice_url: T.unsafe(nil), sip_registration: T.unsafe(nil), domain_name: T.unsafe(nil), emergency_calling_enabled: T.unsafe(nil), secure: T.unsafe(nil), byoc_trunk_sid: T.unsafe(nil), emergency_caller_sid: T.unsafe(nil)); end
  def uri; end
  def voice_fallback_method; end
  def voice_fallback_url; end
  def voice_method; end
  def voice_status_callback_method; end
  def voice_status_callback_url; end
  def voice_url; end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::DomainList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil)); end

  def create(domain_name: T.unsafe(nil), friendly_name: T.unsafe(nil), voice_url: T.unsafe(nil), voice_method: T.unsafe(nil), voice_fallback_url: T.unsafe(nil), voice_fallback_method: T.unsafe(nil), voice_status_callback_url: T.unsafe(nil), voice_status_callback_method: T.unsafe(nil), sip_registration: T.unsafe(nil), emergency_calling_enabled: T.unsafe(nil), secure: T.unsafe(nil), byoc_trunk_sid: T.unsafe(nil), emergency_caller_sid: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::DomainPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::IpAccessControlListContext < ::Twilio::REST::InstanceContext
  def initialize(version, account_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def ip_addresses(sid = T.unsafe(nil)); end
  def to_s; end
  def update(friendly_name: T.unsafe(nil)); end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::IpAccessControlListContext::IpAddressContext < ::Twilio::REST::InstanceContext
  def initialize(version, account_sid, ip_access_control_list_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(ip_address: T.unsafe(nil), friendly_name: T.unsafe(nil), cidr_prefix_length: T.unsafe(nil)); end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::IpAccessControlListContext::IpAddressInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), ip_access_control_list_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def cidr_prefix_length; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def ip_access_control_list_sid; end
  def ip_address; end
  def sid; end
  def to_s; end
  def update(ip_address: T.unsafe(nil), friendly_name: T.unsafe(nil), cidr_prefix_length: T.unsafe(nil)); end
  def uri; end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::IpAccessControlListContext::IpAddressList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil), ip_access_control_list_sid: T.unsafe(nil)); end

  def create(friendly_name: T.unsafe(nil), ip_address: T.unsafe(nil), cidr_prefix_length: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::IpAccessControlListContext::IpAddressPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::IpAccessControlListInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def ip_addresses; end
  def sid; end
  def subresource_uris; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil)); end
  def uri; end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::IpAccessControlListList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil)); end

  def create(friendly_name: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::SipList::IpAccessControlListPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::SipPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::TokenInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil)); end

  def account_sid; end
  def date_created; end
  def date_updated; end
  def ice_servers; end
  def inspect; end
  def password; end
  def to_s; end
  def ttl; end
  def username; end
end

class Twilio::REST::Api::V2010::AccountContext::TokenList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil)); end

  def create(ttl: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::TokenPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::TranscriptionContext < ::Twilio::REST::InstanceContext
  def initialize(version, account_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::TranscriptionInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def api_version; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def duration; end
  def fetch; end
  def inspect; end
  def price; end
  def price_unit; end
  def recording_sid; end
  def sid; end
  def status; end
  def to_s; end
  def transcription_text; end
  def type; end
  def uri; end
end

class Twilio::REST::Api::V2010::AccountContext::TranscriptionList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::TranscriptionPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::UsageInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil)); end

  def inspect; end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::UsageList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil)); end

  def records; end
  def to_s; end
  def triggers(sid = T.unsafe(nil)); end
end

class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil)); end

  def account_sid; end
  def api_version; end
  def as_of; end
  def category; end
  def count; end
  def count_unit; end
  def description; end
  def end_date; end
  def inspect; end
  def price; end
  def price_unit; end
  def start_date; end
  def subresource_uris; end
  def to_s; end
  def uri; end
  def usage; end
  def usage_unit; end
end

class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil)); end

  def all_time; end
  def daily; end
  def each; end
  def get_page(target_url); end
  def last_month; end
  def list(category: T.unsafe(nil), start_date: T.unsafe(nil), end_date: T.unsafe(nil), include_subaccounts: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def monthly; end
  def page(category: T.unsafe(nil), start_date: T.unsafe(nil), end_date: T.unsafe(nil), include_subaccounts: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(category: T.unsafe(nil), start_date: T.unsafe(nil), end_date: T.unsafe(nil), include_subaccounts: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def this_month; end
  def to_s; end
  def today; end
  def yearly; end
  def yesterday; end
end

class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::AllTimeInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil)); end

  def account_sid; end
  def api_version; end
  def as_of; end
  def category; end
  def count; end
  def count_unit; end
  def description; end
  def end_date; end
  def inspect; end
  def price; end
  def price_unit; end
  def start_date; end
  def subresource_uris; end
  def to_s; end
  def uri; end
  def usage; end
  def usage_unit; end
end

class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::AllTimeList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(category: T.unsafe(nil), start_date: T.unsafe(nil), end_date: T.unsafe(nil), include_subaccounts: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(category: T.unsafe(nil), start_date: T.unsafe(nil), end_date: T.unsafe(nil), include_subaccounts: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(category: T.unsafe(nil), start_date: T.unsafe(nil), end_date: T.unsafe(nil), include_subaccounts: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::AllTimePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::DailyInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil)); end

  def account_sid; end
  def api_version; end
  def as_of; end
  def category; end
  def count; end
  def count_unit; end
  def description; end
  def end_date; end
  def inspect; end
  def price; end
  def price_unit; end
  def start_date; end
  def subresource_uris; end
  def to_s; end
  def uri; end
  def usage; end
  def usage_unit; end
end

class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::DailyList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(category: T.unsafe(nil), start_date: T.unsafe(nil), end_date: T.unsafe(nil), include_subaccounts: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(category: T.unsafe(nil), start_date: T.unsafe(nil), end_date: T.unsafe(nil), include_subaccounts: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(category: T.unsafe(nil), start_date: T.unsafe(nil), end_date: T.unsafe(nil), include_subaccounts: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::DailyPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::LastMonthInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil)); end

  def account_sid; end
  def api_version; end
  def as_of; end
  def category; end
  def count; end
  def count_unit; end
  def description; end
  def end_date; end
  def inspect; end
  def price; end
  def price_unit; end
  def start_date; end
  def subresource_uris; end
  def to_s; end
  def uri; end
  def usage; end
  def usage_unit; end
end

class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::LastMonthList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(category: T.unsafe(nil), start_date: T.unsafe(nil), end_date: T.unsafe(nil), include_subaccounts: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(category: T.unsafe(nil), start_date: T.unsafe(nil), end_date: T.unsafe(nil), include_subaccounts: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(category: T.unsafe(nil), start_date: T.unsafe(nil), end_date: T.unsafe(nil), include_subaccounts: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::LastMonthPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::MonthlyInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil)); end

  def account_sid; end
  def api_version; end
  def as_of; end
  def category; end
  def count; end
  def count_unit; end
  def description; end
  def end_date; end
  def inspect; end
  def price; end
  def price_unit; end
  def start_date; end
  def subresource_uris; end
  def to_s; end
  def uri; end
  def usage; end
  def usage_unit; end
end

class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::MonthlyList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(category: T.unsafe(nil), start_date: T.unsafe(nil), end_date: T.unsafe(nil), include_subaccounts: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(category: T.unsafe(nil), start_date: T.unsafe(nil), end_date: T.unsafe(nil), include_subaccounts: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(category: T.unsafe(nil), start_date: T.unsafe(nil), end_date: T.unsafe(nil), include_subaccounts: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::MonthlyPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::ThisMonthInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil)); end

  def account_sid; end
  def api_version; end
  def as_of; end
  def category; end
  def count; end
  def count_unit; end
  def description; end
  def end_date; end
  def inspect; end
  def price; end
  def price_unit; end
  def start_date; end
  def subresource_uris; end
  def to_s; end
  def uri; end
  def usage; end
  def usage_unit; end
end

class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::ThisMonthList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(category: T.unsafe(nil), start_date: T.unsafe(nil), end_date: T.unsafe(nil), include_subaccounts: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(category: T.unsafe(nil), start_date: T.unsafe(nil), end_date: T.unsafe(nil), include_subaccounts: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(category: T.unsafe(nil), start_date: T.unsafe(nil), end_date: T.unsafe(nil), include_subaccounts: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::ThisMonthPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::TodayInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil)); end

  def account_sid; end
  def api_version; end
  def as_of; end
  def category; end
  def count; end
  def count_unit; end
  def description; end
  def end_date; end
  def inspect; end
  def price; end
  def price_unit; end
  def start_date; end
  def subresource_uris; end
  def to_s; end
  def uri; end
  def usage; end
  def usage_unit; end
end

class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::TodayList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(category: T.unsafe(nil), start_date: T.unsafe(nil), end_date: T.unsafe(nil), include_subaccounts: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(category: T.unsafe(nil), start_date: T.unsafe(nil), end_date: T.unsafe(nil), include_subaccounts: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(category: T.unsafe(nil), start_date: T.unsafe(nil), end_date: T.unsafe(nil), include_subaccounts: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::TodayPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::YearlyInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil)); end

  def account_sid; end
  def api_version; end
  def as_of; end
  def category; end
  def count; end
  def count_unit; end
  def description; end
  def end_date; end
  def inspect; end
  def price; end
  def price_unit; end
  def start_date; end
  def subresource_uris; end
  def to_s; end
  def uri; end
  def usage; end
  def usage_unit; end
end

class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::YearlyList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(category: T.unsafe(nil), start_date: T.unsafe(nil), end_date: T.unsafe(nil), include_subaccounts: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(category: T.unsafe(nil), start_date: T.unsafe(nil), end_date: T.unsafe(nil), include_subaccounts: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(category: T.unsafe(nil), start_date: T.unsafe(nil), end_date: T.unsafe(nil), include_subaccounts: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::YearlyPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::YesterdayInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil)); end

  def account_sid; end
  def api_version; end
  def as_of; end
  def category; end
  def count; end
  def count_unit; end
  def description; end
  def end_date; end
  def inspect; end
  def price; end
  def price_unit; end
  def start_date; end
  def subresource_uris; end
  def to_s; end
  def uri; end
  def usage; end
  def usage_unit; end
end

class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::YesterdayList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(category: T.unsafe(nil), start_date: T.unsafe(nil), end_date: T.unsafe(nil), include_subaccounts: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(category: T.unsafe(nil), start_date: T.unsafe(nil), end_date: T.unsafe(nil), include_subaccounts: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(category: T.unsafe(nil), start_date: T.unsafe(nil), end_date: T.unsafe(nil), include_subaccounts: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::YesterdayPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::UsageList::TriggerContext < ::Twilio::REST::InstanceContext
  def initialize(version, account_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(callback_method: T.unsafe(nil), callback_url: T.unsafe(nil), friendly_name: T.unsafe(nil)); end
end

class Twilio::REST::Api::V2010::AccountContext::UsageList::TriggerInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def api_version; end
  def callback_method; end
  def callback_url; end
  def context; end
  def current_value; end
  def date_created; end
  def date_fired; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def recurring; end
  def sid; end
  def to_s; end
  def trigger_by; end
  def trigger_value; end
  def update(callback_method: T.unsafe(nil), callback_url: T.unsafe(nil), friendly_name: T.unsafe(nil)); end
  def uri; end
  def usage_category; end
  def usage_record_uri; end
end

class Twilio::REST::Api::V2010::AccountContext::UsageList::TriggerList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil)); end

  def create(callback_url: T.unsafe(nil), trigger_value: T.unsafe(nil), usage_category: T.unsafe(nil), callback_method: T.unsafe(nil), friendly_name: T.unsafe(nil), recurring: T.unsafe(nil), trigger_by: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(recurring: T.unsafe(nil), trigger_by: T.unsafe(nil), usage_category: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(recurring: T.unsafe(nil), trigger_by: T.unsafe(nil), usage_category: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(recurring: T.unsafe(nil), trigger_by: T.unsafe(nil), usage_category: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::UsageList::TriggerPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::UsagePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::ValidationRequestInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: T.unsafe(nil)); end

  def account_sid; end
  def call_sid; end
  def friendly_name; end
  def inspect; end
  def phone_number; end
  def to_s; end
  def validation_code; end
end

class Twilio::REST::Api::V2010::AccountContext::ValidationRequestList < ::Twilio::REST::ListResource
  def initialize(version, account_sid: T.unsafe(nil)); end

  def create(phone_number: T.unsafe(nil), friendly_name: T.unsafe(nil), call_delay: T.unsafe(nil), extension: T.unsafe(nil), status_callback: T.unsafe(nil), status_callback_method: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountContext::ValidationRequestPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def addresses; end
  def applications; end
  def auth_token; end
  def authorized_connect_apps; end
  def available_phone_numbers; end
  def balance; end
  def calls; end
  def conferences; end
  def connect_apps; end
  def context; end
  def date_created; end
  def date_updated; end
  def fetch; end
  def friendly_name; end
  def incoming_phone_numbers; end
  def inspect; end
  def keys; end
  def messages; end
  def new_keys; end
  def new_signing_keys; end
  def notifications; end
  def outgoing_caller_ids; end
  def owner_account_sid; end
  def queues; end
  def recordings; end
  def short_codes; end
  def sid; end
  def signing_keys; end
  def sip; end
  def status; end
  def subresource_uris; end
  def to_s; end
  def tokens; end
  def transcriptions; end
  def type; end
  def update(friendly_name: T.unsafe(nil), status: T.unsafe(nil)); end
  def uri; end
  def usage; end
  def validation_requests; end
end

class Twilio::REST::Api::V2010::AccountList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(friendly_name: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(friendly_name: T.unsafe(nil), status: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(friendly_name: T.unsafe(nil), status: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(friendly_name: T.unsafe(nil), status: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Api::V2010::AccountPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Autopilot < ::Twilio::REST::Domain
  def initialize(twilio); end

  def assistants(sid = T.unsafe(nil)); end
  def restore_assistant; end
  def to_s; end
  def v1; end
end

class Twilio::REST::Autopilot::V1 < ::Twilio::REST::Version
  def initialize(domain); end

  def assistants(sid = T.unsafe(nil)); end
  def restore_assistant; end
  def to_s; end
end

class Twilio::REST::Autopilot::V1::AssistantContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def defaults; end
  def delete; end
  def dialogues(sid = T.unsafe(nil)); end
  def fetch; end
  def field_types(sid = T.unsafe(nil)); end
  def inspect; end
  def model_builds(sid = T.unsafe(nil)); end
  def queries(sid = T.unsafe(nil)); end
  def style_sheet; end
  def tasks(sid = T.unsafe(nil)); end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), log_queries: T.unsafe(nil), unique_name: T.unsafe(nil), callback_url: T.unsafe(nil), callback_events: T.unsafe(nil), style_sheet: T.unsafe(nil), defaults: T.unsafe(nil), development_stage: T.unsafe(nil)); end
  def webhooks(sid = T.unsafe(nil)); end
end

class Twilio::REST::Autopilot::V1::AssistantContext::DefaultsContext < ::Twilio::REST::InstanceContext
  def initialize(version, assistant_sid); end

  def fetch; end
  def inspect; end
  def to_s; end
  def update(defaults: T.unsafe(nil)); end
end

class Twilio::REST::Autopilot::V1::AssistantContext::DefaultsInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, assistant_sid: T.unsafe(nil)); end

  def account_sid; end
  def assistant_sid; end
  def context; end
  def data; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(defaults: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Autopilot::V1::AssistantContext::DefaultsList < ::Twilio::REST::ListResource
  def initialize(version, assistant_sid: T.unsafe(nil)); end

  def to_s; end
end

class Twilio::REST::Autopilot::V1::AssistantContext::DefaultsPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Autopilot::V1::AssistantContext::DialogueContext < ::Twilio::REST::InstanceContext
  def initialize(version, assistant_sid, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Autopilot::V1::AssistantContext::DialogueInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, assistant_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def assistant_sid; end
  def context; end
  def data; end
  def fetch; end
  def inspect; end
  def sid; end
  def to_s; end
  def url; end
end

class Twilio::REST::Autopilot::V1::AssistantContext::DialogueList < ::Twilio::REST::ListResource
  def initialize(version, assistant_sid: T.unsafe(nil)); end

  def to_s; end
end

class Twilio::REST::Autopilot::V1::AssistantContext::DialoguePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Autopilot::V1::AssistantContext::FieldTypeContext < ::Twilio::REST::InstanceContext
  def initialize(version, assistant_sid, sid); end

  def delete; end
  def fetch; end
  def field_values(sid = T.unsafe(nil)); end
  def inspect; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), unique_name: T.unsafe(nil)); end
end

class Twilio::REST::Autopilot::V1::AssistantContext::FieldTypeContext::FieldValueContext < ::Twilio::REST::InstanceContext
  def initialize(version, assistant_sid, field_type_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Autopilot::V1::AssistantContext::FieldTypeContext::FieldValueInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, assistant_sid: T.unsafe(nil), field_type_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def assistant_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def field_type_sid; end
  def inspect; end
  def language; end
  def sid; end
  def synonym_of; end
  def to_s; end
  def url; end
  def value; end
end

class Twilio::REST::Autopilot::V1::AssistantContext::FieldTypeContext::FieldValueList < ::Twilio::REST::ListResource
  def initialize(version, assistant_sid: T.unsafe(nil), field_type_sid: T.unsafe(nil)); end

  def create(language: T.unsafe(nil), value: T.unsafe(nil), synonym_of: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(language: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(language: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(language: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Autopilot::V1::AssistantContext::FieldTypeContext::FieldValuePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Autopilot::V1::AssistantContext::FieldTypeInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, assistant_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def assistant_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def field_values; end
  def friendly_name; end
  def inspect; end
  def links; end
  def sid; end
  def to_s; end
  def unique_name; end
  def update(friendly_name: T.unsafe(nil), unique_name: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Autopilot::V1::AssistantContext::FieldTypeList < ::Twilio::REST::ListResource
  def initialize(version, assistant_sid: T.unsafe(nil)); end

  def create(unique_name: T.unsafe(nil), friendly_name: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Autopilot::V1::AssistantContext::FieldTypePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Autopilot::V1::AssistantContext::ModelBuildContext < ::Twilio::REST::InstanceContext
  def initialize(version, assistant_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(unique_name: T.unsafe(nil)); end
end

class Twilio::REST::Autopilot::V1::AssistantContext::ModelBuildInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, assistant_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def assistant_sid; end
  def build_duration; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def error_code; end
  def fetch; end
  def inspect; end
  def sid; end
  def status; end
  def to_s; end
  def unique_name; end
  def update(unique_name: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Autopilot::V1::AssistantContext::ModelBuildList < ::Twilio::REST::ListResource
  def initialize(version, assistant_sid: T.unsafe(nil)); end

  def create(status_callback: T.unsafe(nil), unique_name: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Autopilot::V1::AssistantContext::ModelBuildPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Autopilot::V1::AssistantContext::QueryContext < ::Twilio::REST::InstanceContext
  def initialize(version, assistant_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(sample_sid: T.unsafe(nil), status: T.unsafe(nil)); end
end

class Twilio::REST::Autopilot::V1::AssistantContext::QueryInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, assistant_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def assistant_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def dialogue_sid; end
  def fetch; end
  def inspect; end
  def language; end
  def model_build_sid; end
  def query; end
  def results; end
  def sample_sid; end
  def sid; end
  def source_channel; end
  def status; end
  def to_s; end
  def update(sample_sid: T.unsafe(nil), status: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Autopilot::V1::AssistantContext::QueryList < ::Twilio::REST::ListResource
  def initialize(version, assistant_sid: T.unsafe(nil)); end

  def create(language: T.unsafe(nil), query: T.unsafe(nil), tasks: T.unsafe(nil), model_build: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(language: T.unsafe(nil), model_build: T.unsafe(nil), status: T.unsafe(nil), dialogue_sid: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(language: T.unsafe(nil), model_build: T.unsafe(nil), status: T.unsafe(nil), dialogue_sid: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(language: T.unsafe(nil), model_build: T.unsafe(nil), status: T.unsafe(nil), dialogue_sid: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Autopilot::V1::AssistantContext::QueryPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Autopilot::V1::AssistantContext::StyleSheetContext < ::Twilio::REST::InstanceContext
  def initialize(version, assistant_sid); end

  def fetch; end
  def inspect; end
  def to_s; end
  def update(style_sheet: T.unsafe(nil)); end
end

class Twilio::REST::Autopilot::V1::AssistantContext::StyleSheetInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, assistant_sid: T.unsafe(nil)); end

  def account_sid; end
  def assistant_sid; end
  def context; end
  def data; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(style_sheet: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Autopilot::V1::AssistantContext::StyleSheetList < ::Twilio::REST::ListResource
  def initialize(version, assistant_sid: T.unsafe(nil)); end

  def to_s; end
end

class Twilio::REST::Autopilot::V1::AssistantContext::StyleSheetPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Autopilot::V1::AssistantContext::TaskContext < ::Twilio::REST::InstanceContext
  def initialize(version, assistant_sid, sid); end

  def delete; end
  def fetch; end
  def fields(sid = T.unsafe(nil)); end
  def inspect; end
  def samples(sid = T.unsafe(nil)); end
  def statistics; end
  def task_actions; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), unique_name: T.unsafe(nil), actions: T.unsafe(nil), actions_url: T.unsafe(nil)); end
end

class Twilio::REST::Autopilot::V1::AssistantContext::TaskContext::FieldContext < ::Twilio::REST::InstanceContext
  def initialize(version, assistant_sid, task_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Autopilot::V1::AssistantContext::TaskContext::FieldInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, assistant_sid: T.unsafe(nil), task_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def assistant_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def field_type; end
  def inspect; end
  def sid; end
  def task_sid; end
  def to_s; end
  def unique_name; end
  def url; end
end

class Twilio::REST::Autopilot::V1::AssistantContext::TaskContext::FieldList < ::Twilio::REST::ListResource
  def initialize(version, assistant_sid: T.unsafe(nil), task_sid: T.unsafe(nil)); end

  def create(field_type: T.unsafe(nil), unique_name: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Autopilot::V1::AssistantContext::TaskContext::FieldPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Autopilot::V1::AssistantContext::TaskContext::SampleContext < ::Twilio::REST::InstanceContext
  def initialize(version, assistant_sid, task_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(language: T.unsafe(nil), tagged_text: T.unsafe(nil), source_channel: T.unsafe(nil)); end
end

class Twilio::REST::Autopilot::V1::AssistantContext::TaskContext::SampleInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, assistant_sid: T.unsafe(nil), task_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def assistant_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def inspect; end
  def language; end
  def sid; end
  def source_channel; end
  def tagged_text; end
  def task_sid; end
  def to_s; end
  def update(language: T.unsafe(nil), tagged_text: T.unsafe(nil), source_channel: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Autopilot::V1::AssistantContext::TaskContext::SampleList < ::Twilio::REST::ListResource
  def initialize(version, assistant_sid: T.unsafe(nil), task_sid: T.unsafe(nil)); end

  def create(language: T.unsafe(nil), tagged_text: T.unsafe(nil), source_channel: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(language: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(language: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(language: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Autopilot::V1::AssistantContext::TaskContext::SamplePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Autopilot::V1::AssistantContext::TaskContext::TaskActionsContext < ::Twilio::REST::InstanceContext
  def initialize(version, assistant_sid, task_sid); end

  def fetch; end
  def inspect; end
  def to_s; end
  def update(actions: T.unsafe(nil)); end
end

class Twilio::REST::Autopilot::V1::AssistantContext::TaskContext::TaskActionsInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, assistant_sid: T.unsafe(nil), task_sid: T.unsafe(nil)); end

  def account_sid; end
  def assistant_sid; end
  def context; end
  def data; end
  def fetch; end
  def inspect; end
  def task_sid; end
  def to_s; end
  def update(actions: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Autopilot::V1::AssistantContext::TaskContext::TaskActionsList < ::Twilio::REST::ListResource
  def initialize(version, assistant_sid: T.unsafe(nil), task_sid: T.unsafe(nil)); end

  def to_s; end
end

class Twilio::REST::Autopilot::V1::AssistantContext::TaskContext::TaskActionsPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Autopilot::V1::AssistantContext::TaskContext::TaskStatisticsContext < ::Twilio::REST::InstanceContext
  def initialize(version, assistant_sid, task_sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Autopilot::V1::AssistantContext::TaskContext::TaskStatisticsInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, assistant_sid: T.unsafe(nil), task_sid: T.unsafe(nil)); end

  def account_sid; end
  def assistant_sid; end
  def context; end
  def fetch; end
  def fields_count; end
  def inspect; end
  def samples_count; end
  def task_sid; end
  def to_s; end
  def url; end
end

class Twilio::REST::Autopilot::V1::AssistantContext::TaskContext::TaskStatisticsList < ::Twilio::REST::ListResource
  def initialize(version, assistant_sid: T.unsafe(nil), task_sid: T.unsafe(nil)); end

  def to_s; end
end

class Twilio::REST::Autopilot::V1::AssistantContext::TaskContext::TaskStatisticsPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Autopilot::V1::AssistantContext::TaskInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, assistant_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def actions_url; end
  def assistant_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def fields; end
  def friendly_name; end
  def inspect; end
  def links; end
  def samples; end
  def sid; end
  def statistics; end
  def task_actions; end
  def to_s; end
  def unique_name; end
  def update(friendly_name: T.unsafe(nil), unique_name: T.unsafe(nil), actions: T.unsafe(nil), actions_url: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Autopilot::V1::AssistantContext::TaskList < ::Twilio::REST::ListResource
  def initialize(version, assistant_sid: T.unsafe(nil)); end

  def create(unique_name: T.unsafe(nil), friendly_name: T.unsafe(nil), actions: T.unsafe(nil), actions_url: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Autopilot::V1::AssistantContext::TaskPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Autopilot::V1::AssistantContext::WebhookContext < ::Twilio::REST::InstanceContext
  def initialize(version, assistant_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(unique_name: T.unsafe(nil), events: T.unsafe(nil), webhook_url: T.unsafe(nil), webhook_method: T.unsafe(nil)); end
end

class Twilio::REST::Autopilot::V1::AssistantContext::WebhookInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, assistant_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def assistant_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def events; end
  def fetch; end
  def inspect; end
  def sid; end
  def to_s; end
  def unique_name; end
  def update(unique_name: T.unsafe(nil), events: T.unsafe(nil), webhook_url: T.unsafe(nil), webhook_method: T.unsafe(nil)); end
  def url; end
  def webhook_method; end
  def webhook_url; end
end

class Twilio::REST::Autopilot::V1::AssistantContext::WebhookList < ::Twilio::REST::ListResource
  def initialize(version, assistant_sid: T.unsafe(nil)); end

  def create(unique_name: T.unsafe(nil), events: T.unsafe(nil), webhook_url: T.unsafe(nil), webhook_method: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Autopilot::V1::AssistantContext::WebhookPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Autopilot::V1::AssistantInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def callback_events; end
  def callback_url; end
  def context; end
  def date_created; end
  def date_updated; end
  def defaults; end
  def delete; end
  def development_stage; end
  def dialogues; end
  def fetch; end
  def field_types; end
  def friendly_name; end
  def inspect; end
  def latest_model_build_sid; end
  def links; end
  def log_queries; end
  def model_builds; end
  def needs_model_build; end
  def queries; end
  def sid; end
  def style_sheet; end
  def tasks; end
  def to_s; end
  def unique_name; end
  def update(friendly_name: T.unsafe(nil), log_queries: T.unsafe(nil), unique_name: T.unsafe(nil), callback_url: T.unsafe(nil), callback_events: T.unsafe(nil), style_sheet: T.unsafe(nil), defaults: T.unsafe(nil), development_stage: T.unsafe(nil)); end
  def url; end
  def webhooks; end
end

class Twilio::REST::Autopilot::V1::AssistantList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(friendly_name: T.unsafe(nil), log_queries: T.unsafe(nil), unique_name: T.unsafe(nil), callback_url: T.unsafe(nil), callback_events: T.unsafe(nil), style_sheet: T.unsafe(nil), defaults: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Autopilot::V1::AssistantPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Autopilot::V1::RestoreAssistantInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload); end

  def account_sid; end
  def callback_events; end
  def callback_url; end
  def date_created; end
  def date_updated; end
  def development_stage; end
  def friendly_name; end
  def inspect; end
  def latest_model_build_sid; end
  def log_queries; end
  def needs_model_build; end
  def sid; end
  def to_s; end
  def unique_name; end
end

class Twilio::REST::Autopilot::V1::RestoreAssistantList < ::Twilio::REST::ListResource
  def initialize(version); end

  def to_s; end
  def update(assistant: T.unsafe(nil)); end
end

class Twilio::REST::Autopilot::V1::RestoreAssistantPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::BaseClient < ::Twilio::REST::ObsoleteClient; end

class Twilio::REST::Bulkexports < ::Twilio::REST::Domain
  def initialize(twilio); end

  def export_configuration(resource_type = T.unsafe(nil)); end
  def exports(resource_type = T.unsafe(nil)); end
  def to_s; end
  def v1; end
end

class Twilio::REST::Bulkexports::V1 < ::Twilio::REST::Version
  def initialize(domain); end

  def export_configuration(resource_type = T.unsafe(nil)); end
  def exports(resource_type = T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Bulkexports::V1::ExportConfigurationContext < ::Twilio::REST::InstanceContext
  def initialize(version, resource_type); end

  def fetch; end
  def inspect; end
  def to_s; end
  def update(enabled: T.unsafe(nil), webhook_url: T.unsafe(nil), webhook_method: T.unsafe(nil)); end
end

class Twilio::REST::Bulkexports::V1::ExportConfigurationInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, resource_type: T.unsafe(nil)); end

  def context; end
  def enabled; end
  def fetch; end
  def inspect; end
  def resource_type; end
  def to_s; end
  def update(enabled: T.unsafe(nil), webhook_url: T.unsafe(nil), webhook_method: T.unsafe(nil)); end
  def url; end
  def webhook_method; end
  def webhook_url; end
end

class Twilio::REST::Bulkexports::V1::ExportConfigurationList < ::Twilio::REST::ListResource
  def initialize(version); end

  def to_s; end
end

class Twilio::REST::Bulkexports::V1::ExportConfigurationPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Bulkexports::V1::ExportContext < ::Twilio::REST::InstanceContext
  def initialize(version, resource_type); end

  def days(day = T.unsafe(nil)); end
  def export_custom_jobs; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Bulkexports::V1::ExportContext::DayContext < ::Twilio::REST::InstanceContext
  def initialize(version, resource_type, day); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Bulkexports::V1::ExportContext::DayInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, resource_type: T.unsafe(nil), day: T.unsafe(nil)); end

  def context; end
  def create_date; end
  def day; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def redirect_to; end
  def resource_type; end
  def size; end
  def to_s; end
end

class Twilio::REST::Bulkexports::V1::ExportContext::DayList < ::Twilio::REST::ListResource
  def initialize(version, resource_type: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Bulkexports::V1::ExportContext::DayPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Bulkexports::V1::ExportContext::ExportCustomJobInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, resource_type: T.unsafe(nil)); end

  def details; end
  def email; end
  def end_day; end
  def estimated_completion_time; end
  def friendly_name; end
  def inspect; end
  def job_queue_position; end
  def job_sid; end
  def resource_type; end
  def start_day; end
  def to_s; end
  def webhook_method; end
  def webhook_url; end
end

class Twilio::REST::Bulkexports::V1::ExportContext::ExportCustomJobList < ::Twilio::REST::ListResource
  def initialize(version, resource_type: T.unsafe(nil)); end

  def create(start_day: T.unsafe(nil), end_day: T.unsafe(nil), friendly_name: T.unsafe(nil), webhook_url: T.unsafe(nil), webhook_method: T.unsafe(nil), email: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Bulkexports::V1::ExportContext::ExportCustomJobPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Bulkexports::V1::ExportInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, resource_type: T.unsafe(nil)); end

  def context; end
  def days; end
  def export_custom_jobs; end
  def fetch; end
  def inspect; end
  def links; end
  def resource_type; end
  def to_s; end
  def url; end
end

class Twilio::REST::Bulkexports::V1::ExportList < ::Twilio::REST::ListResource
  def initialize(version); end

  def jobs(job_sid = T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Bulkexports::V1::ExportList::JobContext < ::Twilio::REST::InstanceContext
  def initialize(version, job_sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Bulkexports::V1::ExportList::JobInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, job_sid: T.unsafe(nil)); end

  def context; end
  def delete; end
  def details; end
  def email; end
  def end_day; end
  def estimated_completion_time; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def job_queue_position; end
  def job_sid; end
  def resource_type; end
  def start_day; end
  def to_s; end
  def url; end
  def webhook_method; end
  def webhook_url; end
end

class Twilio::REST::Bulkexports::V1::ExportList::JobList < ::Twilio::REST::ListResource
  def initialize(version); end

  def to_s; end
end

class Twilio::REST::Bulkexports::V1::ExportList::JobPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Bulkexports::V1::ExportPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Chat < ::Twilio::REST::Domain
  def initialize(twilio); end

  def channels(service_sid = T.unsafe(nil), sid = T.unsafe(nil)); end
  def credentials(sid = T.unsafe(nil)); end
  def services(sid = T.unsafe(nil)); end
  def to_s; end
  def v1; end
  def v2; end
  def v3; end
end

class Twilio::REST::Chat::V1 < ::Twilio::REST::Version
  def initialize(domain); end

  def credentials(sid = T.unsafe(nil)); end
  def services(sid = T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Chat::V1::CredentialContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), certificate: T.unsafe(nil), private_key: T.unsafe(nil), sandbox: T.unsafe(nil), api_key: T.unsafe(nil), secret: T.unsafe(nil)); end
end

class Twilio::REST::Chat::V1::CredentialInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def sandbox; end
  def sid; end
  def to_s; end
  def type; end
  def update(friendly_name: T.unsafe(nil), certificate: T.unsafe(nil), private_key: T.unsafe(nil), sandbox: T.unsafe(nil), api_key: T.unsafe(nil), secret: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Chat::V1::CredentialList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(type: T.unsafe(nil), friendly_name: T.unsafe(nil), certificate: T.unsafe(nil), private_key: T.unsafe(nil), sandbox: T.unsafe(nil), api_key: T.unsafe(nil), secret: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Chat::V1::CredentialPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Chat::V1::ServiceContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def channels(sid = T.unsafe(nil)); end
  def delete; end
  def fetch; end
  def inspect; end
  def roles(sid = T.unsafe(nil)); end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), default_service_role_sid: T.unsafe(nil), default_channel_role_sid: T.unsafe(nil), default_channel_creator_role_sid: T.unsafe(nil), read_status_enabled: T.unsafe(nil), reachability_enabled: T.unsafe(nil), typing_indicator_timeout: T.unsafe(nil), consumption_report_interval: T.unsafe(nil), notifications_new_message_enabled: T.unsafe(nil), notifications_new_message_template: T.unsafe(nil), notifications_added_to_channel_enabled: T.unsafe(nil), notifications_added_to_channel_template: T.unsafe(nil), notifications_removed_from_channel_enabled: T.unsafe(nil), notifications_removed_from_channel_template: T.unsafe(nil), notifications_invited_to_channel_enabled: T.unsafe(nil), notifications_invited_to_channel_template: T.unsafe(nil), pre_webhook_url: T.unsafe(nil), post_webhook_url: T.unsafe(nil), webhook_method: T.unsafe(nil), webhook_filters: T.unsafe(nil), webhooks_on_message_send_url: T.unsafe(nil), webhooks_on_message_send_method: T.unsafe(nil), webhooks_on_message_update_url: T.unsafe(nil), webhooks_on_message_update_method: T.unsafe(nil), webhooks_on_message_remove_url: T.unsafe(nil), webhooks_on_message_remove_method: T.unsafe(nil), webhooks_on_channel_add_url: T.unsafe(nil), webhooks_on_channel_add_method: T.unsafe(nil), webhooks_on_channel_destroy_url: T.unsafe(nil), webhooks_on_channel_destroy_method: T.unsafe(nil), webhooks_on_channel_update_url: T.unsafe(nil), webhooks_on_channel_update_method: T.unsafe(nil), webhooks_on_member_add_url: T.unsafe(nil), webhooks_on_member_add_method: T.unsafe(nil), webhooks_on_member_remove_url: T.unsafe(nil), webhooks_on_member_remove_method: T.unsafe(nil), webhooks_on_message_sent_url: T.unsafe(nil), webhooks_on_message_sent_method: T.unsafe(nil), webhooks_on_message_updated_url: T.unsafe(nil), webhooks_on_message_updated_method: T.unsafe(nil), webhooks_on_message_removed_url: T.unsafe(nil), webhooks_on_message_removed_method: T.unsafe(nil), webhooks_on_channel_added_url: T.unsafe(nil), webhooks_on_channel_added_method: T.unsafe(nil), webhooks_on_channel_destroyed_url: T.unsafe(nil), webhooks_on_channel_destroyed_method: T.unsafe(nil), webhooks_on_channel_updated_url: T.unsafe(nil), webhooks_on_channel_updated_method: T.unsafe(nil), webhooks_on_member_added_url: T.unsafe(nil), webhooks_on_member_added_method: T.unsafe(nil), webhooks_on_member_removed_url: T.unsafe(nil), webhooks_on_member_removed_method: T.unsafe(nil), limits_channel_members: T.unsafe(nil), limits_user_channels: T.unsafe(nil)); end
  def users(sid = T.unsafe(nil)); end
end

class Twilio::REST::Chat::V1::ServiceContext::ChannelContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def invites(sid = T.unsafe(nil)); end
  def members(sid = T.unsafe(nil)); end
  def messages(sid = T.unsafe(nil)); end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), unique_name: T.unsafe(nil), attributes: T.unsafe(nil)); end
end

class Twilio::REST::Chat::V1::ServiceContext::ChannelContext::InviteContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, channel_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Chat::V1::ServiceContext::ChannelContext::InviteInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), channel_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def channel_sid; end
  def context; end
  def created_by; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def identity; end
  def inspect; end
  def role_sid; end
  def service_sid; end
  def sid; end
  def to_s; end
  def url; end
end

class Twilio::REST::Chat::V1::ServiceContext::ChannelContext::InviteList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil), channel_sid: T.unsafe(nil)); end

  def create(identity: T.unsafe(nil), role_sid: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(identity: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(identity: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(identity: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Chat::V1::ServiceContext::ChannelContext::InvitePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Chat::V1::ServiceContext::ChannelContext::MemberContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, channel_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(role_sid: T.unsafe(nil), last_consumed_message_index: T.unsafe(nil)); end
end

class Twilio::REST::Chat::V1::ServiceContext::ChannelContext::MemberInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), channel_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def channel_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def identity; end
  def inspect; end
  def last_consumed_message_index; end
  def last_consumption_timestamp; end
  def role_sid; end
  def service_sid; end
  def sid; end
  def to_s; end
  def update(role_sid: T.unsafe(nil), last_consumed_message_index: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Chat::V1::ServiceContext::ChannelContext::MemberList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil), channel_sid: T.unsafe(nil)); end

  def create(identity: T.unsafe(nil), role_sid: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(identity: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(identity: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(identity: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Chat::V1::ServiceContext::ChannelContext::MemberPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Chat::V1::ServiceContext::ChannelContext::MessageContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, channel_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(body: T.unsafe(nil), attributes: T.unsafe(nil)); end
end

class Twilio::REST::Chat::V1::ServiceContext::ChannelContext::MessageInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), channel_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def attributes; end
  def body; end
  def channel_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def from; end
  def index; end
  def inspect; end
  def service_sid; end
  def sid; end
  def to; end
  def to_s; end
  def update(body: T.unsafe(nil), attributes: T.unsafe(nil)); end
  def url; end
  def was_edited; end
end

class Twilio::REST::Chat::V1::ServiceContext::ChannelContext::MessageList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil), channel_sid: T.unsafe(nil)); end

  def create(body: T.unsafe(nil), from: T.unsafe(nil), attributes: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(order: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(order: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(order: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Chat::V1::ServiceContext::ChannelContext::MessagePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Chat::V1::ServiceContext::ChannelInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def attributes; end
  def context; end
  def created_by; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def invites; end
  def links; end
  def members; end
  def members_count; end
  def messages; end
  def messages_count; end
  def service_sid; end
  def sid; end
  def to_s; end
  def type; end
  def unique_name; end
  def update(friendly_name: T.unsafe(nil), unique_name: T.unsafe(nil), attributes: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Chat::V1::ServiceContext::ChannelList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil)); end

  def create(friendly_name: T.unsafe(nil), unique_name: T.unsafe(nil), attributes: T.unsafe(nil), type: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(type: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(type: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(type: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Chat::V1::ServiceContext::ChannelPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Chat::V1::ServiceContext::RoleContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(permission: T.unsafe(nil)); end
end

class Twilio::REST::Chat::V1::ServiceContext::RoleInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def permissions; end
  def service_sid; end
  def sid; end
  def to_s; end
  def type; end
  def update(permission: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Chat::V1::ServiceContext::RoleList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil)); end

  def create(friendly_name: T.unsafe(nil), type: T.unsafe(nil), permission: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Chat::V1::ServiceContext::RolePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Chat::V1::ServiceContext::UserContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(role_sid: T.unsafe(nil), attributes: T.unsafe(nil), friendly_name: T.unsafe(nil)); end
  def user_channels; end
end

class Twilio::REST::Chat::V1::ServiceContext::UserContext::UserChannelInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), user_sid: T.unsafe(nil)); end

  def account_sid; end
  def channel_sid; end
  def inspect; end
  def last_consumed_message_index; end
  def links; end
  def member_sid; end
  def service_sid; end
  def status; end
  def to_s; end
  def unread_messages_count; end
end

class Twilio::REST::Chat::V1::ServiceContext::UserContext::UserChannelList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil), user_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Chat::V1::ServiceContext::UserContext::UserChannelPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Chat::V1::ServiceContext::UserInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def attributes; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def identity; end
  def inspect; end
  def is_notifiable; end
  def is_online; end
  def joined_channels_count; end
  def links; end
  def role_sid; end
  def service_sid; end
  def sid; end
  def to_s; end
  def update(role_sid: T.unsafe(nil), attributes: T.unsafe(nil), friendly_name: T.unsafe(nil)); end
  def url; end
  def user_channels; end
end

class Twilio::REST::Chat::V1::ServiceContext::UserList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil)); end

  def create(identity: T.unsafe(nil), role_sid: T.unsafe(nil), attributes: T.unsafe(nil), friendly_name: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Chat::V1::ServiceContext::UserPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Chat::V1::ServiceInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def channels; end
  def consumption_report_interval; end
  def context; end
  def date_created; end
  def date_updated; end
  def default_channel_creator_role_sid; end
  def default_channel_role_sid; end
  def default_service_role_sid; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def limits; end
  def links; end
  def notifications; end
  def post_webhook_url; end
  def pre_webhook_url; end
  def reachability_enabled; end
  def read_status_enabled; end
  def roles; end
  def sid; end
  def to_s; end
  def typing_indicator_timeout; end
  def update(friendly_name: T.unsafe(nil), default_service_role_sid: T.unsafe(nil), default_channel_role_sid: T.unsafe(nil), default_channel_creator_role_sid: T.unsafe(nil), read_status_enabled: T.unsafe(nil), reachability_enabled: T.unsafe(nil), typing_indicator_timeout: T.unsafe(nil), consumption_report_interval: T.unsafe(nil), notifications_new_message_enabled: T.unsafe(nil), notifications_new_message_template: T.unsafe(nil), notifications_added_to_channel_enabled: T.unsafe(nil), notifications_added_to_channel_template: T.unsafe(nil), notifications_removed_from_channel_enabled: T.unsafe(nil), notifications_removed_from_channel_template: T.unsafe(nil), notifications_invited_to_channel_enabled: T.unsafe(nil), notifications_invited_to_channel_template: T.unsafe(nil), pre_webhook_url: T.unsafe(nil), post_webhook_url: T.unsafe(nil), webhook_method: T.unsafe(nil), webhook_filters: T.unsafe(nil), webhooks_on_message_send_url: T.unsafe(nil), webhooks_on_message_send_method: T.unsafe(nil), webhooks_on_message_update_url: T.unsafe(nil), webhooks_on_message_update_method: T.unsafe(nil), webhooks_on_message_remove_url: T.unsafe(nil), webhooks_on_message_remove_method: T.unsafe(nil), webhooks_on_channel_add_url: T.unsafe(nil), webhooks_on_channel_add_method: T.unsafe(nil), webhooks_on_channel_destroy_url: T.unsafe(nil), webhooks_on_channel_destroy_method: T.unsafe(nil), webhooks_on_channel_update_url: T.unsafe(nil), webhooks_on_channel_update_method: T.unsafe(nil), webhooks_on_member_add_url: T.unsafe(nil), webhooks_on_member_add_method: T.unsafe(nil), webhooks_on_member_remove_url: T.unsafe(nil), webhooks_on_member_remove_method: T.unsafe(nil), webhooks_on_message_sent_url: T.unsafe(nil), webhooks_on_message_sent_method: T.unsafe(nil), webhooks_on_message_updated_url: T.unsafe(nil), webhooks_on_message_updated_method: T.unsafe(nil), webhooks_on_message_removed_url: T.unsafe(nil), webhooks_on_message_removed_method: T.unsafe(nil), webhooks_on_channel_added_url: T.unsafe(nil), webhooks_on_channel_added_method: T.unsafe(nil), webhooks_on_channel_destroyed_url: T.unsafe(nil), webhooks_on_channel_destroyed_method: T.unsafe(nil), webhooks_on_channel_updated_url: T.unsafe(nil), webhooks_on_channel_updated_method: T.unsafe(nil), webhooks_on_member_added_url: T.unsafe(nil), webhooks_on_member_added_method: T.unsafe(nil), webhooks_on_member_removed_url: T.unsafe(nil), webhooks_on_member_removed_method: T.unsafe(nil), limits_channel_members: T.unsafe(nil), limits_user_channels: T.unsafe(nil)); end
  def url; end
  def users; end
  def webhook_filters; end
  def webhook_method; end
  def webhooks; end
end

class Twilio::REST::Chat::V1::ServiceList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(friendly_name: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Chat::V1::ServicePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Chat::V2 < ::Twilio::REST::Version
  def initialize(domain); end

  def credentials(sid = T.unsafe(nil)); end
  def services(sid = T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Chat::V2::CredentialContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), certificate: T.unsafe(nil), private_key: T.unsafe(nil), sandbox: T.unsafe(nil), api_key: T.unsafe(nil), secret: T.unsafe(nil)); end
end

class Twilio::REST::Chat::V2::CredentialInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def sandbox; end
  def sid; end
  def to_s; end
  def type; end
  def update(friendly_name: T.unsafe(nil), certificate: T.unsafe(nil), private_key: T.unsafe(nil), sandbox: T.unsafe(nil), api_key: T.unsafe(nil), secret: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Chat::V2::CredentialList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(type: T.unsafe(nil), friendly_name: T.unsafe(nil), certificate: T.unsafe(nil), private_key: T.unsafe(nil), sandbox: T.unsafe(nil), api_key: T.unsafe(nil), secret: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Chat::V2::CredentialPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Chat::V2::ServiceContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def bindings(sid = T.unsafe(nil)); end
  def channels(sid = T.unsafe(nil)); end
  def delete; end
  def fetch; end
  def inspect; end
  def roles(sid = T.unsafe(nil)); end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), default_service_role_sid: T.unsafe(nil), default_channel_role_sid: T.unsafe(nil), default_channel_creator_role_sid: T.unsafe(nil), read_status_enabled: T.unsafe(nil), reachability_enabled: T.unsafe(nil), typing_indicator_timeout: T.unsafe(nil), consumption_report_interval: T.unsafe(nil), notifications_new_message_enabled: T.unsafe(nil), notifications_new_message_template: T.unsafe(nil), notifications_new_message_sound: T.unsafe(nil), notifications_new_message_badge_count_enabled: T.unsafe(nil), notifications_added_to_channel_enabled: T.unsafe(nil), notifications_added_to_channel_template: T.unsafe(nil), notifications_added_to_channel_sound: T.unsafe(nil), notifications_removed_from_channel_enabled: T.unsafe(nil), notifications_removed_from_channel_template: T.unsafe(nil), notifications_removed_from_channel_sound: T.unsafe(nil), notifications_invited_to_channel_enabled: T.unsafe(nil), notifications_invited_to_channel_template: T.unsafe(nil), notifications_invited_to_channel_sound: T.unsafe(nil), pre_webhook_url: T.unsafe(nil), post_webhook_url: T.unsafe(nil), webhook_method: T.unsafe(nil), webhook_filters: T.unsafe(nil), limits_channel_members: T.unsafe(nil), limits_user_channels: T.unsafe(nil), media_compatibility_message: T.unsafe(nil), pre_webhook_retry_count: T.unsafe(nil), post_webhook_retry_count: T.unsafe(nil), notifications_log_enabled: T.unsafe(nil)); end
  def users(sid = T.unsafe(nil)); end
end

class Twilio::REST::Chat::V2::ServiceContext::BindingContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Chat::V2::ServiceContext::BindingInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def binding_type; end
  def context; end
  def credential_sid; end
  def date_created; end
  def date_updated; end
  def delete; end
  def endpoint; end
  def fetch; end
  def identity; end
  def inspect; end
  def links; end
  def message_types; end
  def service_sid; end
  def sid; end
  def to_s; end
  def url; end
end

class Twilio::REST::Chat::V2::ServiceContext::BindingList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(binding_type: T.unsafe(nil), identity: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(binding_type: T.unsafe(nil), identity: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(binding_type: T.unsafe(nil), identity: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Chat::V2::ServiceContext::BindingPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Chat::V2::ServiceContext::ChannelContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, sid); end

  def delete(x_twilio_webhook_enabled: T.unsafe(nil)); end
  def fetch; end
  def inspect; end
  def invites(sid = T.unsafe(nil)); end
  def members(sid = T.unsafe(nil)); end
  def messages(sid = T.unsafe(nil)); end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), unique_name: T.unsafe(nil), attributes: T.unsafe(nil), date_created: T.unsafe(nil), date_updated: T.unsafe(nil), created_by: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
  def webhooks(sid = T.unsafe(nil)); end
end

class Twilio::REST::Chat::V2::ServiceContext::ChannelContext::InviteContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, channel_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Chat::V2::ServiceContext::ChannelContext::InviteInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), channel_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def channel_sid; end
  def context; end
  def created_by; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def identity; end
  def inspect; end
  def role_sid; end
  def service_sid; end
  def sid; end
  def to_s; end
  def url; end
end

class Twilio::REST::Chat::V2::ServiceContext::ChannelContext::InviteList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil), channel_sid: T.unsafe(nil)); end

  def create(identity: T.unsafe(nil), role_sid: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(identity: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(identity: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(identity: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Chat::V2::ServiceContext::ChannelContext::InvitePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Chat::V2::ServiceContext::ChannelContext::MemberContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, channel_sid, sid); end

  def delete(x_twilio_webhook_enabled: T.unsafe(nil)); end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(role_sid: T.unsafe(nil), last_consumed_message_index: T.unsafe(nil), last_consumption_timestamp: T.unsafe(nil), date_created: T.unsafe(nil), date_updated: T.unsafe(nil), attributes: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
end

class Twilio::REST::Chat::V2::ServiceContext::ChannelContext::MemberInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), channel_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def attributes; end
  def channel_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete(x_twilio_webhook_enabled: T.unsafe(nil)); end
  def fetch; end
  def identity; end
  def inspect; end
  def last_consumed_message_index; end
  def last_consumption_timestamp; end
  def role_sid; end
  def service_sid; end
  def sid; end
  def to_s; end
  def update(role_sid: T.unsafe(nil), last_consumed_message_index: T.unsafe(nil), last_consumption_timestamp: T.unsafe(nil), date_created: T.unsafe(nil), date_updated: T.unsafe(nil), attributes: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Chat::V2::ServiceContext::ChannelContext::MemberList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil), channel_sid: T.unsafe(nil)); end

  def create(identity: T.unsafe(nil), role_sid: T.unsafe(nil), last_consumed_message_index: T.unsafe(nil), last_consumption_timestamp: T.unsafe(nil), date_created: T.unsafe(nil), date_updated: T.unsafe(nil), attributes: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(identity: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(identity: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(identity: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Chat::V2::ServiceContext::ChannelContext::MemberPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Chat::V2::ServiceContext::ChannelContext::MessageContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, channel_sid, sid); end

  def delete(x_twilio_webhook_enabled: T.unsafe(nil)); end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(body: T.unsafe(nil), attributes: T.unsafe(nil), date_created: T.unsafe(nil), date_updated: T.unsafe(nil), last_updated_by: T.unsafe(nil), from: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
end

class Twilio::REST::Chat::V2::ServiceContext::ChannelContext::MessageInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), channel_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def attributes; end
  def body; end
  def channel_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete(x_twilio_webhook_enabled: T.unsafe(nil)); end
  def fetch; end
  def from; end
  def index; end
  def inspect; end
  def last_updated_by; end
  def media; end
  def service_sid; end
  def sid; end
  def to; end
  def to_s; end
  def type; end
  def update(body: T.unsafe(nil), attributes: T.unsafe(nil), date_created: T.unsafe(nil), date_updated: T.unsafe(nil), last_updated_by: T.unsafe(nil), from: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
  def url; end
  def was_edited; end
end

class Twilio::REST::Chat::V2::ServiceContext::ChannelContext::MessageList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil), channel_sid: T.unsafe(nil)); end

  def create(from: T.unsafe(nil), attributes: T.unsafe(nil), date_created: T.unsafe(nil), date_updated: T.unsafe(nil), last_updated_by: T.unsafe(nil), body: T.unsafe(nil), media_sid: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(order: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(order: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(order: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Chat::V2::ServiceContext::ChannelContext::MessagePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Chat::V2::ServiceContext::ChannelContext::WebhookContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, channel_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(configuration_url: T.unsafe(nil), configuration_method: T.unsafe(nil), configuration_filters: T.unsafe(nil), configuration_triggers: T.unsafe(nil), configuration_flow_sid: T.unsafe(nil), configuration_retry_count: T.unsafe(nil)); end
end

class Twilio::REST::Chat::V2::ServiceContext::ChannelContext::WebhookInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), channel_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def channel_sid; end
  def configuration; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def inspect; end
  def service_sid; end
  def sid; end
  def to_s; end
  def type; end
  def update(configuration_url: T.unsafe(nil), configuration_method: T.unsafe(nil), configuration_filters: T.unsafe(nil), configuration_triggers: T.unsafe(nil), configuration_flow_sid: T.unsafe(nil), configuration_retry_count: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Chat::V2::ServiceContext::ChannelContext::WebhookList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil), channel_sid: T.unsafe(nil)); end

  def create(type: T.unsafe(nil), configuration_url: T.unsafe(nil), configuration_method: T.unsafe(nil), configuration_filters: T.unsafe(nil), configuration_triggers: T.unsafe(nil), configuration_flow_sid: T.unsafe(nil), configuration_retry_count: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Chat::V2::ServiceContext::ChannelContext::WebhookPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Chat::V2::ServiceContext::ChannelInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def attributes; end
  def context; end
  def created_by; end
  def date_created; end
  def date_updated; end
  def delete(x_twilio_webhook_enabled: T.unsafe(nil)); end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def invites; end
  def links; end
  def members; end
  def members_count; end
  def messages; end
  def messages_count; end
  def service_sid; end
  def sid; end
  def to_s; end
  def type; end
  def unique_name; end
  def update(friendly_name: T.unsafe(nil), unique_name: T.unsafe(nil), attributes: T.unsafe(nil), date_created: T.unsafe(nil), date_updated: T.unsafe(nil), created_by: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
  def url; end
  def webhooks; end
end

class Twilio::REST::Chat::V2::ServiceContext::ChannelList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil)); end

  def create(friendly_name: T.unsafe(nil), unique_name: T.unsafe(nil), attributes: T.unsafe(nil), type: T.unsafe(nil), date_created: T.unsafe(nil), date_updated: T.unsafe(nil), created_by: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(type: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(type: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(type: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Chat::V2::ServiceContext::ChannelPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Chat::V2::ServiceContext::RoleContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(permission: T.unsafe(nil)); end
end

class Twilio::REST::Chat::V2::ServiceContext::RoleInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def permissions; end
  def service_sid; end
  def sid; end
  def to_s; end
  def type; end
  def update(permission: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Chat::V2::ServiceContext::RoleList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil)); end

  def create(friendly_name: T.unsafe(nil), type: T.unsafe(nil), permission: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Chat::V2::ServiceContext::RolePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Chat::V2::ServiceContext::UserContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(role_sid: T.unsafe(nil), attributes: T.unsafe(nil), friendly_name: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
  def user_bindings(sid = T.unsafe(nil)); end
  def user_channels(channel_sid = T.unsafe(nil)); end
end

class Twilio::REST::Chat::V2::ServiceContext::UserContext::UserBindingContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, user_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Chat::V2::ServiceContext::UserContext::UserBindingInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), user_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def binding_type; end
  def context; end
  def credential_sid; end
  def date_created; end
  def date_updated; end
  def delete; end
  def endpoint; end
  def fetch; end
  def identity; end
  def inspect; end
  def message_types; end
  def service_sid; end
  def sid; end
  def to_s; end
  def url; end
  def user_sid; end
end

class Twilio::REST::Chat::V2::ServiceContext::UserContext::UserBindingList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil), user_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(binding_type: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(binding_type: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(binding_type: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Chat::V2::ServiceContext::UserContext::UserBindingPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Chat::V2::ServiceContext::UserContext::UserChannelContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, user_sid, channel_sid); end

  def delete(x_twilio_webhook_enabled: T.unsafe(nil)); end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(notification_level: T.unsafe(nil), last_consumed_message_index: T.unsafe(nil), last_consumption_timestamp: T.unsafe(nil)); end
end

class Twilio::REST::Chat::V2::ServiceContext::UserContext::UserChannelInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), user_sid: T.unsafe(nil), channel_sid: T.unsafe(nil)); end

  def account_sid; end
  def channel_sid; end
  def context; end
  def delete(x_twilio_webhook_enabled: T.unsafe(nil)); end
  def fetch; end
  def inspect; end
  def last_consumed_message_index; end
  def links; end
  def member_sid; end
  def notification_level; end
  def service_sid; end
  def status; end
  def to_s; end
  def unread_messages_count; end
  def update(notification_level: T.unsafe(nil), last_consumed_message_index: T.unsafe(nil), last_consumption_timestamp: T.unsafe(nil)); end
  def url; end
  def user_sid; end
end

class Twilio::REST::Chat::V2::ServiceContext::UserContext::UserChannelList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil), user_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Chat::V2::ServiceContext::UserContext::UserChannelPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Chat::V2::ServiceContext::UserInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def attributes; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def identity; end
  def inspect; end
  def is_notifiable; end
  def is_online; end
  def joined_channels_count; end
  def links; end
  def role_sid; end
  def service_sid; end
  def sid; end
  def to_s; end
  def update(role_sid: T.unsafe(nil), attributes: T.unsafe(nil), friendly_name: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
  def url; end
  def user_bindings; end
  def user_channels; end
end

class Twilio::REST::Chat::V2::ServiceContext::UserList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil)); end

  def create(identity: T.unsafe(nil), role_sid: T.unsafe(nil), attributes: T.unsafe(nil), friendly_name: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Chat::V2::ServiceContext::UserPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Chat::V2::ServiceInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def bindings; end
  def channels; end
  def consumption_report_interval; end
  def context; end
  def date_created; end
  def date_updated; end
  def default_channel_creator_role_sid; end
  def default_channel_role_sid; end
  def default_service_role_sid; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def limits; end
  def links; end
  def media; end
  def notifications; end
  def post_webhook_retry_count; end
  def post_webhook_url; end
  def pre_webhook_retry_count; end
  def pre_webhook_url; end
  def reachability_enabled; end
  def read_status_enabled; end
  def roles; end
  def sid; end
  def to_s; end
  def typing_indicator_timeout; end
  def update(friendly_name: T.unsafe(nil), default_service_role_sid: T.unsafe(nil), default_channel_role_sid: T.unsafe(nil), default_channel_creator_role_sid: T.unsafe(nil), read_status_enabled: T.unsafe(nil), reachability_enabled: T.unsafe(nil), typing_indicator_timeout: T.unsafe(nil), consumption_report_interval: T.unsafe(nil), notifications_new_message_enabled: T.unsafe(nil), notifications_new_message_template: T.unsafe(nil), notifications_new_message_sound: T.unsafe(nil), notifications_new_message_badge_count_enabled: T.unsafe(nil), notifications_added_to_channel_enabled: T.unsafe(nil), notifications_added_to_channel_template: T.unsafe(nil), notifications_added_to_channel_sound: T.unsafe(nil), notifications_removed_from_channel_enabled: T.unsafe(nil), notifications_removed_from_channel_template: T.unsafe(nil), notifications_removed_from_channel_sound: T.unsafe(nil), notifications_invited_to_channel_enabled: T.unsafe(nil), notifications_invited_to_channel_template: T.unsafe(nil), notifications_invited_to_channel_sound: T.unsafe(nil), pre_webhook_url: T.unsafe(nil), post_webhook_url: T.unsafe(nil), webhook_method: T.unsafe(nil), webhook_filters: T.unsafe(nil), limits_channel_members: T.unsafe(nil), limits_user_channels: T.unsafe(nil), media_compatibility_message: T.unsafe(nil), pre_webhook_retry_count: T.unsafe(nil), post_webhook_retry_count: T.unsafe(nil), notifications_log_enabled: T.unsafe(nil)); end
  def url; end
  def users; end
  def webhook_filters; end
  def webhook_method; end
end

class Twilio::REST::Chat::V2::ServiceList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(friendly_name: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Chat::V2::ServicePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Chat::V3 < ::Twilio::REST::Version
  def initialize(domain); end

  def channels(service_sid = T.unsafe(nil), sid = T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Chat::V3::ChannelContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, sid); end

  def inspect; end
  def to_s; end
  def update(type: T.unsafe(nil), messaging_service_sid: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
end

class Twilio::REST::Chat::V3::ChannelInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def attributes; end
  def context; end
  def created_by; end
  def date_created; end
  def date_updated; end
  def friendly_name; end
  def inspect; end
  def members_count; end
  def messages_count; end
  def messaging_service_sid; end
  def service_sid; end
  def sid; end
  def to_s; end
  def type; end
  def unique_name; end
  def update(type: T.unsafe(nil), messaging_service_sid: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Chat::V3::ChannelList < ::Twilio::REST::ListResource
  def initialize(version); end

  def to_s; end
end

class Twilio::REST::Chat::V3::ChannelPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Client
  def initialize(username = T.unsafe(nil), password = T.unsafe(nil), account_sid = T.unsafe(nil), region = T.unsafe(nil), http_client = T.unsafe(nil), logger = T.unsafe(nil), user_agent_extensions = T.unsafe(nil)); end

  def account_sid; end
  def account_sid=(_arg0); end
  def accounts; end
  def addresses(sid = T.unsafe(nil)); end
  def api; end
  def applications(sid = T.unsafe(nil)); end
  def auth_token; end
  def auth_token=(_arg0); end
  def authorized_connect_apps(connect_app_sid = T.unsafe(nil)); end
  def autopilot; end
  def available_phone_numbers(country_code = T.unsafe(nil)); end
  def balance; end
  def build_uri(uri); end
  def bulkexports; end
  def calls(sid = T.unsafe(nil)); end
  def chat; end
  def conferences(sid = T.unsafe(nil)); end
  def connect_apps(sid = T.unsafe(nil)); end
  def content; end
  def conversations; end
  def edge; end
  def edge=(_arg0); end
  def events; end
  def flex_api; end
  def frontline_api; end
  def http_client; end
  def http_client=(_arg0); end
  def incoming_phone_numbers(sid = T.unsafe(nil)); end
  def insights; end
  def ip_messaging; end
  def keys(sid = T.unsafe(nil)); end
  def logger; end
  def logger=(_arg0); end
  def lookups; end
  def media; end
  def messages(sid = T.unsafe(nil)); end
  def messaging; end
  def microvisor; end
  def monitor; end
  def new_keys; end
  def new_signing_keys; end
  def notifications(sid = T.unsafe(nil)); end
  def notify; end
  def numbers; end
  def oauth; end
  def outgoing_caller_ids(sid = T.unsafe(nil)); end
  def password; end
  def password=(_arg0); end
  def preview; end
  def pricing; end
  def proxy; end
  def queues(sid = T.unsafe(nil)); end
  def recordings(sid = T.unsafe(nil)); end
  def region; end
  def region=(_arg0); end
  def request(host, port, method, uri, params = T.unsafe(nil), data = T.unsafe(nil), headers = T.unsafe(nil), auth = T.unsafe(nil), timeout = T.unsafe(nil)); end
  def routes; end
  def serverless; end
  def short_codes(sid = T.unsafe(nil)); end
  def signing_keys(sid = T.unsafe(nil)); end
  def sip; end
  def studio; end
  def supersim; end
  def sync; end
  def taskrouter; end
  def to_s; end
  def tokens; end
  def transcriptions(sid = T.unsafe(nil)); end
  def trunking; end
  def trusthub; end
  def usage; end
  def user_agent_extensions; end
  def user_agent_extensions=(_arg0); end
  def username; end
  def username=(_arg0); end
  def validate_ssl_certificate; end
  def validation_requests; end
  def verify; end
  def video; end
  def voice; end
  def wireless; end
end

class Twilio::REST::Content < ::Twilio::REST::Domain
  def initialize(twilio); end

  def contents(sid = T.unsafe(nil)); end
  def to_s; end
  def v1; end
end

class Twilio::REST::Content::V1 < ::Twilio::REST::Version
  def initialize(domain); end

  def contents(sid = T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Content::V1::ContentContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def approval_fetch; end
  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Content::V1::ContentContext::ApprovalFetchContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Content::V1::ContentContext::ApprovalFetchInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def fetch; end
  def inspect; end
  def sid; end
  def to_s; end
  def url; end
  def whatsapp; end
end

class Twilio::REST::Content::V1::ContentContext::ApprovalFetchList < ::Twilio::REST::ListResource
  def initialize(version, sid: T.unsafe(nil)); end

  def to_s; end
end

class Twilio::REST::Content::V1::ContentContext::ApprovalFetchPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Content::V1::ContentInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def approval_fetch; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def language; end
  def links; end
  def sid; end
  def to_s; end
  def types; end
  def url; end
  def variables; end
end

class Twilio::REST::Content::V1::ContentList < ::Twilio::REST::ListResource
  def initialize(version); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Content::V1::ContentPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Conversations < ::Twilio::REST::Domain
  def initialize(twilio); end

  def address_configurations(sid = T.unsafe(nil)); end
  def configuration; end
  def conversations(sid = T.unsafe(nil)); end
  def credentials(sid = T.unsafe(nil)); end
  def participant_conversations; end
  def roles(sid = T.unsafe(nil)); end
  def services(sid = T.unsafe(nil)); end
  def to_s; end
  def users(sid = T.unsafe(nil)); end
  def v1; end
end

class Twilio::REST::Conversations::V1 < ::Twilio::REST::Version
  def initialize(domain); end

  def address_configurations(sid = T.unsafe(nil)); end
  def configuration; end
  def conversations(sid = T.unsafe(nil)); end
  def credentials(sid = T.unsafe(nil)); end
  def participant_conversations; end
  def roles(sid = T.unsafe(nil)); end
  def services(sid = T.unsafe(nil)); end
  def to_s; end
  def users(sid = T.unsafe(nil)); end
end

class Twilio::REST::Conversations::V1::AddressConfigurationContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), auto_creation_enabled: T.unsafe(nil), auto_creation_type: T.unsafe(nil), auto_creation_conversation_service_sid: T.unsafe(nil), auto_creation_webhook_url: T.unsafe(nil), auto_creation_webhook_method: T.unsafe(nil), auto_creation_webhook_filters: T.unsafe(nil), auto_creation_studio_flow_sid: T.unsafe(nil), auto_creation_studio_retry_count: T.unsafe(nil)); end
end

class Twilio::REST::Conversations::V1::AddressConfigurationInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def address; end
  def auto_creation; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def sid; end
  def to_s; end
  def type; end
  def update(friendly_name: T.unsafe(nil), auto_creation_enabled: T.unsafe(nil), auto_creation_type: T.unsafe(nil), auto_creation_conversation_service_sid: T.unsafe(nil), auto_creation_webhook_url: T.unsafe(nil), auto_creation_webhook_method: T.unsafe(nil), auto_creation_webhook_filters: T.unsafe(nil), auto_creation_studio_flow_sid: T.unsafe(nil), auto_creation_studio_retry_count: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Conversations::V1::AddressConfigurationList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(type: T.unsafe(nil), address: T.unsafe(nil), friendly_name: T.unsafe(nil), auto_creation_enabled: T.unsafe(nil), auto_creation_type: T.unsafe(nil), auto_creation_conversation_service_sid: T.unsafe(nil), auto_creation_webhook_url: T.unsafe(nil), auto_creation_webhook_method: T.unsafe(nil), auto_creation_webhook_filters: T.unsafe(nil), auto_creation_studio_flow_sid: T.unsafe(nil), auto_creation_studio_retry_count: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(type: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(type: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(type: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::AddressConfigurationPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::ConfigurationContext < ::Twilio::REST::InstanceContext
  def initialize(version); end

  def fetch; end
  def inspect; end
  def to_s; end
  def update(default_chat_service_sid: T.unsafe(nil), default_messaging_service_sid: T.unsafe(nil), default_inactive_timer: T.unsafe(nil), default_closed_timer: T.unsafe(nil)); end
  def webhooks; end
end

class Twilio::REST::Conversations::V1::ConfigurationContext::WebhookContext < ::Twilio::REST::InstanceContext
  def initialize(version); end

  def fetch; end
  def inspect; end
  def to_s; end
  def update(method: T.unsafe(nil), filters: T.unsafe(nil), pre_webhook_url: T.unsafe(nil), post_webhook_url: T.unsafe(nil), target: T.unsafe(nil)); end
end

class Twilio::REST::Conversations::V1::ConfigurationContext::WebhookInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload); end

  def account_sid; end
  def context; end
  def fetch; end
  def filters; end
  def inspect; end
  def method; end
  def post_webhook_url; end
  def pre_webhook_url; end
  def target; end
  def to_s; end
  def update(method: T.unsafe(nil), filters: T.unsafe(nil), pre_webhook_url: T.unsafe(nil), post_webhook_url: T.unsafe(nil), target: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Conversations::V1::ConfigurationContext::WebhookList < ::Twilio::REST::ListResource
  def initialize(version); end

  def to_s; end
end

class Twilio::REST::Conversations::V1::ConfigurationContext::WebhookPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::ConfigurationInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload); end

  def account_sid; end
  def context; end
  def default_chat_service_sid; end
  def default_closed_timer; end
  def default_inactive_timer; end
  def default_messaging_service_sid; end
  def fetch; end
  def inspect; end
  def links; end
  def to_s; end
  def update(default_chat_service_sid: T.unsafe(nil), default_messaging_service_sid: T.unsafe(nil), default_inactive_timer: T.unsafe(nil), default_closed_timer: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Conversations::V1::ConfigurationList < ::Twilio::REST::ListResource
  def initialize(version); end

  def to_s; end
end

class Twilio::REST::Conversations::V1::ConfigurationPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::ConversationContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def delete(x_twilio_webhook_enabled: T.unsafe(nil)); end
  def fetch; end
  def inspect; end
  def messages(sid = T.unsafe(nil)); end
  def participants(sid = T.unsafe(nil)); end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), date_created: T.unsafe(nil), date_updated: T.unsafe(nil), attributes: T.unsafe(nil), messaging_service_sid: T.unsafe(nil), state: T.unsafe(nil), timers_inactive: T.unsafe(nil), timers_closed: T.unsafe(nil), unique_name: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
  def webhooks(sid = T.unsafe(nil)); end
end

class Twilio::REST::Conversations::V1::ConversationContext::MessageContext < ::Twilio::REST::InstanceContext
  def initialize(version, conversation_sid, sid); end

  def delete(x_twilio_webhook_enabled: T.unsafe(nil)); end
  def delivery_receipts(sid = T.unsafe(nil)); end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(author: T.unsafe(nil), body: T.unsafe(nil), date_created: T.unsafe(nil), date_updated: T.unsafe(nil), attributes: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
end

class Twilio::REST::Conversations::V1::ConversationContext::MessageContext::DeliveryReceiptContext < ::Twilio::REST::InstanceContext
  def initialize(version, conversation_sid, message_sid, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Conversations::V1::ConversationContext::MessageContext::DeliveryReceiptInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, conversation_sid: T.unsafe(nil), message_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def channel_message_sid; end
  def context; end
  def conversation_sid; end
  def date_created; end
  def date_updated; end
  def error_code; end
  def fetch; end
  def inspect; end
  def message_sid; end
  def participant_sid; end
  def sid; end
  def status; end
  def to_s; end
  def url; end
end

class Twilio::REST::Conversations::V1::ConversationContext::MessageContext::DeliveryReceiptList < ::Twilio::REST::ListResource
  def initialize(version, conversation_sid: T.unsafe(nil), message_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::ConversationContext::MessageContext::DeliveryReceiptPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::ConversationContext::MessageInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, conversation_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def attributes; end
  def author; end
  def body; end
  def context; end
  def conversation_sid; end
  def date_created; end
  def date_updated; end
  def delete(x_twilio_webhook_enabled: T.unsafe(nil)); end
  def delivery; end
  def delivery_receipts; end
  def fetch; end
  def index; end
  def inspect; end
  def links; end
  def media; end
  def participant_sid; end
  def sid; end
  def to_s; end
  def update(author: T.unsafe(nil), body: T.unsafe(nil), date_created: T.unsafe(nil), date_updated: T.unsafe(nil), attributes: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Conversations::V1::ConversationContext::MessageList < ::Twilio::REST::ListResource
  def initialize(version, conversation_sid: T.unsafe(nil)); end

  def create(author: T.unsafe(nil), body: T.unsafe(nil), date_created: T.unsafe(nil), date_updated: T.unsafe(nil), attributes: T.unsafe(nil), media_sid: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(order: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(order: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(order: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::ConversationContext::MessagePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::ConversationContext::ParticipantContext < ::Twilio::REST::InstanceContext
  def initialize(version, conversation_sid, sid); end

  def delete(x_twilio_webhook_enabled: T.unsafe(nil)); end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(date_created: T.unsafe(nil), date_updated: T.unsafe(nil), attributes: T.unsafe(nil), role_sid: T.unsafe(nil), messaging_binding_proxy_address: T.unsafe(nil), messaging_binding_projected_address: T.unsafe(nil), identity: T.unsafe(nil), last_read_message_index: T.unsafe(nil), last_read_timestamp: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
end

class Twilio::REST::Conversations::V1::ConversationContext::ParticipantInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, conversation_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def attributes; end
  def context; end
  def conversation_sid; end
  def date_created; end
  def date_updated; end
  def delete(x_twilio_webhook_enabled: T.unsafe(nil)); end
  def fetch; end
  def identity; end
  def inspect; end
  def last_read_message_index; end
  def last_read_timestamp; end
  def messaging_binding; end
  def role_sid; end
  def sid; end
  def to_s; end
  def update(date_created: T.unsafe(nil), date_updated: T.unsafe(nil), attributes: T.unsafe(nil), role_sid: T.unsafe(nil), messaging_binding_proxy_address: T.unsafe(nil), messaging_binding_projected_address: T.unsafe(nil), identity: T.unsafe(nil), last_read_message_index: T.unsafe(nil), last_read_timestamp: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Conversations::V1::ConversationContext::ParticipantList < ::Twilio::REST::ListResource
  def initialize(version, conversation_sid: T.unsafe(nil)); end

  def create(identity: T.unsafe(nil), messaging_binding_address: T.unsafe(nil), messaging_binding_proxy_address: T.unsafe(nil), date_created: T.unsafe(nil), date_updated: T.unsafe(nil), attributes: T.unsafe(nil), messaging_binding_projected_address: T.unsafe(nil), role_sid: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::ConversationContext::ParticipantPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::ConversationContext::WebhookContext < ::Twilio::REST::InstanceContext
  def initialize(version, conversation_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(configuration_url: T.unsafe(nil), configuration_method: T.unsafe(nil), configuration_filters: T.unsafe(nil), configuration_triggers: T.unsafe(nil), configuration_flow_sid: T.unsafe(nil)); end
end

class Twilio::REST::Conversations::V1::ConversationContext::WebhookInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, conversation_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def configuration; end
  def context; end
  def conversation_sid; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def inspect; end
  def sid; end
  def target; end
  def to_s; end
  def update(configuration_url: T.unsafe(nil), configuration_method: T.unsafe(nil), configuration_filters: T.unsafe(nil), configuration_triggers: T.unsafe(nil), configuration_flow_sid: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Conversations::V1::ConversationContext::WebhookList < ::Twilio::REST::ListResource
  def initialize(version, conversation_sid: T.unsafe(nil)); end

  def create(target: T.unsafe(nil), configuration_url: T.unsafe(nil), configuration_method: T.unsafe(nil), configuration_filters: T.unsafe(nil), configuration_triggers: T.unsafe(nil), configuration_flow_sid: T.unsafe(nil), configuration_replay_after: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::ConversationContext::WebhookPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::ConversationInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def attributes; end
  def bindings; end
  def chat_service_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete(x_twilio_webhook_enabled: T.unsafe(nil)); end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def links; end
  def messages; end
  def messaging_service_sid; end
  def participants; end
  def sid; end
  def state; end
  def timers; end
  def to_s; end
  def unique_name; end
  def update(friendly_name: T.unsafe(nil), date_created: T.unsafe(nil), date_updated: T.unsafe(nil), attributes: T.unsafe(nil), messaging_service_sid: T.unsafe(nil), state: T.unsafe(nil), timers_inactive: T.unsafe(nil), timers_closed: T.unsafe(nil), unique_name: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
  def url; end
  def webhooks; end
end

class Twilio::REST::Conversations::V1::ConversationList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(friendly_name: T.unsafe(nil), unique_name: T.unsafe(nil), date_created: T.unsafe(nil), date_updated: T.unsafe(nil), messaging_service_sid: T.unsafe(nil), attributes: T.unsafe(nil), state: T.unsafe(nil), timers_inactive: T.unsafe(nil), timers_closed: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::ConversationPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::CredentialContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(type: T.unsafe(nil), friendly_name: T.unsafe(nil), certificate: T.unsafe(nil), private_key: T.unsafe(nil), sandbox: T.unsafe(nil), api_key: T.unsafe(nil), secret: T.unsafe(nil)); end
end

class Twilio::REST::Conversations::V1::CredentialInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def sandbox; end
  def sid; end
  def to_s; end
  def type; end
  def update(type: T.unsafe(nil), friendly_name: T.unsafe(nil), certificate: T.unsafe(nil), private_key: T.unsafe(nil), sandbox: T.unsafe(nil), api_key: T.unsafe(nil), secret: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Conversations::V1::CredentialList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(type: T.unsafe(nil), friendly_name: T.unsafe(nil), certificate: T.unsafe(nil), private_key: T.unsafe(nil), sandbox: T.unsafe(nil), api_key: T.unsafe(nil), secret: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::CredentialPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::ParticipantConversationInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload); end

  def account_sid; end
  def chat_service_sid; end
  def conversation_attributes; end
  def conversation_created_by; end
  def conversation_date_created; end
  def conversation_date_updated; end
  def conversation_friendly_name; end
  def conversation_sid; end
  def conversation_state; end
  def conversation_timers; end
  def conversation_unique_name; end
  def inspect; end
  def links; end
  def participant_identity; end
  def participant_messaging_binding; end
  def participant_sid; end
  def participant_user_sid; end
  def to_s; end
end

class Twilio::REST::Conversations::V1::ParticipantConversationList < ::Twilio::REST::ListResource
  def initialize(version); end

  def each; end
  def get_page(target_url); end
  def list(identity: T.unsafe(nil), address: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(identity: T.unsafe(nil), address: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(identity: T.unsafe(nil), address: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::ParticipantConversationPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::RoleContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(permission: T.unsafe(nil)); end
end

class Twilio::REST::Conversations::V1::RoleInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def chat_service_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def permissions; end
  def sid; end
  def to_s; end
  def type; end
  def update(permission: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Conversations::V1::RoleList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(friendly_name: T.unsafe(nil), type: T.unsafe(nil), permission: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::RolePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::ServiceContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def bindings(sid = T.unsafe(nil)); end
  def configuration; end
  def conversations(sid = T.unsafe(nil)); end
  def delete; end
  def fetch; end
  def inspect; end
  def participant_conversations; end
  def roles(sid = T.unsafe(nil)); end
  def to_s; end
  def users(sid = T.unsafe(nil)); end
end

class Twilio::REST::Conversations::V1::ServiceContext::BindingContext < ::Twilio::REST::InstanceContext
  def initialize(version, chat_service_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Conversations::V1::ServiceContext::BindingInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, chat_service_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def binding_type; end
  def chat_service_sid; end
  def context; end
  def credential_sid; end
  def date_created; end
  def date_updated; end
  def delete; end
  def endpoint; end
  def fetch; end
  def identity; end
  def inspect; end
  def message_types; end
  def sid; end
  def to_s; end
  def url; end
end

class Twilio::REST::Conversations::V1::ServiceContext::BindingList < ::Twilio::REST::ListResource
  def initialize(version, chat_service_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(binding_type: T.unsafe(nil), identity: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(binding_type: T.unsafe(nil), identity: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(binding_type: T.unsafe(nil), identity: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::ServiceContext::BindingPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::ServiceContext::ConfigurationContext < ::Twilio::REST::InstanceContext
  def initialize(version, chat_service_sid); end

  def fetch; end
  def inspect; end
  def notifications; end
  def to_s; end
  def update(default_conversation_creator_role_sid: T.unsafe(nil), default_conversation_role_sid: T.unsafe(nil), default_chat_service_role_sid: T.unsafe(nil), reachability_enabled: T.unsafe(nil)); end
  def webhooks; end
end

class Twilio::REST::Conversations::V1::ServiceContext::ConfigurationContext::NotificationContext < ::Twilio::REST::InstanceContext
  def initialize(version, chat_service_sid); end

  def fetch; end
  def inspect; end
  def to_s; end
  def update(log_enabled: T.unsafe(nil), new_message_enabled: T.unsafe(nil), new_message_template: T.unsafe(nil), new_message_sound: T.unsafe(nil), new_message_badge_count_enabled: T.unsafe(nil), added_to_conversation_enabled: T.unsafe(nil), added_to_conversation_template: T.unsafe(nil), added_to_conversation_sound: T.unsafe(nil), removed_from_conversation_enabled: T.unsafe(nil), removed_from_conversation_template: T.unsafe(nil), removed_from_conversation_sound: T.unsafe(nil), new_message_with_media_enabled: T.unsafe(nil), new_message_with_media_template: T.unsafe(nil)); end
end

class Twilio::REST::Conversations::V1::ServiceContext::ConfigurationContext::NotificationInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, chat_service_sid: T.unsafe(nil)); end

  def account_sid; end
  def added_to_conversation; end
  def chat_service_sid; end
  def context; end
  def fetch; end
  def inspect; end
  def log_enabled; end
  def new_message; end
  def removed_from_conversation; end
  def to_s; end
  def update(log_enabled: T.unsafe(nil), new_message_enabled: T.unsafe(nil), new_message_template: T.unsafe(nil), new_message_sound: T.unsafe(nil), new_message_badge_count_enabled: T.unsafe(nil), added_to_conversation_enabled: T.unsafe(nil), added_to_conversation_template: T.unsafe(nil), added_to_conversation_sound: T.unsafe(nil), removed_from_conversation_enabled: T.unsafe(nil), removed_from_conversation_template: T.unsafe(nil), removed_from_conversation_sound: T.unsafe(nil), new_message_with_media_enabled: T.unsafe(nil), new_message_with_media_template: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Conversations::V1::ServiceContext::ConfigurationContext::NotificationList < ::Twilio::REST::ListResource
  def initialize(version, chat_service_sid: T.unsafe(nil)); end

  def to_s; end
end

class Twilio::REST::Conversations::V1::ServiceContext::ConfigurationContext::NotificationPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::ServiceContext::ConfigurationContext::WebhookContext < ::Twilio::REST::InstanceContext
  def initialize(version, chat_service_sid); end

  def fetch; end
  def inspect; end
  def to_s; end
  def update(pre_webhook_url: T.unsafe(nil), post_webhook_url: T.unsafe(nil), filters: T.unsafe(nil), method: T.unsafe(nil)); end
end

class Twilio::REST::Conversations::V1::ServiceContext::ConfigurationContext::WebhookInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, chat_service_sid: T.unsafe(nil)); end

  def account_sid; end
  def chat_service_sid; end
  def context; end
  def fetch; end
  def filters; end
  def inspect; end
  def method; end
  def post_webhook_url; end
  def pre_webhook_url; end
  def to_s; end
  def update(pre_webhook_url: T.unsafe(nil), post_webhook_url: T.unsafe(nil), filters: T.unsafe(nil), method: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Conversations::V1::ServiceContext::ConfigurationContext::WebhookList < ::Twilio::REST::ListResource
  def initialize(version, chat_service_sid: T.unsafe(nil)); end

  def to_s; end
end

class Twilio::REST::Conversations::V1::ServiceContext::ConfigurationContext::WebhookPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::ServiceContext::ConfigurationInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, chat_service_sid: T.unsafe(nil)); end

  def chat_service_sid; end
  def context; end
  def default_chat_service_role_sid; end
  def default_conversation_creator_role_sid; end
  def default_conversation_role_sid; end
  def fetch; end
  def inspect; end
  def links; end
  def reachability_enabled; end
  def to_s; end
  def update(default_conversation_creator_role_sid: T.unsafe(nil), default_conversation_role_sid: T.unsafe(nil), default_chat_service_role_sid: T.unsafe(nil), reachability_enabled: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Conversations::V1::ServiceContext::ConfigurationList < ::Twilio::REST::ListResource
  def initialize(version, chat_service_sid: T.unsafe(nil)); end

  def to_s; end
end

class Twilio::REST::Conversations::V1::ServiceContext::ConfigurationPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::ServiceContext::ConversationContext < ::Twilio::REST::InstanceContext
  def initialize(version, chat_service_sid, sid); end

  def delete(x_twilio_webhook_enabled: T.unsafe(nil)); end
  def fetch; end
  def inspect; end
  def messages(sid = T.unsafe(nil)); end
  def participants(sid = T.unsafe(nil)); end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), date_created: T.unsafe(nil), date_updated: T.unsafe(nil), attributes: T.unsafe(nil), messaging_service_sid: T.unsafe(nil), state: T.unsafe(nil), timers_inactive: T.unsafe(nil), timers_closed: T.unsafe(nil), unique_name: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
  def webhooks(sid = T.unsafe(nil)); end
end

class Twilio::REST::Conversations::V1::ServiceContext::ConversationContext::MessageContext < ::Twilio::REST::InstanceContext
  def initialize(version, chat_service_sid, conversation_sid, sid); end

  def delete(x_twilio_webhook_enabled: T.unsafe(nil)); end
  def delivery_receipts(sid = T.unsafe(nil)); end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(author: T.unsafe(nil), body: T.unsafe(nil), date_created: T.unsafe(nil), date_updated: T.unsafe(nil), attributes: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
end

class Twilio::REST::Conversations::V1::ServiceContext::ConversationContext::MessageContext::DeliveryReceiptContext < ::Twilio::REST::InstanceContext
  def initialize(version, chat_service_sid, conversation_sid, message_sid, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Conversations::V1::ServiceContext::ConversationContext::MessageContext::DeliveryReceiptInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, chat_service_sid: T.unsafe(nil), conversation_sid: T.unsafe(nil), message_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def channel_message_sid; end
  def chat_service_sid; end
  def context; end
  def conversation_sid; end
  def date_created; end
  def date_updated; end
  def error_code; end
  def fetch; end
  def inspect; end
  def message_sid; end
  def participant_sid; end
  def sid; end
  def status; end
  def to_s; end
  def url; end
end

class Twilio::REST::Conversations::V1::ServiceContext::ConversationContext::MessageContext::DeliveryReceiptList < ::Twilio::REST::ListResource
  def initialize(version, chat_service_sid: T.unsafe(nil), conversation_sid: T.unsafe(nil), message_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::ServiceContext::ConversationContext::MessageContext::DeliveryReceiptPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::ServiceContext::ConversationContext::MessageInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, chat_service_sid: T.unsafe(nil), conversation_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def attributes; end
  def author; end
  def body; end
  def chat_service_sid; end
  def context; end
  def conversation_sid; end
  def date_created; end
  def date_updated; end
  def delete(x_twilio_webhook_enabled: T.unsafe(nil)); end
  def delivery; end
  def delivery_receipts; end
  def fetch; end
  def index; end
  def inspect; end
  def links; end
  def media; end
  def participant_sid; end
  def sid; end
  def to_s; end
  def update(author: T.unsafe(nil), body: T.unsafe(nil), date_created: T.unsafe(nil), date_updated: T.unsafe(nil), attributes: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Conversations::V1::ServiceContext::ConversationContext::MessageList < ::Twilio::REST::ListResource
  def initialize(version, chat_service_sid: T.unsafe(nil), conversation_sid: T.unsafe(nil)); end

  def create(author: T.unsafe(nil), body: T.unsafe(nil), date_created: T.unsafe(nil), date_updated: T.unsafe(nil), attributes: T.unsafe(nil), media_sid: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(order: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(order: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(order: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::ServiceContext::ConversationContext::MessagePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::ServiceContext::ConversationContext::ParticipantContext < ::Twilio::REST::InstanceContext
  def initialize(version, chat_service_sid, conversation_sid, sid); end

  def delete(x_twilio_webhook_enabled: T.unsafe(nil)); end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(date_created: T.unsafe(nil), date_updated: T.unsafe(nil), identity: T.unsafe(nil), attributes: T.unsafe(nil), role_sid: T.unsafe(nil), messaging_binding_proxy_address: T.unsafe(nil), messaging_binding_projected_address: T.unsafe(nil), last_read_message_index: T.unsafe(nil), last_read_timestamp: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
end

class Twilio::REST::Conversations::V1::ServiceContext::ConversationContext::ParticipantInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, chat_service_sid: T.unsafe(nil), conversation_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def attributes; end
  def chat_service_sid; end
  def context; end
  def conversation_sid; end
  def date_created; end
  def date_updated; end
  def delete(x_twilio_webhook_enabled: T.unsafe(nil)); end
  def fetch; end
  def identity; end
  def inspect; end
  def last_read_message_index; end
  def last_read_timestamp; end
  def messaging_binding; end
  def role_sid; end
  def sid; end
  def to_s; end
  def update(date_created: T.unsafe(nil), date_updated: T.unsafe(nil), identity: T.unsafe(nil), attributes: T.unsafe(nil), role_sid: T.unsafe(nil), messaging_binding_proxy_address: T.unsafe(nil), messaging_binding_projected_address: T.unsafe(nil), last_read_message_index: T.unsafe(nil), last_read_timestamp: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Conversations::V1::ServiceContext::ConversationContext::ParticipantList < ::Twilio::REST::ListResource
  def initialize(version, chat_service_sid: T.unsafe(nil), conversation_sid: T.unsafe(nil)); end

  def create(identity: T.unsafe(nil), messaging_binding_address: T.unsafe(nil), messaging_binding_proxy_address: T.unsafe(nil), date_created: T.unsafe(nil), date_updated: T.unsafe(nil), attributes: T.unsafe(nil), messaging_binding_projected_address: T.unsafe(nil), role_sid: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::ServiceContext::ConversationContext::ParticipantPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::ServiceContext::ConversationContext::WebhookContext < ::Twilio::REST::InstanceContext
  def initialize(version, chat_service_sid, conversation_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(configuration_url: T.unsafe(nil), configuration_method: T.unsafe(nil), configuration_filters: T.unsafe(nil), configuration_triggers: T.unsafe(nil), configuration_flow_sid: T.unsafe(nil)); end
end

class Twilio::REST::Conversations::V1::ServiceContext::ConversationContext::WebhookInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, chat_service_sid: T.unsafe(nil), conversation_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def chat_service_sid; end
  def configuration; end
  def context; end
  def conversation_sid; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def inspect; end
  def sid; end
  def target; end
  def to_s; end
  def update(configuration_url: T.unsafe(nil), configuration_method: T.unsafe(nil), configuration_filters: T.unsafe(nil), configuration_triggers: T.unsafe(nil), configuration_flow_sid: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Conversations::V1::ServiceContext::ConversationContext::WebhookList < ::Twilio::REST::ListResource
  def initialize(version, chat_service_sid: T.unsafe(nil), conversation_sid: T.unsafe(nil)); end

  def create(target: T.unsafe(nil), configuration_url: T.unsafe(nil), configuration_method: T.unsafe(nil), configuration_filters: T.unsafe(nil), configuration_triggers: T.unsafe(nil), configuration_flow_sid: T.unsafe(nil), configuration_replay_after: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::ServiceContext::ConversationContext::WebhookPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::ServiceContext::ConversationInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, chat_service_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def attributes; end
  def bindings; end
  def chat_service_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete(x_twilio_webhook_enabled: T.unsafe(nil)); end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def links; end
  def messages; end
  def messaging_service_sid; end
  def participants; end
  def sid; end
  def state; end
  def timers; end
  def to_s; end
  def unique_name; end
  def update(friendly_name: T.unsafe(nil), date_created: T.unsafe(nil), date_updated: T.unsafe(nil), attributes: T.unsafe(nil), messaging_service_sid: T.unsafe(nil), state: T.unsafe(nil), timers_inactive: T.unsafe(nil), timers_closed: T.unsafe(nil), unique_name: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
  def url; end
  def webhooks; end
end

class Twilio::REST::Conversations::V1::ServiceContext::ConversationList < ::Twilio::REST::ListResource
  def initialize(version, chat_service_sid: T.unsafe(nil)); end

  def create(friendly_name: T.unsafe(nil), unique_name: T.unsafe(nil), attributes: T.unsafe(nil), messaging_service_sid: T.unsafe(nil), date_created: T.unsafe(nil), date_updated: T.unsafe(nil), state: T.unsafe(nil), timers_inactive: T.unsafe(nil), timers_closed: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::ServiceContext::ConversationPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::ServiceContext::ParticipantConversationInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, chat_service_sid: T.unsafe(nil)); end

  def account_sid; end
  def chat_service_sid; end
  def conversation_attributes; end
  def conversation_created_by; end
  def conversation_date_created; end
  def conversation_date_updated; end
  def conversation_friendly_name; end
  def conversation_sid; end
  def conversation_state; end
  def conversation_timers; end
  def conversation_unique_name; end
  def inspect; end
  def links; end
  def participant_identity; end
  def participant_messaging_binding; end
  def participant_sid; end
  def participant_user_sid; end
  def to_s; end
end

class Twilio::REST::Conversations::V1::ServiceContext::ParticipantConversationList < ::Twilio::REST::ListResource
  def initialize(version, chat_service_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(identity: T.unsafe(nil), address: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(identity: T.unsafe(nil), address: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(identity: T.unsafe(nil), address: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::ServiceContext::ParticipantConversationPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::ServiceContext::RoleContext < ::Twilio::REST::InstanceContext
  def initialize(version, chat_service_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(permission: T.unsafe(nil)); end
end

class Twilio::REST::Conversations::V1::ServiceContext::RoleInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, chat_service_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def chat_service_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def permissions; end
  def sid; end
  def to_s; end
  def type; end
  def update(permission: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Conversations::V1::ServiceContext::RoleList < ::Twilio::REST::ListResource
  def initialize(version, chat_service_sid: T.unsafe(nil)); end

  def create(friendly_name: T.unsafe(nil), type: T.unsafe(nil), permission: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::ServiceContext::RolePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::ServiceContext::UserContext < ::Twilio::REST::InstanceContext
  def initialize(version, chat_service_sid, sid); end

  def delete(x_twilio_webhook_enabled: T.unsafe(nil)); end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), attributes: T.unsafe(nil), role_sid: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
  def user_conversations(conversation_sid = T.unsafe(nil)); end
end

class Twilio::REST::Conversations::V1::ServiceContext::UserContext::UserConversationContext < ::Twilio::REST::InstanceContext
  def initialize(version, chat_service_sid, user_sid, conversation_sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(notification_level: T.unsafe(nil), last_read_timestamp: T.unsafe(nil), last_read_message_index: T.unsafe(nil)); end
end

class Twilio::REST::Conversations::V1::ServiceContext::UserContext::UserConversationInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, chat_service_sid: T.unsafe(nil), user_sid: T.unsafe(nil), conversation_sid: T.unsafe(nil)); end

  def account_sid; end
  def attributes; end
  def chat_service_sid; end
  def context; end
  def conversation_sid; end
  def conversation_state; end
  def created_by; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def last_read_message_index; end
  def links; end
  def notification_level; end
  def participant_sid; end
  def timers; end
  def to_s; end
  def unique_name; end
  def unread_messages_count; end
  def update(notification_level: T.unsafe(nil), last_read_timestamp: T.unsafe(nil), last_read_message_index: T.unsafe(nil)); end
  def url; end
  def user_sid; end
end

class Twilio::REST::Conversations::V1::ServiceContext::UserContext::UserConversationList < ::Twilio::REST::ListResource
  def initialize(version, chat_service_sid: T.unsafe(nil), user_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::ServiceContext::UserContext::UserConversationPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::ServiceContext::UserInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, chat_service_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def attributes; end
  def chat_service_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete(x_twilio_webhook_enabled: T.unsafe(nil)); end
  def fetch; end
  def friendly_name; end
  def identity; end
  def inspect; end
  def is_notifiable; end
  def is_online; end
  def links; end
  def role_sid; end
  def sid; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), attributes: T.unsafe(nil), role_sid: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
  def url; end
  def user_conversations; end
end

class Twilio::REST::Conversations::V1::ServiceContext::UserList < ::Twilio::REST::ListResource
  def initialize(version, chat_service_sid: T.unsafe(nil)); end

  def create(identity: T.unsafe(nil), friendly_name: T.unsafe(nil), attributes: T.unsafe(nil), role_sid: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::ServiceContext::UserPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::ServiceInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def bindings; end
  def configuration; end
  def context; end
  def conversations; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def links; end
  def participant_conversations; end
  def roles; end
  def sid; end
  def to_s; end
  def url; end
  def users; end
end

class Twilio::REST::Conversations::V1::ServiceList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(friendly_name: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::ServicePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::UserContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def delete(x_twilio_webhook_enabled: T.unsafe(nil)); end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), attributes: T.unsafe(nil), role_sid: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
  def user_conversations(conversation_sid = T.unsafe(nil)); end
end

class Twilio::REST::Conversations::V1::UserContext::UserConversationContext < ::Twilio::REST::InstanceContext
  def initialize(version, user_sid, conversation_sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(notification_level: T.unsafe(nil), last_read_timestamp: T.unsafe(nil), last_read_message_index: T.unsafe(nil)); end
end

class Twilio::REST::Conversations::V1::UserContext::UserConversationInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, user_sid: T.unsafe(nil), conversation_sid: T.unsafe(nil)); end

  def account_sid; end
  def attributes; end
  def chat_service_sid; end
  def context; end
  def conversation_sid; end
  def conversation_state; end
  def created_by; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def last_read_message_index; end
  def links; end
  def notification_level; end
  def participant_sid; end
  def timers; end
  def to_s; end
  def unique_name; end
  def unread_messages_count; end
  def update(notification_level: T.unsafe(nil), last_read_timestamp: T.unsafe(nil), last_read_message_index: T.unsafe(nil)); end
  def url; end
  def user_sid; end
end

class Twilio::REST::Conversations::V1::UserContext::UserConversationList < ::Twilio::REST::ListResource
  def initialize(version, user_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::UserContext::UserConversationPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::UserInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def attributes; end
  def chat_service_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete(x_twilio_webhook_enabled: T.unsafe(nil)); end
  def fetch; end
  def friendly_name; end
  def identity; end
  def inspect; end
  def is_notifiable; end
  def is_online; end
  def links; end
  def role_sid; end
  def sid; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), attributes: T.unsafe(nil), role_sid: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
  def url; end
  def user_conversations; end
end

class Twilio::REST::Conversations::V1::UserList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(identity: T.unsafe(nil), friendly_name: T.unsafe(nil), attributes: T.unsafe(nil), role_sid: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Conversations::V1::UserPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Domain
  def initialize(client); end

  def absolute_url(uri); end
  def client; end
  def request(method, uri, params = T.unsafe(nil), data = T.unsafe(nil), headers = T.unsafe(nil), auth = T.unsafe(nil), timeout = T.unsafe(nil)); end
end

class Twilio::REST::Events < ::Twilio::REST::Domain
  def initialize(twilio); end

  def event_types(type = T.unsafe(nil)); end
  def schemas(id = T.unsafe(nil)); end
  def sinks(sid = T.unsafe(nil)); end
  def subscriptions(sid = T.unsafe(nil)); end
  def to_s; end
  def v1; end
end

class Twilio::REST::Events::V1 < ::Twilio::REST::Version
  def initialize(domain); end

  def event_types(type = T.unsafe(nil)); end
  def schemas(id = T.unsafe(nil)); end
  def sinks(sid = T.unsafe(nil)); end
  def subscriptions(sid = T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Events::V1::EventTypeContext < ::Twilio::REST::InstanceContext
  def initialize(version, type); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Events::V1::EventTypeInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, type: T.unsafe(nil)); end

  def context; end
  def date_created; end
  def date_updated; end
  def description; end
  def fetch; end
  def inspect; end
  def links; end
  def schema_id; end
  def to_s; end
  def type; end
  def url; end
end

class Twilio::REST::Events::V1::EventTypeList < ::Twilio::REST::ListResource
  def initialize(version); end

  def each; end
  def get_page(target_url); end
  def list(schema_id: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(schema_id: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(schema_id: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Events::V1::EventTypePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Events::V1::SchemaContext < ::Twilio::REST::InstanceContext
  def initialize(version, id); end

  def fetch; end
  def inspect; end
  def to_s; end
  def versions(schema_version = T.unsafe(nil)); end
end

class Twilio::REST::Events::V1::SchemaContext::SchemaVersionContext < ::Twilio::REST::InstanceContext
  def initialize(version, id, schema_version); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Events::V1::SchemaContext::SchemaVersionInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, id: T.unsafe(nil), schema_version: T.unsafe(nil)); end

  def context; end
  def date_created; end
  def fetch; end
  def id; end
  def inspect; end
  def raw; end
  def schema_version; end
  def to_s; end
  def url; end
end

class Twilio::REST::Events::V1::SchemaContext::SchemaVersionList < ::Twilio::REST::ListResource
  def initialize(version, id: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Events::V1::SchemaContext::SchemaVersionPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Events::V1::SchemaInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, id: T.unsafe(nil)); end

  def context; end
  def fetch; end
  def id; end
  def inspect; end
  def latest_version; end
  def latest_version_date_created; end
  def links; end
  def to_s; end
  def url; end
  def versions; end
end

class Twilio::REST::Events::V1::SchemaList < ::Twilio::REST::ListResource
  def initialize(version); end

  def to_s; end
end

class Twilio::REST::Events::V1::SchemaPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Events::V1::SinkContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def sink_test; end
  def sink_validate; end
  def to_s; end
  def update(description: T.unsafe(nil)); end
end

class Twilio::REST::Events::V1::SinkContext::SinkTestInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def inspect; end
  def result; end
  def to_s; end
end

class Twilio::REST::Events::V1::SinkContext::SinkTestList < ::Twilio::REST::ListResource
  def initialize(version, sid: T.unsafe(nil)); end

  def create; end
  def to_s; end
end

class Twilio::REST::Events::V1::SinkContext::SinkTestPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Events::V1::SinkContext::SinkValidateInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def inspect; end
  def result; end
  def to_s; end
end

class Twilio::REST::Events::V1::SinkContext::SinkValidateList < ::Twilio::REST::ListResource
  def initialize(version, sid: T.unsafe(nil)); end

  def create(test_id: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Events::V1::SinkContext::SinkValidatePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Events::V1::SinkInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def description; end
  def fetch; end
  def inspect; end
  def links; end
  def sid; end
  def sink_configuration; end
  def sink_test; end
  def sink_type; end
  def sink_validate; end
  def status; end
  def to_s; end
  def update(description: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Events::V1::SinkList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(description: T.unsafe(nil), sink_configuration: T.unsafe(nil), sink_type: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(in_use: T.unsafe(nil), status: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(in_use: T.unsafe(nil), status: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(in_use: T.unsafe(nil), status: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Events::V1::SinkPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Events::V1::SubscriptionContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def subscribed_events(type = T.unsafe(nil)); end
  def to_s; end
  def update(description: T.unsafe(nil), sink_sid: T.unsafe(nil)); end
end

class Twilio::REST::Events::V1::SubscriptionContext::SubscribedEventContext < ::Twilio::REST::InstanceContext
  def initialize(version, subscription_sid, type); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(schema_version: T.unsafe(nil)); end
end

class Twilio::REST::Events::V1::SubscriptionContext::SubscribedEventInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, subscription_sid: T.unsafe(nil), type: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def delete; end
  def fetch; end
  def inspect; end
  def schema_version; end
  def subscription_sid; end
  def to_s; end
  def type; end
  def update(schema_version: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Events::V1::SubscriptionContext::SubscribedEventList < ::Twilio::REST::ListResource
  def initialize(version, subscription_sid: T.unsafe(nil)); end

  def create(type: T.unsafe(nil), schema_version: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Events::V1::SubscriptionContext::SubscribedEventPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Events::V1::SubscriptionInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def description; end
  def fetch; end
  def inspect; end
  def links; end
  def sid; end
  def sink_sid; end
  def subscribed_events; end
  def to_s; end
  def update(description: T.unsafe(nil), sink_sid: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Events::V1::SubscriptionList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(description: T.unsafe(nil), sink_sid: T.unsafe(nil), types: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(sink_sid: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(sink_sid: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(sink_sid: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Events::V1::SubscriptionPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::FlexApi < ::Twilio::REST::Domain
  def initialize(twilio); end

  def assessments; end
  def channel(sid = T.unsafe(nil)); end
  def configuration; end
  def flex_flow(sid = T.unsafe(nil)); end
  def good_data; end
  def interaction(sid = T.unsafe(nil)); end
  def to_s; end
  def user_roles; end
  def v1; end
  def web_channel(sid = T.unsafe(nil)); end
end

class Twilio::REST::FlexApi::V1 < ::Twilio::REST::Version
  def initialize(domain); end

  def assessments; end
  def channel(sid = T.unsafe(nil)); end
  def configuration; end
  def flex_flow(sid = T.unsafe(nil)); end
  def good_data; end
  def interaction(sid = T.unsafe(nil)); end
  def to_s; end
  def user_roles; end
  def web_channel(sid = T.unsafe(nil)); end
end

class Twilio::REST::FlexApi::V1::AssessmentsContext < ::Twilio::REST::InstanceContext
  def initialize(version); end

  def create; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::FlexApi::V1::AssessmentsInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload); end

  def context; end
  def create; end
  def inspect; end
  def to_s; end
  def url; end
end

class Twilio::REST::FlexApi::V1::AssessmentsList < ::Twilio::REST::ListResource
  def initialize(version); end

  def to_s; end
end

class Twilio::REST::FlexApi::V1::AssessmentsPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::FlexApi::V1::ChannelContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::FlexApi::V1::ChannelInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def flex_flow_sid; end
  def inspect; end
  def sid; end
  def task_sid; end
  def to_s; end
  def url; end
  def user_sid; end
end

class Twilio::REST::FlexApi::V1::ChannelList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(flex_flow_sid: T.unsafe(nil), identity: T.unsafe(nil), chat_user_friendly_name: T.unsafe(nil), chat_friendly_name: T.unsafe(nil), target: T.unsafe(nil), chat_unique_name: T.unsafe(nil), pre_engagement_data: T.unsafe(nil), task_sid: T.unsafe(nil), task_attributes: T.unsafe(nil), long_lived: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::FlexApi::V1::ChannelPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::FlexApi::V1::ConfigurationContext < ::Twilio::REST::InstanceContext
  def initialize(version); end

  def create; end
  def fetch(ui_version: T.unsafe(nil)); end
  def inspect; end
  def to_s; end
  def update; end
end

class Twilio::REST::FlexApi::V1::ConfigurationInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload); end

  def account_sid; end
  def attributes; end
  def call_recording_enabled; end
  def call_recording_webhook_url; end
  def channel_configs; end
  def chat_service_instance_sid; end
  def context; end
  def create; end
  def crm_attributes; end
  def crm_callback_url; end
  def crm_enabled; end
  def crm_fallback_url; end
  def crm_type; end
  def date_created; end
  def date_updated; end
  def debugger_integration; end
  def fetch(ui_version: T.unsafe(nil)); end
  def flex_insights_drilldown; end
  def flex_insights_hr; end
  def flex_service_instance_sid; end
  def flex_ui_status_report; end
  def flex_url; end
  def inspect; end
  def integrations; end
  def markdown; end
  def messaging_service_instance_sid; end
  def notifications; end
  def outbound_call_flows; end
  def plugin_service_attributes; end
  def plugin_service_enabled; end
  def public_attributes; end
  def queue_stats_configuration; end
  def runtime_domain; end
  def serverless_service_sids; end
  def service_version; end
  def status; end
  def taskrouter_offline_activity_sid; end
  def taskrouter_skills; end
  def taskrouter_target_taskqueue_sid; end
  def taskrouter_target_workflow_sid; end
  def taskrouter_taskqueues; end
  def taskrouter_worker_attributes; end
  def taskrouter_worker_channels; end
  def taskrouter_workspace_sid; end
  def to_s; end
  def ui_attributes; end
  def ui_dependencies; end
  def ui_language; end
  def ui_version; end
  def update; end
  def url; end
end

class Twilio::REST::FlexApi::V1::ConfigurationList < ::Twilio::REST::ListResource
  def initialize(version); end

  def to_s; end
end

class Twilio::REST::FlexApi::V1::ConfigurationPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::FlexApi::V1::FlexFlowContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), chat_service_sid: T.unsafe(nil), channel_type: T.unsafe(nil), contact_identity: T.unsafe(nil), enabled: T.unsafe(nil), integration_type: T.unsafe(nil), integration_flow_sid: T.unsafe(nil), integration_url: T.unsafe(nil), integration_workspace_sid: T.unsafe(nil), integration_workflow_sid: T.unsafe(nil), integration_channel: T.unsafe(nil), integration_timeout: T.unsafe(nil), integration_priority: T.unsafe(nil), integration_creation_on_message: T.unsafe(nil), long_lived: T.unsafe(nil), janitor_enabled: T.unsafe(nil), integration_retry_count: T.unsafe(nil)); end
end

class Twilio::REST::FlexApi::V1::FlexFlowInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def channel_type; end
  def chat_service_sid; end
  def contact_identity; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def enabled; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def integration; end
  def integration_type; end
  def janitor_enabled; end
  def long_lived; end
  def sid; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), chat_service_sid: T.unsafe(nil), channel_type: T.unsafe(nil), contact_identity: T.unsafe(nil), enabled: T.unsafe(nil), integration_type: T.unsafe(nil), integration_flow_sid: T.unsafe(nil), integration_url: T.unsafe(nil), integration_workspace_sid: T.unsafe(nil), integration_workflow_sid: T.unsafe(nil), integration_channel: T.unsafe(nil), integration_timeout: T.unsafe(nil), integration_priority: T.unsafe(nil), integration_creation_on_message: T.unsafe(nil), long_lived: T.unsafe(nil), janitor_enabled: T.unsafe(nil), integration_retry_count: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::FlexApi::V1::FlexFlowList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(friendly_name: T.unsafe(nil), chat_service_sid: T.unsafe(nil), channel_type: T.unsafe(nil), contact_identity: T.unsafe(nil), enabled: T.unsafe(nil), integration_type: T.unsafe(nil), integration_flow_sid: T.unsafe(nil), integration_url: T.unsafe(nil), integration_workspace_sid: T.unsafe(nil), integration_workflow_sid: T.unsafe(nil), integration_channel: T.unsafe(nil), integration_timeout: T.unsafe(nil), integration_priority: T.unsafe(nil), integration_creation_on_message: T.unsafe(nil), long_lived: T.unsafe(nil), janitor_enabled: T.unsafe(nil), integration_retry_count: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(friendly_name: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(friendly_name: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(friendly_name: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::FlexApi::V1::FlexFlowPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::FlexApi::V1::GoodDataContext < ::Twilio::REST::InstanceContext
  def initialize(version); end

  def create(token: T.unsafe(nil)); end
  def inspect; end
  def to_s; end
end

class Twilio::REST::FlexApi::V1::GoodDataInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload); end

  def context; end
  def create(token: T.unsafe(nil)); end
  def gd_base_url; end
  def inspect; end
  def session_expiry; end
  def session_id; end
  def to_s; end
  def url; end
  def workspace_id; end
end

class Twilio::REST::FlexApi::V1::GoodDataList < ::Twilio::REST::ListResource
  def initialize(version); end

  def to_s; end
end

class Twilio::REST::FlexApi::V1::GoodDataPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::FlexApi::V1::InteractionContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def channels(sid = T.unsafe(nil)); end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::FlexApi::V1::InteractionContext::InteractionChannelContext < ::Twilio::REST::InstanceContext
  def initialize(version, interaction_sid, sid); end

  def fetch; end
  def inspect; end
  def invites; end
  def participants(sid = T.unsafe(nil)); end
  def to_s; end
  def update(status: T.unsafe(nil), routing: T.unsafe(nil)); end
end

class Twilio::REST::FlexApi::V1::InteractionContext::InteractionChannelContext::InteractionChannelInviteInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, interaction_sid: T.unsafe(nil), channel_sid: T.unsafe(nil)); end

  def channel_sid; end
  def inspect; end
  def interaction_sid; end
  def routing; end
  def sid; end
  def to_s; end
  def url; end
end

class Twilio::REST::FlexApi::V1::InteractionContext::InteractionChannelContext::InteractionChannelInviteList < ::Twilio::REST::ListResource
  def initialize(version, interaction_sid: T.unsafe(nil), channel_sid: T.unsafe(nil)); end

  def create(routing: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::FlexApi::V1::InteractionContext::InteractionChannelContext::InteractionChannelInvitePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::FlexApi::V1::InteractionContext::InteractionChannelContext::InteractionChannelParticipantContext < ::Twilio::REST::InstanceContext
  def initialize(version, interaction_sid, channel_sid, sid); end

  def inspect; end
  def to_s; end
  def update(status: T.unsafe(nil)); end
end

class Twilio::REST::FlexApi::V1::InteractionContext::InteractionChannelContext::InteractionChannelParticipantInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, interaction_sid: T.unsafe(nil), channel_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def channel_sid; end
  def context; end
  def inspect; end
  def interaction_sid; end
  def sid; end
  def to_s; end
  def type; end
  def update(status: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::FlexApi::V1::InteractionContext::InteractionChannelContext::InteractionChannelParticipantList < ::Twilio::REST::ListResource
  def initialize(version, interaction_sid: T.unsafe(nil), channel_sid: T.unsafe(nil)); end

  def create(type: T.unsafe(nil), media_properties: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::FlexApi::V1::InteractionContext::InteractionChannelContext::InteractionChannelParticipantPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::FlexApi::V1::InteractionContext::InteractionChannelInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, interaction_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def context; end
  def error_code; end
  def error_message; end
  def fetch; end
  def inspect; end
  def interaction_sid; end
  def invites; end
  def links; end
  def participants; end
  def sid; end
  def status; end
  def to_s; end
  def type; end
  def update(status: T.unsafe(nil), routing: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::FlexApi::V1::InteractionContext::InteractionChannelList < ::Twilio::REST::ListResource
  def initialize(version, interaction_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::FlexApi::V1::InteractionContext::InteractionChannelPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::FlexApi::V1::InteractionInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def channel; end
  def channels; end
  def context; end
  def fetch; end
  def inspect; end
  def links; end
  def routing; end
  def sid; end
  def to_s; end
  def url; end
end

class Twilio::REST::FlexApi::V1::InteractionList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(channel: T.unsafe(nil), routing: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::FlexApi::V1::InteractionPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::FlexApi::V1::UserRolesContext < ::Twilio::REST::InstanceContext
  def initialize(version); end

  def fetch(token: T.unsafe(nil)); end
  def inspect; end
  def to_s; end
end

class Twilio::REST::FlexApi::V1::UserRolesInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload); end

  def context; end
  def fetch(token: T.unsafe(nil)); end
  def inspect; end
  def roles; end
  def to_s; end
  def url; end
end

class Twilio::REST::FlexApi::V1::UserRolesList < ::Twilio::REST::ListResource
  def initialize(version); end

  def to_s; end
end

class Twilio::REST::FlexApi::V1::UserRolesPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::FlexApi::V1::WebChannelContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(chat_status: T.unsafe(nil), post_engagement_data: T.unsafe(nil)); end
end

class Twilio::REST::FlexApi::V1::WebChannelInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def flex_flow_sid; end
  def inspect; end
  def sid; end
  def to_s; end
  def update(chat_status: T.unsafe(nil), post_engagement_data: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::FlexApi::V1::WebChannelList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(flex_flow_sid: T.unsafe(nil), identity: T.unsafe(nil), customer_friendly_name: T.unsafe(nil), chat_friendly_name: T.unsafe(nil), chat_unique_name: T.unsafe(nil), pre_engagement_data: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::FlexApi::V1::WebChannelPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::FrontlineApi < ::Twilio::REST::Domain
  def initialize(twilio); end

  def to_s; end
  def users(sid = T.unsafe(nil)); end
  def v1; end
end

class Twilio::REST::FrontlineApi::V1 < ::Twilio::REST::Version
  def initialize(domain); end

  def to_s; end
  def users(sid = T.unsafe(nil)); end
end

class Twilio::REST::FrontlineApi::V1::UserContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), avatar: T.unsafe(nil), state: T.unsafe(nil), is_available: T.unsafe(nil)); end
end

class Twilio::REST::FrontlineApi::V1::UserInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def avatar; end
  def context; end
  def fetch; end
  def friendly_name; end
  def identity; end
  def inspect; end
  def is_available; end
  def sid; end
  def state; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), avatar: T.unsafe(nil), state: T.unsafe(nil), is_available: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::FrontlineApi::V1::UserList < ::Twilio::REST::ListResource
  def initialize(version); end

  def to_s; end
end

class Twilio::REST::FrontlineApi::V1::UserPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Insights < ::Twilio::REST::Domain
  def initialize(twilio); end

  def call_summaries; end
  def calls(sid = T.unsafe(nil)); end
  def conferences(conference_sid = T.unsafe(nil)); end
  def rooms(room_sid = T.unsafe(nil)); end
  def settings; end
  def to_s; end
  def v1; end
end

class Twilio::REST::Insights::V1 < ::Twilio::REST::Version
  def initialize(domain); end

  def call_summaries; end
  def calls(sid = T.unsafe(nil)); end
  def conferences(conference_sid = T.unsafe(nil)); end
  def rooms(room_sid = T.unsafe(nil)); end
  def settings; end
  def to_s; end
end

class Twilio::REST::Insights::V1::CallContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def annotation; end
  def events; end
  def fetch; end
  def inspect; end
  def metrics; end
  def summary; end
  def to_s; end
end

class Twilio::REST::Insights::V1::CallContext::AnnotationContext < ::Twilio::REST::InstanceContext
  def initialize(version, call_sid); end

  def fetch; end
  def inspect; end
  def to_s; end
  def update(answered_by: T.unsafe(nil), connectivity_issue: T.unsafe(nil), quality_issues: T.unsafe(nil), spam: T.unsafe(nil), call_score: T.unsafe(nil), comment: T.unsafe(nil), incident: T.unsafe(nil)); end
end

class Twilio::REST::Insights::V1::CallContext::AnnotationInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, call_sid: T.unsafe(nil)); end

  def account_sid; end
  def answered_by; end
  def call_score; end
  def call_sid; end
  def comment; end
  def connectivity_issue; end
  def context; end
  def fetch; end
  def incident; end
  def inspect; end
  def quality_issues; end
  def spam; end
  def to_s; end
  def update(answered_by: T.unsafe(nil), connectivity_issue: T.unsafe(nil), quality_issues: T.unsafe(nil), spam: T.unsafe(nil), call_score: T.unsafe(nil), comment: T.unsafe(nil), incident: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Insights::V1::CallContext::AnnotationList < ::Twilio::REST::ListResource
  def initialize(version, call_sid: T.unsafe(nil)); end

  def to_s; end
end

class Twilio::REST::Insights::V1::CallContext::AnnotationPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Insights::V1::CallContext::CallSummaryContext < ::Twilio::REST::InstanceContext
  def initialize(version, call_sid); end

  def fetch(processing_state: T.unsafe(nil)); end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Insights::V1::CallContext::CallSummaryInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, call_sid: T.unsafe(nil)); end

  def account_sid; end
  def annotation; end
  def answered_by; end
  def attributes; end
  def call_sid; end
  def call_state; end
  def call_type; end
  def carrier_edge; end
  def client_edge; end
  def connect_duration; end
  def context; end
  def created_time; end
  def duration; end
  def end_time; end
  def fetch(processing_state: T.unsafe(nil)); end
  def from; end
  def inspect; end
  def processing_state; end
  def properties; end
  def sdk_edge; end
  def sip_edge; end
  def start_time; end
  def tags; end
  def to; end
  def to_s; end
  def trust; end
  def url; end
end

class Twilio::REST::Insights::V1::CallContext::CallSummaryList < ::Twilio::REST::ListResource
  def initialize(version, call_sid: T.unsafe(nil)); end

  def to_s; end
end

class Twilio::REST::Insights::V1::CallContext::CallSummaryPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Insights::V1::CallContext::EventInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, call_sid: T.unsafe(nil)); end

  def account_sid; end
  def call_sid; end
  def carrier_edge; end
  def client_edge; end
  def edge; end
  def group; end
  def inspect; end
  def level; end
  def name; end
  def sdk_edge; end
  def sip_edge; end
  def timestamp; end
  def to_s; end
end

class Twilio::REST::Insights::V1::CallContext::EventList < ::Twilio::REST::ListResource
  def initialize(version, call_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(edge: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(edge: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(edge: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Insights::V1::CallContext::EventPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Insights::V1::CallContext::MetricInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, call_sid: T.unsafe(nil)); end

  def account_sid; end
  def call_sid; end
  def carrier_edge; end
  def client_edge; end
  def direction; end
  def edge; end
  def inspect; end
  def sdk_edge; end
  def sip_edge; end
  def timestamp; end
  def to_s; end
end

class Twilio::REST::Insights::V1::CallContext::MetricList < ::Twilio::REST::ListResource
  def initialize(version, call_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(edge: T.unsafe(nil), direction: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(edge: T.unsafe(nil), direction: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(edge: T.unsafe(nil), direction: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Insights::V1::CallContext::MetricPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Insights::V1::CallInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def annotation; end
  def context; end
  def events; end
  def fetch; end
  def inspect; end
  def links; end
  def metrics; end
  def sid; end
  def summary; end
  def to_s; end
  def url; end
end

class Twilio::REST::Insights::V1::CallList < ::Twilio::REST::ListResource
  def initialize(version); end

  def to_s; end
end

class Twilio::REST::Insights::V1::CallPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Insights::V1::CallSummariesInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload); end

  def account_sid; end
  def answered_by; end
  def attributes; end
  def call_sid; end
  def call_state; end
  def call_type; end
  def carrier_edge; end
  def client_edge; end
  def connect_duration; end
  def created_time; end
  def duration; end
  def end_time; end
  def from; end
  def inspect; end
  def processing_state; end
  def properties; end
  def sdk_edge; end
  def sip_edge; end
  def start_time; end
  def tags; end
  def to; end
  def to_s; end
  def trust; end
  def url; end
end

class Twilio::REST::Insights::V1::CallSummariesList < ::Twilio::REST::ListResource
  def initialize(version); end

  def each; end
  def get_page(target_url); end
  def list(from: T.unsafe(nil), to: T.unsafe(nil), from_carrier: T.unsafe(nil), to_carrier: T.unsafe(nil), from_country_code: T.unsafe(nil), to_country_code: T.unsafe(nil), branded: T.unsafe(nil), verified_caller: T.unsafe(nil), has_tag: T.unsafe(nil), start_time: T.unsafe(nil), end_time: T.unsafe(nil), call_type: T.unsafe(nil), call_state: T.unsafe(nil), direction: T.unsafe(nil), processing_state: T.unsafe(nil), sort_by: T.unsafe(nil), subaccount: T.unsafe(nil), abnormal_session: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(from: T.unsafe(nil), to: T.unsafe(nil), from_carrier: T.unsafe(nil), to_carrier: T.unsafe(nil), from_country_code: T.unsafe(nil), to_country_code: T.unsafe(nil), branded: T.unsafe(nil), verified_caller: T.unsafe(nil), has_tag: T.unsafe(nil), start_time: T.unsafe(nil), end_time: T.unsafe(nil), call_type: T.unsafe(nil), call_state: T.unsafe(nil), direction: T.unsafe(nil), processing_state: T.unsafe(nil), sort_by: T.unsafe(nil), subaccount: T.unsafe(nil), abnormal_session: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(from: T.unsafe(nil), to: T.unsafe(nil), from_carrier: T.unsafe(nil), to_carrier: T.unsafe(nil), from_country_code: T.unsafe(nil), to_country_code: T.unsafe(nil), branded: T.unsafe(nil), verified_caller: T.unsafe(nil), has_tag: T.unsafe(nil), start_time: T.unsafe(nil), end_time: T.unsafe(nil), call_type: T.unsafe(nil), call_state: T.unsafe(nil), direction: T.unsafe(nil), processing_state: T.unsafe(nil), sort_by: T.unsafe(nil), subaccount: T.unsafe(nil), abnormal_session: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Insights::V1::CallSummariesPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Insights::V1::ConferenceContext < ::Twilio::REST::InstanceContext
  def initialize(version, conference_sid); end

  def conference_participants(participant_sid = T.unsafe(nil)); end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Insights::V1::ConferenceContext::ConferenceParticipantContext < ::Twilio::REST::InstanceContext
  def initialize(version, conference_sid, participant_sid); end

  def fetch(events: T.unsafe(nil), metrics: T.unsafe(nil)); end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Insights::V1::ConferenceContext::ConferenceParticipantInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, conference_sid: T.unsafe(nil), participant_sid: T.unsafe(nil)); end

  def account_sid; end
  def call_direction; end
  def call_sid; end
  def call_status; end
  def call_type; end
  def coached_participants; end
  def conference_region; end
  def conference_sid; end
  def context; end
  def country_code; end
  def duration_seconds; end
  def events; end
  def fetch(events: T.unsafe(nil), metrics: T.unsafe(nil)); end
  def from; end
  def inspect; end
  def is_coach; end
  def is_moderator; end
  def jitter_buffer_size; end
  def join_time; end
  def label; end
  def leave_time; end
  def metrics; end
  def outbound_queue_length; end
  def outbound_time_in_queue; end
  def participant_region; end
  def participant_sid; end
  def processing_state; end
  def properties; end
  def to; end
  def to_s; end
  def url; end
end

class Twilio::REST::Insights::V1::ConferenceContext::ConferenceParticipantList < ::Twilio::REST::ListResource
  def initialize(version, conference_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(participant_sid: T.unsafe(nil), label: T.unsafe(nil), events: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(participant_sid: T.unsafe(nil), label: T.unsafe(nil), events: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(participant_sid: T.unsafe(nil), label: T.unsafe(nil), events: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Insights::V1::ConferenceContext::ConferenceParticipantPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Insights::V1::ConferenceInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, conference_sid: T.unsafe(nil)); end

  def account_sid; end
  def conference_participants; end
  def conference_sid; end
  def connect_duration_seconds; end
  def context; end
  def create_time; end
  def detected_issues; end
  def duration_seconds; end
  def end_reason; end
  def end_time; end
  def ended_by; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def links; end
  def max_concurrent_participants; end
  def max_participants; end
  def mixer_region; end
  def mixer_region_requested; end
  def processing_state; end
  def recording_enabled; end
  def start_time; end
  def status; end
  def tag_info; end
  def tags; end
  def to_s; end
  def unique_participants; end
  def url; end
end

class Twilio::REST::Insights::V1::ConferenceList < ::Twilio::REST::ListResource
  def initialize(version); end

  def each; end
  def get_page(target_url); end
  def list(conference_sid: T.unsafe(nil), friendly_name: T.unsafe(nil), status: T.unsafe(nil), created_after: T.unsafe(nil), created_before: T.unsafe(nil), mixer_region: T.unsafe(nil), tags: T.unsafe(nil), subaccount: T.unsafe(nil), detected_issues: T.unsafe(nil), end_reason: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(conference_sid: T.unsafe(nil), friendly_name: T.unsafe(nil), status: T.unsafe(nil), created_after: T.unsafe(nil), created_before: T.unsafe(nil), mixer_region: T.unsafe(nil), tags: T.unsafe(nil), subaccount: T.unsafe(nil), detected_issues: T.unsafe(nil), end_reason: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(conference_sid: T.unsafe(nil), friendly_name: T.unsafe(nil), status: T.unsafe(nil), created_after: T.unsafe(nil), created_before: T.unsafe(nil), mixer_region: T.unsafe(nil), tags: T.unsafe(nil), subaccount: T.unsafe(nil), detected_issues: T.unsafe(nil), end_reason: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Insights::V1::ConferencePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Insights::V1::RoomContext < ::Twilio::REST::InstanceContext
  def initialize(version, room_sid); end

  def fetch; end
  def inspect; end
  def participants(participant_sid = T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Insights::V1::RoomContext::ParticipantContext < ::Twilio::REST::InstanceContext
  def initialize(version, room_sid, participant_sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Insights::V1::RoomContext::ParticipantInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, room_sid: T.unsafe(nil), participant_sid: T.unsafe(nil)); end

  def account_sid; end
  def codecs; end
  def context; end
  def duration_sec; end
  def edge_location; end
  def end_reason; end
  def error_code; end
  def error_code_url; end
  def fetch; end
  def inspect; end
  def join_time; end
  def leave_time; end
  def media_region; end
  def participant_identity; end
  def participant_sid; end
  def properties; end
  def publisher_info; end
  def room_sid; end
  def status; end
  def to_s; end
  def url; end
end

class Twilio::REST::Insights::V1::RoomContext::ParticipantList < ::Twilio::REST::ListResource
  def initialize(version, room_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Insights::V1::RoomContext::ParticipantPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Insights::V1::RoomInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, room_sid: T.unsafe(nil)); end

  def account_sid; end
  def codecs; end
  def concurrent_participants; end
  def context; end
  def create_time; end
  def created_method; end
  def duration_sec; end
  def edge_location; end
  def end_reason; end
  def end_time; end
  def fetch; end
  def inspect; end
  def links; end
  def max_concurrent_participants; end
  def max_participants; end
  def media_region; end
  def participants; end
  def processing_state; end
  def recording_enabled; end
  def room_name; end
  def room_sid; end
  def room_status; end
  def room_type; end
  def status_callback; end
  def status_callback_method; end
  def to_s; end
  def total_participant_duration_sec; end
  def total_recording_duration_sec; end
  def unique_participant_identities; end
  def unique_participants; end
  def url; end
end

class Twilio::REST::Insights::V1::RoomList < ::Twilio::REST::ListResource
  def initialize(version); end

  def each; end
  def get_page(target_url); end
  def list(room_type: T.unsafe(nil), codec: T.unsafe(nil), room_name: T.unsafe(nil), created_after: T.unsafe(nil), created_before: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(room_type: T.unsafe(nil), codec: T.unsafe(nil), room_name: T.unsafe(nil), created_after: T.unsafe(nil), created_before: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(room_type: T.unsafe(nil), codec: T.unsafe(nil), room_name: T.unsafe(nil), created_after: T.unsafe(nil), created_before: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Insights::V1::RoomPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Insights::V1::SettingContext < ::Twilio::REST::InstanceContext
  def initialize(version); end

  def fetch(subaccount_sid: T.unsafe(nil)); end
  def inspect; end
  def to_s; end
  def update(advanced_features: T.unsafe(nil), voice_trace: T.unsafe(nil), subaccount_sid: T.unsafe(nil)); end
end

class Twilio::REST::Insights::V1::SettingInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload); end

  def account_sid; end
  def advanced_features; end
  def context; end
  def fetch(subaccount_sid: T.unsafe(nil)); end
  def inspect; end
  def to_s; end
  def update(advanced_features: T.unsafe(nil), voice_trace: T.unsafe(nil), subaccount_sid: T.unsafe(nil)); end
  def url; end
  def voice_trace; end
end

class Twilio::REST::Insights::V1::SettingList < ::Twilio::REST::ListResource
  def initialize(version); end

  def to_s; end
end

class Twilio::REST::Insights::V1::SettingPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::InstanceContext
  def initialize(version); end
end

class Twilio::REST::InstanceResource
  def initialize(version); end
end

class Twilio::REST::IpMessaging < ::Twilio::REST::Domain
  def initialize(twilio); end

  def credentials(sid = T.unsafe(nil)); end
  def services(sid = T.unsafe(nil)); end
  def to_s; end
  def v1; end
  def v2; end
end

class Twilio::REST::IpMessaging::V1 < ::Twilio::REST::Version
  def initialize(domain); end

  def credentials(sid = T.unsafe(nil)); end
  def services(sid = T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::IpMessaging::V1::CredentialContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), certificate: T.unsafe(nil), private_key: T.unsafe(nil), sandbox: T.unsafe(nil), api_key: T.unsafe(nil), secret: T.unsafe(nil)); end
end

class Twilio::REST::IpMessaging::V1::CredentialInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def sandbox; end
  def sid; end
  def to_s; end
  def type; end
  def update(friendly_name: T.unsafe(nil), certificate: T.unsafe(nil), private_key: T.unsafe(nil), sandbox: T.unsafe(nil), api_key: T.unsafe(nil), secret: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::IpMessaging::V1::CredentialList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(type: T.unsafe(nil), friendly_name: T.unsafe(nil), certificate: T.unsafe(nil), private_key: T.unsafe(nil), sandbox: T.unsafe(nil), api_key: T.unsafe(nil), secret: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::IpMessaging::V1::CredentialPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::IpMessaging::V1::ServiceContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def channels(sid = T.unsafe(nil)); end
  def delete; end
  def fetch; end
  def inspect; end
  def roles(sid = T.unsafe(nil)); end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), default_service_role_sid: T.unsafe(nil), default_channel_role_sid: T.unsafe(nil), default_channel_creator_role_sid: T.unsafe(nil), read_status_enabled: T.unsafe(nil), reachability_enabled: T.unsafe(nil), typing_indicator_timeout: T.unsafe(nil), consumption_report_interval: T.unsafe(nil), notifications_new_message_enabled: T.unsafe(nil), notifications_new_message_template: T.unsafe(nil), notifications_added_to_channel_enabled: T.unsafe(nil), notifications_added_to_channel_template: T.unsafe(nil), notifications_removed_from_channel_enabled: T.unsafe(nil), notifications_removed_from_channel_template: T.unsafe(nil), notifications_invited_to_channel_enabled: T.unsafe(nil), notifications_invited_to_channel_template: T.unsafe(nil), pre_webhook_url: T.unsafe(nil), post_webhook_url: T.unsafe(nil), webhook_method: T.unsafe(nil), webhook_filters: T.unsafe(nil), webhooks_on_message_send_url: T.unsafe(nil), webhooks_on_message_send_method: T.unsafe(nil), webhooks_on_message_update_url: T.unsafe(nil), webhooks_on_message_update_method: T.unsafe(nil), webhooks_on_message_remove_url: T.unsafe(nil), webhooks_on_message_remove_method: T.unsafe(nil), webhooks_on_channel_add_url: T.unsafe(nil), webhooks_on_channel_add_method: T.unsafe(nil), webhooks_on_channel_destroy_url: T.unsafe(nil), webhooks_on_channel_destroy_method: T.unsafe(nil), webhooks_on_channel_update_url: T.unsafe(nil), webhooks_on_channel_update_method: T.unsafe(nil), webhooks_on_member_add_url: T.unsafe(nil), webhooks_on_member_add_method: T.unsafe(nil), webhooks_on_member_remove_url: T.unsafe(nil), webhooks_on_member_remove_method: T.unsafe(nil), webhooks_on_message_sent_url: T.unsafe(nil), webhooks_on_message_sent_method: T.unsafe(nil), webhooks_on_message_updated_url: T.unsafe(nil), webhooks_on_message_updated_method: T.unsafe(nil), webhooks_on_message_removed_url: T.unsafe(nil), webhooks_on_message_removed_method: T.unsafe(nil), webhooks_on_channel_added_url: T.unsafe(nil), webhooks_on_channel_added_method: T.unsafe(nil), webhooks_on_channel_destroyed_url: T.unsafe(nil), webhooks_on_channel_destroyed_method: T.unsafe(nil), webhooks_on_channel_updated_url: T.unsafe(nil), webhooks_on_channel_updated_method: T.unsafe(nil), webhooks_on_member_added_url: T.unsafe(nil), webhooks_on_member_added_method: T.unsafe(nil), webhooks_on_member_removed_url: T.unsafe(nil), webhooks_on_member_removed_method: T.unsafe(nil), limits_channel_members: T.unsafe(nil), limits_user_channels: T.unsafe(nil)); end
  def users(sid = T.unsafe(nil)); end
end

class Twilio::REST::IpMessaging::V1::ServiceContext::ChannelContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def invites(sid = T.unsafe(nil)); end
  def members(sid = T.unsafe(nil)); end
  def messages(sid = T.unsafe(nil)); end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), unique_name: T.unsafe(nil), attributes: T.unsafe(nil)); end
end

class Twilio::REST::IpMessaging::V1::ServiceContext::ChannelContext::InviteContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, channel_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::IpMessaging::V1::ServiceContext::ChannelContext::InviteInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), channel_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def channel_sid; end
  def context; end
  def created_by; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def identity; end
  def inspect; end
  def role_sid; end
  def service_sid; end
  def sid; end
  def to_s; end
  def url; end
end

class Twilio::REST::IpMessaging::V1::ServiceContext::ChannelContext::InviteList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil), channel_sid: T.unsafe(nil)); end

  def create(identity: T.unsafe(nil), role_sid: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(identity: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(identity: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(identity: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::IpMessaging::V1::ServiceContext::ChannelContext::InvitePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::IpMessaging::V1::ServiceContext::ChannelContext::MemberContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, channel_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(role_sid: T.unsafe(nil), last_consumed_message_index: T.unsafe(nil)); end
end

class Twilio::REST::IpMessaging::V1::ServiceContext::ChannelContext::MemberInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), channel_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def channel_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def identity; end
  def inspect; end
  def last_consumed_message_index; end
  def last_consumption_timestamp; end
  def role_sid; end
  def service_sid; end
  def sid; end
  def to_s; end
  def update(role_sid: T.unsafe(nil), last_consumed_message_index: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::IpMessaging::V1::ServiceContext::ChannelContext::MemberList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil), channel_sid: T.unsafe(nil)); end

  def create(identity: T.unsafe(nil), role_sid: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(identity: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(identity: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(identity: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::IpMessaging::V1::ServiceContext::ChannelContext::MemberPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::IpMessaging::V1::ServiceContext::ChannelContext::MessageContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, channel_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(body: T.unsafe(nil), attributes: T.unsafe(nil)); end
end

class Twilio::REST::IpMessaging::V1::ServiceContext::ChannelContext::MessageInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), channel_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def attributes; end
  def body; end
  def channel_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def from; end
  def index; end
  def inspect; end
  def service_sid; end
  def sid; end
  def to; end
  def to_s; end
  def update(body: T.unsafe(nil), attributes: T.unsafe(nil)); end
  def url; end
  def was_edited; end
end

class Twilio::REST::IpMessaging::V1::ServiceContext::ChannelContext::MessageList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil), channel_sid: T.unsafe(nil)); end

  def create(body: T.unsafe(nil), from: T.unsafe(nil), attributes: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(order: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(order: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(order: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::IpMessaging::V1::ServiceContext::ChannelContext::MessagePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::IpMessaging::V1::ServiceContext::ChannelInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def attributes; end
  def context; end
  def created_by; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def invites; end
  def links; end
  def members; end
  def members_count; end
  def messages; end
  def messages_count; end
  def service_sid; end
  def sid; end
  def to_s; end
  def type; end
  def unique_name; end
  def update(friendly_name: T.unsafe(nil), unique_name: T.unsafe(nil), attributes: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::IpMessaging::V1::ServiceContext::ChannelList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil)); end

  def create(friendly_name: T.unsafe(nil), unique_name: T.unsafe(nil), attributes: T.unsafe(nil), type: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(type: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(type: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(type: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::IpMessaging::V1::ServiceContext::ChannelPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::IpMessaging::V1::ServiceContext::RoleContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(permission: T.unsafe(nil)); end
end

class Twilio::REST::IpMessaging::V1::ServiceContext::RoleInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def permissions; end
  def service_sid; end
  def sid; end
  def to_s; end
  def type; end
  def update(permission: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::IpMessaging::V1::ServiceContext::RoleList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil)); end

  def create(friendly_name: T.unsafe(nil), type: T.unsafe(nil), permission: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::IpMessaging::V1::ServiceContext::RolePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::IpMessaging::V1::ServiceContext::UserContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(role_sid: T.unsafe(nil), attributes: T.unsafe(nil), friendly_name: T.unsafe(nil)); end
  def user_channels; end
end

class Twilio::REST::IpMessaging::V1::ServiceContext::UserContext::UserChannelInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), user_sid: T.unsafe(nil)); end

  def account_sid; end
  def channel_sid; end
  def inspect; end
  def last_consumed_message_index; end
  def links; end
  def member_sid; end
  def service_sid; end
  def status; end
  def to_s; end
  def unread_messages_count; end
end

class Twilio::REST::IpMessaging::V1::ServiceContext::UserContext::UserChannelList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil), user_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::IpMessaging::V1::ServiceContext::UserContext::UserChannelPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::IpMessaging::V1::ServiceContext::UserInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def attributes; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def identity; end
  def inspect; end
  def is_notifiable; end
  def is_online; end
  def joined_channels_count; end
  def links; end
  def role_sid; end
  def service_sid; end
  def sid; end
  def to_s; end
  def update(role_sid: T.unsafe(nil), attributes: T.unsafe(nil), friendly_name: T.unsafe(nil)); end
  def url; end
  def user_channels; end
end

class Twilio::REST::IpMessaging::V1::ServiceContext::UserList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil)); end

  def create(identity: T.unsafe(nil), role_sid: T.unsafe(nil), attributes: T.unsafe(nil), friendly_name: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::IpMessaging::V1::ServiceContext::UserPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::IpMessaging::V1::ServiceInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def channels; end
  def consumption_report_interval; end
  def context; end
  def date_created; end
  def date_updated; end
  def default_channel_creator_role_sid; end
  def default_channel_role_sid; end
  def default_service_role_sid; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def limits; end
  def links; end
  def notifications; end
  def post_webhook_url; end
  def pre_webhook_url; end
  def reachability_enabled; end
  def read_status_enabled; end
  def roles; end
  def sid; end
  def to_s; end
  def typing_indicator_timeout; end
  def update(friendly_name: T.unsafe(nil), default_service_role_sid: T.unsafe(nil), default_channel_role_sid: T.unsafe(nil), default_channel_creator_role_sid: T.unsafe(nil), read_status_enabled: T.unsafe(nil), reachability_enabled: T.unsafe(nil), typing_indicator_timeout: T.unsafe(nil), consumption_report_interval: T.unsafe(nil), notifications_new_message_enabled: T.unsafe(nil), notifications_new_message_template: T.unsafe(nil), notifications_added_to_channel_enabled: T.unsafe(nil), notifications_added_to_channel_template: T.unsafe(nil), notifications_removed_from_channel_enabled: T.unsafe(nil), notifications_removed_from_channel_template: T.unsafe(nil), notifications_invited_to_channel_enabled: T.unsafe(nil), notifications_invited_to_channel_template: T.unsafe(nil), pre_webhook_url: T.unsafe(nil), post_webhook_url: T.unsafe(nil), webhook_method: T.unsafe(nil), webhook_filters: T.unsafe(nil), webhooks_on_message_send_url: T.unsafe(nil), webhooks_on_message_send_method: T.unsafe(nil), webhooks_on_message_update_url: T.unsafe(nil), webhooks_on_message_update_method: T.unsafe(nil), webhooks_on_message_remove_url: T.unsafe(nil), webhooks_on_message_remove_method: T.unsafe(nil), webhooks_on_channel_add_url: T.unsafe(nil), webhooks_on_channel_add_method: T.unsafe(nil), webhooks_on_channel_destroy_url: T.unsafe(nil), webhooks_on_channel_destroy_method: T.unsafe(nil), webhooks_on_channel_update_url: T.unsafe(nil), webhooks_on_channel_update_method: T.unsafe(nil), webhooks_on_member_add_url: T.unsafe(nil), webhooks_on_member_add_method: T.unsafe(nil), webhooks_on_member_remove_url: T.unsafe(nil), webhooks_on_member_remove_method: T.unsafe(nil), webhooks_on_message_sent_url: T.unsafe(nil), webhooks_on_message_sent_method: T.unsafe(nil), webhooks_on_message_updated_url: T.unsafe(nil), webhooks_on_message_updated_method: T.unsafe(nil), webhooks_on_message_removed_url: T.unsafe(nil), webhooks_on_message_removed_method: T.unsafe(nil), webhooks_on_channel_added_url: T.unsafe(nil), webhooks_on_channel_added_method: T.unsafe(nil), webhooks_on_channel_destroyed_url: T.unsafe(nil), webhooks_on_channel_destroyed_method: T.unsafe(nil), webhooks_on_channel_updated_url: T.unsafe(nil), webhooks_on_channel_updated_method: T.unsafe(nil), webhooks_on_member_added_url: T.unsafe(nil), webhooks_on_member_added_method: T.unsafe(nil), webhooks_on_member_removed_url: T.unsafe(nil), webhooks_on_member_removed_method: T.unsafe(nil), limits_channel_members: T.unsafe(nil), limits_user_channels: T.unsafe(nil)); end
  def url; end
  def users; end
  def webhook_filters; end
  def webhook_method; end
  def webhooks; end
end

class Twilio::REST::IpMessaging::V1::ServiceList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(friendly_name: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::IpMessaging::V1::ServicePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::IpMessaging::V2 < ::Twilio::REST::Version
  def initialize(domain); end

  def credentials(sid = T.unsafe(nil)); end
  def services(sid = T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::IpMessaging::V2::CredentialContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), certificate: T.unsafe(nil), private_key: T.unsafe(nil), sandbox: T.unsafe(nil), api_key: T.unsafe(nil), secret: T.unsafe(nil)); end
end

class Twilio::REST::IpMessaging::V2::CredentialInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def sandbox; end
  def sid; end
  def to_s; end
  def type; end
  def update(friendly_name: T.unsafe(nil), certificate: T.unsafe(nil), private_key: T.unsafe(nil), sandbox: T.unsafe(nil), api_key: T.unsafe(nil), secret: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::IpMessaging::V2::CredentialList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(type: T.unsafe(nil), friendly_name: T.unsafe(nil), certificate: T.unsafe(nil), private_key: T.unsafe(nil), sandbox: T.unsafe(nil), api_key: T.unsafe(nil), secret: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::IpMessaging::V2::CredentialPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::IpMessaging::V2::ServiceContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def bindings(sid = T.unsafe(nil)); end
  def channels(sid = T.unsafe(nil)); end
  def delete; end
  def fetch; end
  def inspect; end
  def roles(sid = T.unsafe(nil)); end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), default_service_role_sid: T.unsafe(nil), default_channel_role_sid: T.unsafe(nil), default_channel_creator_role_sid: T.unsafe(nil), read_status_enabled: T.unsafe(nil), reachability_enabled: T.unsafe(nil), typing_indicator_timeout: T.unsafe(nil), consumption_report_interval: T.unsafe(nil), notifications_new_message_enabled: T.unsafe(nil), notifications_new_message_template: T.unsafe(nil), notifications_new_message_sound: T.unsafe(nil), notifications_new_message_badge_count_enabled: T.unsafe(nil), notifications_added_to_channel_enabled: T.unsafe(nil), notifications_added_to_channel_template: T.unsafe(nil), notifications_added_to_channel_sound: T.unsafe(nil), notifications_removed_from_channel_enabled: T.unsafe(nil), notifications_removed_from_channel_template: T.unsafe(nil), notifications_removed_from_channel_sound: T.unsafe(nil), notifications_invited_to_channel_enabled: T.unsafe(nil), notifications_invited_to_channel_template: T.unsafe(nil), notifications_invited_to_channel_sound: T.unsafe(nil), pre_webhook_url: T.unsafe(nil), post_webhook_url: T.unsafe(nil), webhook_method: T.unsafe(nil), webhook_filters: T.unsafe(nil), limits_channel_members: T.unsafe(nil), limits_user_channels: T.unsafe(nil), media_compatibility_message: T.unsafe(nil), pre_webhook_retry_count: T.unsafe(nil), post_webhook_retry_count: T.unsafe(nil), notifications_log_enabled: T.unsafe(nil)); end
  def users(sid = T.unsafe(nil)); end
end

class Twilio::REST::IpMessaging::V2::ServiceContext::BindingContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::IpMessaging::V2::ServiceContext::BindingInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def binding_type; end
  def context; end
  def credential_sid; end
  def date_created; end
  def date_updated; end
  def delete; end
  def endpoint; end
  def fetch; end
  def identity; end
  def inspect; end
  def links; end
  def message_types; end
  def service_sid; end
  def sid; end
  def to_s; end
  def url; end
end

class Twilio::REST::IpMessaging::V2::ServiceContext::BindingList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(binding_type: T.unsafe(nil), identity: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(binding_type: T.unsafe(nil), identity: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(binding_type: T.unsafe(nil), identity: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::IpMessaging::V2::ServiceContext::BindingPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::IpMessaging::V2::ServiceContext::ChannelContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, sid); end

  def delete(x_twilio_webhook_enabled: T.unsafe(nil)); end
  def fetch; end
  def inspect; end
  def invites(sid = T.unsafe(nil)); end
  def members(sid = T.unsafe(nil)); end
  def messages(sid = T.unsafe(nil)); end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), unique_name: T.unsafe(nil), attributes: T.unsafe(nil), date_created: T.unsafe(nil), date_updated: T.unsafe(nil), created_by: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
  def webhooks(sid = T.unsafe(nil)); end
end

class Twilio::REST::IpMessaging::V2::ServiceContext::ChannelContext::InviteContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, channel_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::IpMessaging::V2::ServiceContext::ChannelContext::InviteInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), channel_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def channel_sid; end
  def context; end
  def created_by; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def identity; end
  def inspect; end
  def role_sid; end
  def service_sid; end
  def sid; end
  def to_s; end
  def url; end
end

class Twilio::REST::IpMessaging::V2::ServiceContext::ChannelContext::InviteList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil), channel_sid: T.unsafe(nil)); end

  def create(identity: T.unsafe(nil), role_sid: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(identity: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(identity: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(identity: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::IpMessaging::V2::ServiceContext::ChannelContext::InvitePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::IpMessaging::V2::ServiceContext::ChannelContext::MemberContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, channel_sid, sid); end

  def delete(x_twilio_webhook_enabled: T.unsafe(nil)); end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(role_sid: T.unsafe(nil), last_consumed_message_index: T.unsafe(nil), last_consumption_timestamp: T.unsafe(nil), date_created: T.unsafe(nil), date_updated: T.unsafe(nil), attributes: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
end

class Twilio::REST::IpMessaging::V2::ServiceContext::ChannelContext::MemberInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), channel_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def attributes; end
  def channel_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete(x_twilio_webhook_enabled: T.unsafe(nil)); end
  def fetch; end
  def identity; end
  def inspect; end
  def last_consumed_message_index; end
  def last_consumption_timestamp; end
  def role_sid; end
  def service_sid; end
  def sid; end
  def to_s; end
  def update(role_sid: T.unsafe(nil), last_consumed_message_index: T.unsafe(nil), last_consumption_timestamp: T.unsafe(nil), date_created: T.unsafe(nil), date_updated: T.unsafe(nil), attributes: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::IpMessaging::V2::ServiceContext::ChannelContext::MemberList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil), channel_sid: T.unsafe(nil)); end

  def create(identity: T.unsafe(nil), role_sid: T.unsafe(nil), last_consumed_message_index: T.unsafe(nil), last_consumption_timestamp: T.unsafe(nil), date_created: T.unsafe(nil), date_updated: T.unsafe(nil), attributes: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(identity: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(identity: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(identity: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::IpMessaging::V2::ServiceContext::ChannelContext::MemberPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::IpMessaging::V2::ServiceContext::ChannelContext::MessageContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, channel_sid, sid); end

  def delete(x_twilio_webhook_enabled: T.unsafe(nil)); end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(body: T.unsafe(nil), attributes: T.unsafe(nil), date_created: T.unsafe(nil), date_updated: T.unsafe(nil), last_updated_by: T.unsafe(nil), from: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
end

class Twilio::REST::IpMessaging::V2::ServiceContext::ChannelContext::MessageInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), channel_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def attributes; end
  def body; end
  def channel_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete(x_twilio_webhook_enabled: T.unsafe(nil)); end
  def fetch; end
  def from; end
  def index; end
  def inspect; end
  def last_updated_by; end
  def media; end
  def service_sid; end
  def sid; end
  def to; end
  def to_s; end
  def type; end
  def update(body: T.unsafe(nil), attributes: T.unsafe(nil), date_created: T.unsafe(nil), date_updated: T.unsafe(nil), last_updated_by: T.unsafe(nil), from: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
  def url; end
  def was_edited; end
end

class Twilio::REST::IpMessaging::V2::ServiceContext::ChannelContext::MessageList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil), channel_sid: T.unsafe(nil)); end

  def create(from: T.unsafe(nil), attributes: T.unsafe(nil), date_created: T.unsafe(nil), date_updated: T.unsafe(nil), last_updated_by: T.unsafe(nil), body: T.unsafe(nil), media_sid: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(order: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(order: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(order: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::IpMessaging::V2::ServiceContext::ChannelContext::MessagePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::IpMessaging::V2::ServiceContext::ChannelContext::WebhookContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, channel_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(configuration_url: T.unsafe(nil), configuration_method: T.unsafe(nil), configuration_filters: T.unsafe(nil), configuration_triggers: T.unsafe(nil), configuration_flow_sid: T.unsafe(nil), configuration_retry_count: T.unsafe(nil)); end
end

class Twilio::REST::IpMessaging::V2::ServiceContext::ChannelContext::WebhookInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), channel_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def channel_sid; end
  def configuration; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def inspect; end
  def service_sid; end
  def sid; end
  def to_s; end
  def type; end
  def update(configuration_url: T.unsafe(nil), configuration_method: T.unsafe(nil), configuration_filters: T.unsafe(nil), configuration_triggers: T.unsafe(nil), configuration_flow_sid: T.unsafe(nil), configuration_retry_count: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::IpMessaging::V2::ServiceContext::ChannelContext::WebhookList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil), channel_sid: T.unsafe(nil)); end

  def create(type: T.unsafe(nil), configuration_url: T.unsafe(nil), configuration_method: T.unsafe(nil), configuration_filters: T.unsafe(nil), configuration_triggers: T.unsafe(nil), configuration_flow_sid: T.unsafe(nil), configuration_retry_count: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::IpMessaging::V2::ServiceContext::ChannelContext::WebhookPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::IpMessaging::V2::ServiceContext::ChannelInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def attributes; end
  def context; end
  def created_by; end
  def date_created; end
  def date_updated; end
  def delete(x_twilio_webhook_enabled: T.unsafe(nil)); end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def invites; end
  def links; end
  def members; end
  def members_count; end
  def messages; end
  def messages_count; end
  def service_sid; end
  def sid; end
  def to_s; end
  def type; end
  def unique_name; end
  def update(friendly_name: T.unsafe(nil), unique_name: T.unsafe(nil), attributes: T.unsafe(nil), date_created: T.unsafe(nil), date_updated: T.unsafe(nil), created_by: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
  def url; end
  def webhooks; end
end

class Twilio::REST::IpMessaging::V2::ServiceContext::ChannelList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil)); end

  def create(friendly_name: T.unsafe(nil), unique_name: T.unsafe(nil), attributes: T.unsafe(nil), type: T.unsafe(nil), date_created: T.unsafe(nil), date_updated: T.unsafe(nil), created_by: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(type: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(type: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(type: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::IpMessaging::V2::ServiceContext::ChannelPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::IpMessaging::V2::ServiceContext::RoleContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(permission: T.unsafe(nil)); end
end

class Twilio::REST::IpMessaging::V2::ServiceContext::RoleInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def permissions; end
  def service_sid; end
  def sid; end
  def to_s; end
  def type; end
  def update(permission: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::IpMessaging::V2::ServiceContext::RoleList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil)); end

  def create(friendly_name: T.unsafe(nil), type: T.unsafe(nil), permission: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::IpMessaging::V2::ServiceContext::RolePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::IpMessaging::V2::ServiceContext::UserContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(role_sid: T.unsafe(nil), attributes: T.unsafe(nil), friendly_name: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
  def user_bindings(sid = T.unsafe(nil)); end
  def user_channels(channel_sid = T.unsafe(nil)); end
end

class Twilio::REST::IpMessaging::V2::ServiceContext::UserContext::UserBindingContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, user_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::IpMessaging::V2::ServiceContext::UserContext::UserBindingInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), user_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def binding_type; end
  def context; end
  def credential_sid; end
  def date_created; end
  def date_updated; end
  def delete; end
  def endpoint; end
  def fetch; end
  def identity; end
  def inspect; end
  def message_types; end
  def service_sid; end
  def sid; end
  def to_s; end
  def url; end
  def user_sid; end
end

class Twilio::REST::IpMessaging::V2::ServiceContext::UserContext::UserBindingList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil), user_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(binding_type: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(binding_type: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(binding_type: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::IpMessaging::V2::ServiceContext::UserContext::UserBindingPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::IpMessaging::V2::ServiceContext::UserContext::UserChannelContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, user_sid, channel_sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(notification_level: T.unsafe(nil), last_consumed_message_index: T.unsafe(nil), last_consumption_timestamp: T.unsafe(nil)); end
end

class Twilio::REST::IpMessaging::V2::ServiceContext::UserContext::UserChannelInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), user_sid: T.unsafe(nil), channel_sid: T.unsafe(nil)); end

  def account_sid; end
  def channel_sid; end
  def context; end
  def delete; end
  def fetch; end
  def inspect; end
  def last_consumed_message_index; end
  def links; end
  def member_sid; end
  def notification_level; end
  def service_sid; end
  def status; end
  def to_s; end
  def unread_messages_count; end
  def update(notification_level: T.unsafe(nil), last_consumed_message_index: T.unsafe(nil), last_consumption_timestamp: T.unsafe(nil)); end
  def url; end
  def user_sid; end
end

class Twilio::REST::IpMessaging::V2::ServiceContext::UserContext::UserChannelList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil), user_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::IpMessaging::V2::ServiceContext::UserContext::UserChannelPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::IpMessaging::V2::ServiceContext::UserInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def attributes; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def identity; end
  def inspect; end
  def is_notifiable; end
  def is_online; end
  def joined_channels_count; end
  def links; end
  def role_sid; end
  def service_sid; end
  def sid; end
  def to_s; end
  def update(role_sid: T.unsafe(nil), attributes: T.unsafe(nil), friendly_name: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
  def url; end
  def user_bindings; end
  def user_channels; end
end

class Twilio::REST::IpMessaging::V2::ServiceContext::UserList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil)); end

  def create(identity: T.unsafe(nil), role_sid: T.unsafe(nil), attributes: T.unsafe(nil), friendly_name: T.unsafe(nil), x_twilio_webhook_enabled: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::IpMessaging::V2::ServiceContext::UserPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::IpMessaging::V2::ServiceInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def bindings; end
  def channels; end
  def consumption_report_interval; end
  def context; end
  def date_created; end
  def date_updated; end
  def default_channel_creator_role_sid; end
  def default_channel_role_sid; end
  def default_service_role_sid; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def limits; end
  def links; end
  def media; end
  def notifications; end
  def post_webhook_retry_count; end
  def post_webhook_url; end
  def pre_webhook_retry_count; end
  def pre_webhook_url; end
  def reachability_enabled; end
  def read_status_enabled; end
  def roles; end
  def sid; end
  def to_s; end
  def typing_indicator_timeout; end
  def update(friendly_name: T.unsafe(nil), default_service_role_sid: T.unsafe(nil), default_channel_role_sid: T.unsafe(nil), default_channel_creator_role_sid: T.unsafe(nil), read_status_enabled: T.unsafe(nil), reachability_enabled: T.unsafe(nil), typing_indicator_timeout: T.unsafe(nil), consumption_report_interval: T.unsafe(nil), notifications_new_message_enabled: T.unsafe(nil), notifications_new_message_template: T.unsafe(nil), notifications_new_message_sound: T.unsafe(nil), notifications_new_message_badge_count_enabled: T.unsafe(nil), notifications_added_to_channel_enabled: T.unsafe(nil), notifications_added_to_channel_template: T.unsafe(nil), notifications_added_to_channel_sound: T.unsafe(nil), notifications_removed_from_channel_enabled: T.unsafe(nil), notifications_removed_from_channel_template: T.unsafe(nil), notifications_removed_from_channel_sound: T.unsafe(nil), notifications_invited_to_channel_enabled: T.unsafe(nil), notifications_invited_to_channel_template: T.unsafe(nil), notifications_invited_to_channel_sound: T.unsafe(nil), pre_webhook_url: T.unsafe(nil), post_webhook_url: T.unsafe(nil), webhook_method: T.unsafe(nil), webhook_filters: T.unsafe(nil), limits_channel_members: T.unsafe(nil), limits_user_channels: T.unsafe(nil), media_compatibility_message: T.unsafe(nil), pre_webhook_retry_count: T.unsafe(nil), post_webhook_retry_count: T.unsafe(nil), notifications_log_enabled: T.unsafe(nil)); end
  def url; end
  def users; end
  def webhook_filters; end
  def webhook_method; end
end

class Twilio::REST::IpMessaging::V2::ServiceList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(friendly_name: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::IpMessaging::V2::ServicePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::IpMessagingClient < ::Twilio::REST::ObsoleteClient; end

class Twilio::REST::ListResource
  def initialize(version); end
end

class Twilio::REST::Lookups < ::Twilio::REST::Domain
  def initialize(twilio); end

  def phone_numbers(phone_number = T.unsafe(nil)); end
  def to_s; end
  def v1; end
  def v2; end
end

class Twilio::REST::Lookups::V1 < ::Twilio::REST::Version
  def initialize(domain); end

  def phone_numbers(phone_number = T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Lookups::V1::PhoneNumberContext < ::Twilio::REST::InstanceContext
  def initialize(version, phone_number); end

  def fetch(country_code: T.unsafe(nil), type: T.unsafe(nil), add_ons: T.unsafe(nil), add_ons_data: T.unsafe(nil)); end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Lookups::V1::PhoneNumberInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, phone_number: T.unsafe(nil)); end

  def add_ons; end
  def caller_name; end
  def carrier; end
  def context; end
  def country_code; end
  def fetch(country_code: T.unsafe(nil), type: T.unsafe(nil), add_ons: T.unsafe(nil), add_ons_data: T.unsafe(nil)); end
  def inspect; end
  def national_format; end
  def phone_number; end
  def to_s; end
  def url; end
end

class Twilio::REST::Lookups::V1::PhoneNumberList < ::Twilio::REST::ListResource
  def initialize(version); end

  def to_s; end
end

class Twilio::REST::Lookups::V1::PhoneNumberPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Lookups::V2 < ::Twilio::REST::Version
  def initialize(domain); end

  def phone_numbers(phone_number = T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Lookups::V2::PhoneNumberContext < ::Twilio::REST::InstanceContext
  def initialize(version, phone_number); end

  def fetch(fields: T.unsafe(nil), country_code: T.unsafe(nil), first_name: T.unsafe(nil), last_name: T.unsafe(nil), address_line_1: T.unsafe(nil), address_line_2: T.unsafe(nil), city: T.unsafe(nil), state: T.unsafe(nil), postal_code: T.unsafe(nil), address_country_code: T.unsafe(nil), national_id: T.unsafe(nil), date_of_birth: T.unsafe(nil)); end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Lookups::V2::PhoneNumberInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, phone_number: T.unsafe(nil)); end

  def call_forwarding; end
  def caller_name; end
  def calling_country_code; end
  def context; end
  def country_code; end
  def fetch(fields: T.unsafe(nil), country_code: T.unsafe(nil), first_name: T.unsafe(nil), last_name: T.unsafe(nil), address_line_1: T.unsafe(nil), address_line_2: T.unsafe(nil), city: T.unsafe(nil), state: T.unsafe(nil), postal_code: T.unsafe(nil), address_country_code: T.unsafe(nil), national_id: T.unsafe(nil), date_of_birth: T.unsafe(nil)); end
  def identity_match; end
  def inspect; end
  def line_type_intelligence; end
  def live_activity; end
  def national_format; end
  def phone_number; end
  def sim_swap; end
  def to_s; end
  def url; end
  def valid; end
  def validation_errors; end
end

class Twilio::REST::Lookups::V2::PhoneNumberList < ::Twilio::REST::ListResource
  def initialize(version); end

  def to_s; end
end

class Twilio::REST::Lookups::V2::PhoneNumberPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::LookupsClient < ::Twilio::REST::ObsoleteClient; end

class Twilio::REST::Media < ::Twilio::REST::Domain
  def initialize(twilio); end

  def media_processor(sid = T.unsafe(nil)); end
  def media_recording(sid = T.unsafe(nil)); end
  def player_streamer(sid = T.unsafe(nil)); end
  def to_s; end
  def v1; end
end

class Twilio::REST::Media::V1 < ::Twilio::REST::Version
  def initialize(domain); end

  def media_processor(sid = T.unsafe(nil)); end
  def media_recording(sid = T.unsafe(nil)); end
  def player_streamer(sid = T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Media::V1::MediaProcessorContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
  def update(status: T.unsafe(nil)); end
end

class Twilio::REST::Media::V1::MediaProcessorInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def ended_reason; end
  def extension; end
  def extension_context; end
  def fetch; end
  def inspect; end
  def max_duration; end
  def sid; end
  def status; end
  def status_callback; end
  def status_callback_method; end
  def to_s; end
  def update(status: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Media::V1::MediaProcessorList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(extension: T.unsafe(nil), extension_context: T.unsafe(nil), extension_environment: T.unsafe(nil), status_callback: T.unsafe(nil), status_callback_method: T.unsafe(nil), max_duration: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(order: T.unsafe(nil), status: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(order: T.unsafe(nil), status: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(order: T.unsafe(nil), status: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Media::V1::MediaProcessorPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Media::V1::MediaRecordingContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Media::V1::MediaRecordingInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def duration; end
  def fetch; end
  def format; end
  def inspect; end
  def links; end
  def media_size; end
  def processor_sid; end
  def resolution; end
  def sid; end
  def source_sid; end
  def status; end
  def status_callback; end
  def status_callback_method; end
  def to_s; end
  def url; end
end

class Twilio::REST::Media::V1::MediaRecordingList < ::Twilio::REST::ListResource
  def initialize(version); end

  def each; end
  def get_page(target_url); end
  def list(order: T.unsafe(nil), status: T.unsafe(nil), processor_sid: T.unsafe(nil), source_sid: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(order: T.unsafe(nil), status: T.unsafe(nil), processor_sid: T.unsafe(nil), source_sid: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(order: T.unsafe(nil), status: T.unsafe(nil), processor_sid: T.unsafe(nil), source_sid: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Media::V1::MediaRecordingPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Media::V1::PlayerStreamerContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def fetch; end
  def inspect; end
  def playback_grant; end
  def to_s; end
  def update(status: T.unsafe(nil)); end
end

class Twilio::REST::Media::V1::PlayerStreamerContext::PlaybackGrantContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def create(ttl: T.unsafe(nil), access_control_allow_origin: T.unsafe(nil)); end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Media::V1::PlayerStreamerContext::PlaybackGrantInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def create(ttl: T.unsafe(nil), access_control_allow_origin: T.unsafe(nil)); end
  def date_created; end
  def fetch; end
  def grant; end
  def inspect; end
  def sid; end
  def to_s; end
  def url; end
end

class Twilio::REST::Media::V1::PlayerStreamerContext::PlaybackGrantList < ::Twilio::REST::ListResource
  def initialize(version, sid: T.unsafe(nil)); end

  def to_s; end
end

class Twilio::REST::Media::V1::PlayerStreamerContext::PlaybackGrantPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Media::V1::PlayerStreamerInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def ended_reason; end
  def fetch; end
  def inspect; end
  def links; end
  def max_duration; end
  def playback_grant; end
  def sid; end
  def status; end
  def status_callback; end
  def status_callback_method; end
  def to_s; end
  def update(status: T.unsafe(nil)); end
  def url; end
  def video; end
end

class Twilio::REST::Media::V1::PlayerStreamerList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(video: T.unsafe(nil), status_callback: T.unsafe(nil), status_callback_method: T.unsafe(nil), max_duration: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(order: T.unsafe(nil), status: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(order: T.unsafe(nil), status: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(order: T.unsafe(nil), status: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Media::V1::PlayerStreamerPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Messaging < ::Twilio::REST::Domain
  def initialize(twilio); end

  def brand_registrations(sid = T.unsafe(nil)); end
  def deactivations; end
  def domain_certs(domain_sid = T.unsafe(nil)); end
  def domain_config(domain_sid = T.unsafe(nil)); end
  def external_campaign; end
  def services(sid = T.unsafe(nil)); end
  def to_s; end
  def tollfree_verifications(sid = T.unsafe(nil)); end
  def usecases; end
  def v1; end
end

class Twilio::REST::Messaging::V1 < ::Twilio::REST::Version
  def initialize(domain); end

  def brand_registrations(sid = T.unsafe(nil)); end
  def deactivations; end
  def domain_certs(domain_sid = T.unsafe(nil)); end
  def domain_config(domain_sid = T.unsafe(nil)); end
  def external_campaign; end
  def services(sid = T.unsafe(nil)); end
  def to_s; end
  def tollfree_verifications(sid = T.unsafe(nil)); end
  def usecases; end
end

class Twilio::REST::Messaging::V1::BrandRegistrationContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def brand_vettings(brand_vetting_sid = T.unsafe(nil)); end
  def fetch; end
  def inspect; end
  def to_s; end
  def update; end
end

class Twilio::REST::Messaging::V1::BrandRegistrationContext::BrandVettingContext < ::Twilio::REST::InstanceContext
  def initialize(version, brand_sid, brand_vetting_sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Messaging::V1::BrandRegistrationContext::BrandVettingInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, brand_sid: T.unsafe(nil), brand_vetting_sid: T.unsafe(nil)); end

  def account_sid; end
  def brand_sid; end
  def brand_vetting_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def fetch; end
  def inspect; end
  def to_s; end
  def url; end
  def vetting_class; end
  def vetting_id; end
  def vetting_provider; end
  def vetting_status; end
end

class Twilio::REST::Messaging::V1::BrandRegistrationContext::BrandVettingList < ::Twilio::REST::ListResource
  def initialize(version, brand_sid: T.unsafe(nil)); end

  def create(vetting_provider: T.unsafe(nil), vetting_id: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(vetting_provider: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(vetting_provider: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(vetting_provider: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Messaging::V1::BrandRegistrationContext::BrandVettingPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Messaging::V1::BrandRegistrationInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def a2p_profile_bundle_sid; end
  def account_sid; end
  def brand_feedback; end
  def brand_score; end
  def brand_type; end
  def brand_vettings; end
  def context; end
  def customer_profile_bundle_sid; end
  def date_created; end
  def date_updated; end
  def failure_reason; end
  def fetch; end
  def government_entity; end
  def identity_status; end
  def inspect; end
  def links; end
  def mock; end
  def russell_3000; end
  def sid; end
  def skip_automatic_sec_vet; end
  def status; end
  def tax_exempt_status; end
  def tcr_id; end
  def to_s; end
  def update; end
  def url; end
end

class Twilio::REST::Messaging::V1::BrandRegistrationList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(customer_profile_bundle_sid: T.unsafe(nil), a2p_profile_bundle_sid: T.unsafe(nil), brand_type: T.unsafe(nil), mock: T.unsafe(nil), skip_automatic_sec_vet: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Messaging::V1::BrandRegistrationPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Messaging::V1::DeactivationsContext < ::Twilio::REST::InstanceContext
  def initialize(version); end

  def fetch(date: T.unsafe(nil)); end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Messaging::V1::DeactivationsInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload); end

  def context; end
  def fetch(date: T.unsafe(nil)); end
  def inspect; end
  def redirect_to; end
  def to_s; end
end

class Twilio::REST::Messaging::V1::DeactivationsList < ::Twilio::REST::ListResource
  def initialize(version); end

  def to_s; end
end

class Twilio::REST::Messaging::V1::DeactivationsPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Messaging::V1::DomainCertsContext < ::Twilio::REST::InstanceContext
  def initialize(version, domain_sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(tls_cert: T.unsafe(nil)); end
end

class Twilio::REST::Messaging::V1::DomainCertsInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, domain_sid: T.unsafe(nil)); end

  def certificate_sid; end
  def context; end
  def date_created; end
  def date_expires; end
  def date_updated; end
  def delete; end
  def domain_name; end
  def domain_sid; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(tls_cert: T.unsafe(nil)); end
  def url; end
  def validated; end
end

class Twilio::REST::Messaging::V1::DomainCertsList < ::Twilio::REST::ListResource
  def initialize(version); end

  def to_s; end
end

class Twilio::REST::Messaging::V1::DomainCertsPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Messaging::V1::DomainConfigContext < ::Twilio::REST::InstanceContext
  def initialize(version, domain_sid); end

  def fetch; end
  def inspect; end
  def to_s; end
  def update(messaging_service_sids: T.unsafe(nil), fallback_url: T.unsafe(nil), callback_url: T.unsafe(nil), messaging_service_sids_action: T.unsafe(nil)); end
end

class Twilio::REST::Messaging::V1::DomainConfigInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, domain_sid: T.unsafe(nil)); end

  def callback_url; end
  def config_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def domain_sid; end
  def fallback_url; end
  def fetch; end
  def inspect; end
  def messaging_service_sids; end
  def to_s; end
  def update(messaging_service_sids: T.unsafe(nil), fallback_url: T.unsafe(nil), callback_url: T.unsafe(nil), messaging_service_sids_action: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Messaging::V1::DomainConfigList < ::Twilio::REST::ListResource
  def initialize(version); end

  def to_s; end
end

class Twilio::REST::Messaging::V1::DomainConfigPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Messaging::V1::ExternalCampaignInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload); end

  def account_sid; end
  def campaign_id; end
  def date_created; end
  def inspect; end
  def messaging_service_sid; end
  def sid; end
  def to_s; end
end

class Twilio::REST::Messaging::V1::ExternalCampaignList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(campaign_id: T.unsafe(nil), messaging_service_sid: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Messaging::V1::ExternalCampaignPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Messaging::V1::ServiceContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def alpha_senders(sid = T.unsafe(nil)); end
  def delete; end
  def fetch; end
  def inspect; end
  def phone_numbers(sid = T.unsafe(nil)); end
  def short_codes(sid = T.unsafe(nil)); end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), inbound_request_url: T.unsafe(nil), inbound_method: T.unsafe(nil), fallback_url: T.unsafe(nil), fallback_method: T.unsafe(nil), status_callback: T.unsafe(nil), sticky_sender: T.unsafe(nil), mms_converter: T.unsafe(nil), smart_encoding: T.unsafe(nil), scan_message_content: T.unsafe(nil), fallback_to_long_code: T.unsafe(nil), area_code_geomatch: T.unsafe(nil), validity_period: T.unsafe(nil), synchronous_validation: T.unsafe(nil), usecase: T.unsafe(nil), use_inbound_webhook_on_number: T.unsafe(nil)); end
  def us_app_to_person(sid = T.unsafe(nil)); end
  def us_app_to_person_usecases; end
end

class Twilio::REST::Messaging::V1::ServiceContext::AlphaSenderContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Messaging::V1::ServiceContext::AlphaSenderInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def alpha_sender; end
  def capabilities; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def inspect; end
  def service_sid; end
  def sid; end
  def to_s; end
  def url; end
end

class Twilio::REST::Messaging::V1::ServiceContext::AlphaSenderList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil)); end

  def create(alpha_sender: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Messaging::V1::ServiceContext::AlphaSenderPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Messaging::V1::ServiceContext::PhoneNumberContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Messaging::V1::ServiceContext::PhoneNumberInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def capabilities; end
  def context; end
  def country_code; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def inspect; end
  def phone_number; end
  def service_sid; end
  def sid; end
  def to_s; end
  def url; end
end

class Twilio::REST::Messaging::V1::ServiceContext::PhoneNumberList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil)); end

  def create(phone_number_sid: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Messaging::V1::ServiceContext::PhoneNumberPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Messaging::V1::ServiceContext::ShortCodeContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Messaging::V1::ServiceContext::ShortCodeInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def capabilities; end
  def context; end
  def country_code; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def inspect; end
  def service_sid; end
  def short_code; end
  def sid; end
  def to_s; end
  def url; end
end

class Twilio::REST::Messaging::V1::ServiceContext::ShortCodeList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil)); end

  def create(short_code_sid: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Messaging::V1::ServiceContext::ShortCodePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Messaging::V1::ServiceContext::UsAppToPersonContext < ::Twilio::REST::InstanceContext
  def initialize(version, messaging_service_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Messaging::V1::ServiceContext::UsAppToPersonInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, messaging_service_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def brand_registration_sid; end
  def campaign_id; end
  def campaign_status; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def description; end
  def fetch; end
  def has_embedded_links; end
  def has_embedded_phone; end
  def help_keywords; end
  def help_message; end
  def inspect; end
  def is_externally_registered; end
  def message_flow; end
  def message_samples; end
  def messaging_service_sid; end
  def mock; end
  def opt_in_keywords; end
  def opt_in_message; end
  def opt_out_keywords; end
  def opt_out_message; end
  def rate_limits; end
  def sid; end
  def to_s; end
  def url; end
  def us_app_to_person_usecase; end
end

class Twilio::REST::Messaging::V1::ServiceContext::UsAppToPersonList < ::Twilio::REST::ListResource
  def initialize(version, messaging_service_sid: T.unsafe(nil)); end

  def create(brand_registration_sid: T.unsafe(nil), description: T.unsafe(nil), message_samples: T.unsafe(nil), us_app_to_person_usecase: T.unsafe(nil), has_embedded_links: T.unsafe(nil), has_embedded_phone: T.unsafe(nil), message_flow: T.unsafe(nil), opt_in_message: T.unsafe(nil), opt_out_message: T.unsafe(nil), help_message: T.unsafe(nil), opt_in_keywords: T.unsafe(nil), opt_out_keywords: T.unsafe(nil), help_keywords: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Messaging::V1::ServiceContext::UsAppToPersonPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Messaging::V1::ServiceContext::UsAppToPersonUsecaseInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, messaging_service_sid: T.unsafe(nil)); end

  def inspect; end
  def to_s; end
  def us_app_to_person_usecases; end
end

class Twilio::REST::Messaging::V1::ServiceContext::UsAppToPersonUsecaseList < ::Twilio::REST::ListResource
  def initialize(version, messaging_service_sid: T.unsafe(nil)); end

  def fetch(brand_registration_sid: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Messaging::V1::ServiceContext::UsAppToPersonUsecasePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Messaging::V1::ServiceInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def alpha_senders; end
  def area_code_geomatch; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fallback_method; end
  def fallback_to_long_code; end
  def fallback_url; end
  def fetch; end
  def friendly_name; end
  def inbound_method; end
  def inbound_request_url; end
  def inspect; end
  def links; end
  def mms_converter; end
  def phone_numbers; end
  def scan_message_content; end
  def short_codes; end
  def sid; end
  def smart_encoding; end
  def status_callback; end
  def sticky_sender; end
  def synchronous_validation; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), inbound_request_url: T.unsafe(nil), inbound_method: T.unsafe(nil), fallback_url: T.unsafe(nil), fallback_method: T.unsafe(nil), status_callback: T.unsafe(nil), sticky_sender: T.unsafe(nil), mms_converter: T.unsafe(nil), smart_encoding: T.unsafe(nil), scan_message_content: T.unsafe(nil), fallback_to_long_code: T.unsafe(nil), area_code_geomatch: T.unsafe(nil), validity_period: T.unsafe(nil), synchronous_validation: T.unsafe(nil), usecase: T.unsafe(nil), use_inbound_webhook_on_number: T.unsafe(nil)); end
  def url; end
  def us_app_to_person; end
  def us_app_to_person_registered; end
  def us_app_to_person_usecases; end
  def use_inbound_webhook_on_number; end
  def usecase; end
  def validity_period; end
end

class Twilio::REST::Messaging::V1::ServiceList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(friendly_name: T.unsafe(nil), inbound_request_url: T.unsafe(nil), inbound_method: T.unsafe(nil), fallback_url: T.unsafe(nil), fallback_method: T.unsafe(nil), status_callback: T.unsafe(nil), sticky_sender: T.unsafe(nil), mms_converter: T.unsafe(nil), smart_encoding: T.unsafe(nil), scan_message_content: T.unsafe(nil), fallback_to_long_code: T.unsafe(nil), area_code_geomatch: T.unsafe(nil), validity_period: T.unsafe(nil), synchronous_validation: T.unsafe(nil), usecase: T.unsafe(nil), use_inbound_webhook_on_number: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Messaging::V1::ServicePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Messaging::V1::TollfreeVerificationContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Messaging::V1::TollfreeVerificationInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def additional_information; end
  def business_city; end
  def business_contact_email; end
  def business_contact_first_name; end
  def business_contact_last_name; end
  def business_contact_phone; end
  def business_country; end
  def business_name; end
  def business_postal_code; end
  def business_state_province_region; end
  def business_street_address; end
  def business_street_address2; end
  def business_website; end
  def context; end
  def customer_profile_sid; end
  def date_created; end
  def date_updated; end
  def fetch; end
  def inspect; end
  def message_volume; end
  def notification_email; end
  def opt_in_image_urls; end
  def opt_in_type; end
  def production_message_sample; end
  def regulated_item_sid; end
  def resource_links; end
  def sid; end
  def status; end
  def to_s; end
  def tollfree_phone_number_sid; end
  def trust_product_sid; end
  def url; end
  def use_case_categories; end
  def use_case_summary; end
end

class Twilio::REST::Messaging::V1::TollfreeVerificationList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(business_name: T.unsafe(nil), business_website: T.unsafe(nil), notification_email: T.unsafe(nil), use_case_categories: T.unsafe(nil), use_case_summary: T.unsafe(nil), production_message_sample: T.unsafe(nil), opt_in_image_urls: T.unsafe(nil), opt_in_type: T.unsafe(nil), message_volume: T.unsafe(nil), tollfree_phone_number_sid: T.unsafe(nil), customer_profile_sid: T.unsafe(nil), business_street_address: T.unsafe(nil), business_street_address2: T.unsafe(nil), business_city: T.unsafe(nil), business_state_province_region: T.unsafe(nil), business_postal_code: T.unsafe(nil), business_country: T.unsafe(nil), additional_information: T.unsafe(nil), business_contact_first_name: T.unsafe(nil), business_contact_last_name: T.unsafe(nil), business_contact_email: T.unsafe(nil), business_contact_phone: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(tollfree_phone_number_sid: T.unsafe(nil), status: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(tollfree_phone_number_sid: T.unsafe(nil), status: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(tollfree_phone_number_sid: T.unsafe(nil), status: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Messaging::V1::TollfreeVerificationPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Messaging::V1::UsecaseInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload); end

  def inspect; end
  def to_s; end
  def usecases; end
end

class Twilio::REST::Messaging::V1::UsecaseList < ::Twilio::REST::ListResource
  def initialize(version); end

  def fetch; end
  def to_s; end
end

class Twilio::REST::Messaging::V1::UsecasePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Microvisor < ::Twilio::REST::Domain
  def initialize(twilio); end

  def apps(sid = T.unsafe(nil)); end
  def devices(sid = T.unsafe(nil)); end
  def to_s; end
  def v1; end
end

class Twilio::REST::Microvisor::V1 < ::Twilio::REST::Version
  def initialize(domain); end

  def apps(sid = T.unsafe(nil)); end
  def devices(sid = T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Microvisor::V1::AppContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Microvisor::V1::AppInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def hash; end
  def inspect; end
  def sid; end
  def to_s; end
  def unique_name; end
  def url; end
end

class Twilio::REST::Microvisor::V1::AppList < ::Twilio::REST::ListResource
  def initialize(version); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Microvisor::V1::AppPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Microvisor::V1::DeviceContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
  def update(unique_name: T.unsafe(nil), target_app: T.unsafe(nil), logging_enabled: T.unsafe(nil)); end
end

class Twilio::REST::Microvisor::V1::DeviceInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def app; end
  def context; end
  def date_created; end
  def date_updated; end
  def fetch; end
  def inspect; end
  def links; end
  def logging; end
  def sid; end
  def to_s; end
  def unique_name; end
  def update(unique_name: T.unsafe(nil), target_app: T.unsafe(nil), logging_enabled: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Microvisor::V1::DeviceList < ::Twilio::REST::ListResource
  def initialize(version); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Microvisor::V1::DevicePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Monitor < ::Twilio::REST::Domain
  def initialize(twilio); end

  def alerts(sid = T.unsafe(nil)); end
  def events(sid = T.unsafe(nil)); end
  def to_s; end
  def v1; end
end

class Twilio::REST::Monitor::V1 < ::Twilio::REST::Version
  def initialize(domain); end

  def alerts(sid = T.unsafe(nil)); end
  def events(sid = T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Monitor::V1::AlertContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Monitor::V1::AlertInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def alert_text; end
  def api_version; end
  def context; end
  def date_created; end
  def date_generated; end
  def date_updated; end
  def error_code; end
  def fetch; end
  def inspect; end
  def log_level; end
  def more_info; end
  def request_headers; end
  def request_method; end
  def request_url; end
  def request_variables; end
  def resource_sid; end
  def response_body; end
  def response_headers; end
  def service_sid; end
  def sid; end
  def to_s; end
  def url; end
end

class Twilio::REST::Monitor::V1::AlertList < ::Twilio::REST::ListResource
  def initialize(version); end

  def each; end
  def get_page(target_url); end
  def list(log_level: T.unsafe(nil), start_date: T.unsafe(nil), end_date: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(log_level: T.unsafe(nil), start_date: T.unsafe(nil), end_date: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(log_level: T.unsafe(nil), start_date: T.unsafe(nil), end_date: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Monitor::V1::AlertPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Monitor::V1::EventContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Monitor::V1::EventInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def actor_sid; end
  def actor_type; end
  def context; end
  def description; end
  def event_data; end
  def event_date; end
  def event_type; end
  def fetch; end
  def inspect; end
  def links; end
  def resource_sid; end
  def resource_type; end
  def sid; end
  def source; end
  def source_ip_address; end
  def to_s; end
  def url; end
end

class Twilio::REST::Monitor::V1::EventList < ::Twilio::REST::ListResource
  def initialize(version); end

  def each; end
  def get_page(target_url); end
  def list(actor_sid: T.unsafe(nil), event_type: T.unsafe(nil), resource_sid: T.unsafe(nil), source_ip_address: T.unsafe(nil), start_date: T.unsafe(nil), end_date: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(actor_sid: T.unsafe(nil), event_type: T.unsafe(nil), resource_sid: T.unsafe(nil), source_ip_address: T.unsafe(nil), start_date: T.unsafe(nil), end_date: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(actor_sid: T.unsafe(nil), event_type: T.unsafe(nil), resource_sid: T.unsafe(nil), source_ip_address: T.unsafe(nil), start_date: T.unsafe(nil), end_date: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Monitor::V1::EventPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::MonitorClient < ::Twilio::REST::ObsoleteClient; end

class Twilio::REST::Notify < ::Twilio::REST::Domain
  def initialize(twilio); end

  def credentials(sid = T.unsafe(nil)); end
  def services(sid = T.unsafe(nil)); end
  def to_s; end
  def v1; end
end

class Twilio::REST::Notify::V1 < ::Twilio::REST::Version
  def initialize(domain); end

  def credentials(sid = T.unsafe(nil)); end
  def services(sid = T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Notify::V1::CredentialContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), certificate: T.unsafe(nil), private_key: T.unsafe(nil), sandbox: T.unsafe(nil), api_key: T.unsafe(nil), secret: T.unsafe(nil)); end
end

class Twilio::REST::Notify::V1::CredentialInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def sandbox; end
  def sid; end
  def to_s; end
  def type; end
  def update(friendly_name: T.unsafe(nil), certificate: T.unsafe(nil), private_key: T.unsafe(nil), sandbox: T.unsafe(nil), api_key: T.unsafe(nil), secret: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Notify::V1::CredentialList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(type: T.unsafe(nil), friendly_name: T.unsafe(nil), certificate: T.unsafe(nil), private_key: T.unsafe(nil), sandbox: T.unsafe(nil), api_key: T.unsafe(nil), secret: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Notify::V1::CredentialPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Notify::V1::ServiceContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def bindings(sid = T.unsafe(nil)); end
  def delete; end
  def fetch; end
  def inspect; end
  def notifications; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), apn_credential_sid: T.unsafe(nil), gcm_credential_sid: T.unsafe(nil), messaging_service_sid: T.unsafe(nil), facebook_messenger_page_id: T.unsafe(nil), default_apn_notification_protocol_version: T.unsafe(nil), default_gcm_notification_protocol_version: T.unsafe(nil), fcm_credential_sid: T.unsafe(nil), default_fcm_notification_protocol_version: T.unsafe(nil), log_enabled: T.unsafe(nil), alexa_skill_id: T.unsafe(nil), default_alexa_notification_protocol_version: T.unsafe(nil), delivery_callback_url: T.unsafe(nil), delivery_callback_enabled: T.unsafe(nil)); end
end

class Twilio::REST::Notify::V1::ServiceContext::BindingContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Notify::V1::ServiceContext::BindingInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def address; end
  def binding_type; end
  def context; end
  def credential_sid; end
  def date_created; end
  def date_updated; end
  def delete; end
  def endpoint; end
  def fetch; end
  def identity; end
  def inspect; end
  def links; end
  def notification_protocol_version; end
  def service_sid; end
  def sid; end
  def tags; end
  def to_s; end
  def url; end
end

class Twilio::REST::Notify::V1::ServiceContext::BindingList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil)); end

  def create(identity: T.unsafe(nil), binding_type: T.unsafe(nil), address: T.unsafe(nil), tag: T.unsafe(nil), notification_protocol_version: T.unsafe(nil), credential_sid: T.unsafe(nil), endpoint: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(start_date: T.unsafe(nil), end_date: T.unsafe(nil), identity: T.unsafe(nil), tag: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(start_date: T.unsafe(nil), end_date: T.unsafe(nil), identity: T.unsafe(nil), tag: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(start_date: T.unsafe(nil), end_date: T.unsafe(nil), identity: T.unsafe(nil), tag: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Notify::V1::ServiceContext::BindingPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Notify::V1::ServiceContext::NotificationInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil)); end

  def account_sid; end
  def action; end
  def alexa; end
  def apn; end
  def body; end
  def data; end
  def date_created; end
  def facebook_messenger; end
  def fcm; end
  def gcm; end
  def identities; end
  def inspect; end
  def priority; end
  def segments; end
  def service_sid; end
  def sid; end
  def sms; end
  def sound; end
  def tags; end
  def title; end
  def to_s; end
  def ttl; end
end

class Twilio::REST::Notify::V1::ServiceContext::NotificationList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil)); end

  def create(body: T.unsafe(nil), priority: T.unsafe(nil), ttl: T.unsafe(nil), title: T.unsafe(nil), sound: T.unsafe(nil), action: T.unsafe(nil), data: T.unsafe(nil), apn: T.unsafe(nil), gcm: T.unsafe(nil), sms: T.unsafe(nil), facebook_messenger: T.unsafe(nil), fcm: T.unsafe(nil), segment: T.unsafe(nil), alexa: T.unsafe(nil), to_binding: T.unsafe(nil), delivery_callback_url: T.unsafe(nil), identity: T.unsafe(nil), tag: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Notify::V1::ServiceContext::NotificationPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Notify::V1::ServiceInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def alexa_skill_id; end
  def apn_credential_sid; end
  def bindings; end
  def context; end
  def date_created; end
  def date_updated; end
  def default_alexa_notification_protocol_version; end
  def default_apn_notification_protocol_version; end
  def default_fcm_notification_protocol_version; end
  def default_gcm_notification_protocol_version; end
  def delete; end
  def delivery_callback_enabled; end
  def delivery_callback_url; end
  def facebook_messenger_page_id; end
  def fcm_credential_sid; end
  def fetch; end
  def friendly_name; end
  def gcm_credential_sid; end
  def inspect; end
  def links; end
  def log_enabled; end
  def messaging_service_sid; end
  def notifications; end
  def sid; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), apn_credential_sid: T.unsafe(nil), gcm_credential_sid: T.unsafe(nil), messaging_service_sid: T.unsafe(nil), facebook_messenger_page_id: T.unsafe(nil), default_apn_notification_protocol_version: T.unsafe(nil), default_gcm_notification_protocol_version: T.unsafe(nil), fcm_credential_sid: T.unsafe(nil), default_fcm_notification_protocol_version: T.unsafe(nil), log_enabled: T.unsafe(nil), alexa_skill_id: T.unsafe(nil), default_alexa_notification_protocol_version: T.unsafe(nil), delivery_callback_url: T.unsafe(nil), delivery_callback_enabled: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Notify::V1::ServiceList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(friendly_name: T.unsafe(nil), apn_credential_sid: T.unsafe(nil), gcm_credential_sid: T.unsafe(nil), messaging_service_sid: T.unsafe(nil), facebook_messenger_page_id: T.unsafe(nil), default_apn_notification_protocol_version: T.unsafe(nil), default_gcm_notification_protocol_version: T.unsafe(nil), fcm_credential_sid: T.unsafe(nil), default_fcm_notification_protocol_version: T.unsafe(nil), log_enabled: T.unsafe(nil), alexa_skill_id: T.unsafe(nil), default_alexa_notification_protocol_version: T.unsafe(nil), delivery_callback_url: T.unsafe(nil), delivery_callback_enabled: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(friendly_name: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(friendly_name: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(friendly_name: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Notify::V1::ServicePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Numbers < ::Twilio::REST::Domain
  def initialize(twilio); end

  def regulatory_compliance; end
  def to_s; end
  def v2; end
end

class Twilio::REST::Numbers::V2 < ::Twilio::REST::Version
  def initialize(domain); end

  def regulatory_compliance; end
  def to_s; end
end

class Twilio::REST::Numbers::V2::RegulatoryComplianceInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload); end

  def inspect; end
  def to_s; end
end

class Twilio::REST::Numbers::V2::RegulatoryComplianceList < ::Twilio::REST::ListResource
  def initialize(version); end

  def bundles(sid = T.unsafe(nil)); end
  def end_user_types(sid = T.unsafe(nil)); end
  def end_users(sid = T.unsafe(nil)); end
  def regulations(sid = T.unsafe(nil)); end
  def supporting_document_types(sid = T.unsafe(nil)); end
  def supporting_documents(sid = T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Numbers::V2::RegulatoryComplianceList::BundleContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def bundle_copies; end
  def delete; end
  def evaluations(sid = T.unsafe(nil)); end
  def fetch; end
  def inspect; end
  def item_assignments(sid = T.unsafe(nil)); end
  def replace_items; end
  def to_s; end
  def update(status: T.unsafe(nil), status_callback: T.unsafe(nil), friendly_name: T.unsafe(nil), email: T.unsafe(nil)); end
end

class Twilio::REST::Numbers::V2::RegulatoryComplianceList::BundleContext::BundleCopyInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, bundle_sid: T.unsafe(nil)); end

  def account_sid; end
  def date_created; end
  def date_updated; end
  def email; end
  def friendly_name; end
  def inspect; end
  def regulation_sid; end
  def sid; end
  def status; end
  def status_callback; end
  def to_s; end
  def valid_until; end
end

class Twilio::REST::Numbers::V2::RegulatoryComplianceList::BundleContext::BundleCopyList < ::Twilio::REST::ListResource
  def initialize(version, bundle_sid: T.unsafe(nil)); end

  def create(friendly_name: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Numbers::V2::RegulatoryComplianceList::BundleContext::BundleCopyPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Numbers::V2::RegulatoryComplianceList::BundleContext::EvaluationContext < ::Twilio::REST::InstanceContext
  def initialize(version, bundle_sid, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Numbers::V2::RegulatoryComplianceList::BundleContext::EvaluationInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, bundle_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def bundle_sid; end
  def context; end
  def date_created; end
  def fetch; end
  def inspect; end
  def regulation_sid; end
  def results; end
  def sid; end
  def status; end
  def to_s; end
  def url; end
end

class Twilio::REST::Numbers::V2::RegulatoryComplianceList::BundleContext::EvaluationList < ::Twilio::REST::ListResource
  def initialize(version, bundle_sid: T.unsafe(nil)); end

  def create; end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Numbers::V2::RegulatoryComplianceList::BundleContext::EvaluationPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Numbers::V2::RegulatoryComplianceList::BundleContext::ItemAssignmentContext < ::Twilio::REST::InstanceContext
  def initialize(version, bundle_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Numbers::V2::RegulatoryComplianceList::BundleContext::ItemAssignmentInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, bundle_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def bundle_sid; end
  def context; end
  def date_created; end
  def delete; end
  def fetch; end
  def inspect; end
  def object_sid; end
  def sid; end
  def to_s; end
  def url; end
end

class Twilio::REST::Numbers::V2::RegulatoryComplianceList::BundleContext::ItemAssignmentList < ::Twilio::REST::ListResource
  def initialize(version, bundle_sid: T.unsafe(nil)); end

  def create(object_sid: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Numbers::V2::RegulatoryComplianceList::BundleContext::ItemAssignmentPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Numbers::V2::RegulatoryComplianceList::BundleContext::ReplaceItemsInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, bundle_sid: T.unsafe(nil)); end

  def account_sid; end
  def date_created; end
  def date_updated; end
  def email; end
  def friendly_name; end
  def inspect; end
  def regulation_sid; end
  def sid; end
  def status; end
  def status_callback; end
  def to_s; end
  def valid_until; end
end

class Twilio::REST::Numbers::V2::RegulatoryComplianceList::BundleContext::ReplaceItemsList < ::Twilio::REST::ListResource
  def initialize(version, bundle_sid: T.unsafe(nil)); end

  def create(from_bundle_sid: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Numbers::V2::RegulatoryComplianceList::BundleContext::ReplaceItemsPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Numbers::V2::RegulatoryComplianceList::BundleInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def bundle_copies; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def email; end
  def evaluations; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def item_assignments; end
  def links; end
  def regulation_sid; end
  def replace_items; end
  def sid; end
  def status; end
  def status_callback; end
  def to_s; end
  def update(status: T.unsafe(nil), status_callback: T.unsafe(nil), friendly_name: T.unsafe(nil), email: T.unsafe(nil)); end
  def url; end
  def valid_until; end
end

class Twilio::REST::Numbers::V2::RegulatoryComplianceList::BundleList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(friendly_name: T.unsafe(nil), email: T.unsafe(nil), status_callback: T.unsafe(nil), regulation_sid: T.unsafe(nil), iso_country: T.unsafe(nil), end_user_type: T.unsafe(nil), number_type: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(status: T.unsafe(nil), friendly_name: T.unsafe(nil), regulation_sid: T.unsafe(nil), iso_country: T.unsafe(nil), number_type: T.unsafe(nil), has_valid_until_date: T.unsafe(nil), sort_by: T.unsafe(nil), sort_direction: T.unsafe(nil), valid_until_date_before: T.unsafe(nil), valid_until_date: T.unsafe(nil), valid_until_date_after: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(status: T.unsafe(nil), friendly_name: T.unsafe(nil), regulation_sid: T.unsafe(nil), iso_country: T.unsafe(nil), number_type: T.unsafe(nil), has_valid_until_date: T.unsafe(nil), sort_by: T.unsafe(nil), sort_direction: T.unsafe(nil), valid_until_date_before: T.unsafe(nil), valid_until_date: T.unsafe(nil), valid_until_date_after: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(status: T.unsafe(nil), friendly_name: T.unsafe(nil), regulation_sid: T.unsafe(nil), iso_country: T.unsafe(nil), number_type: T.unsafe(nil), has_valid_until_date: T.unsafe(nil), sort_by: T.unsafe(nil), sort_direction: T.unsafe(nil), valid_until_date_before: T.unsafe(nil), valid_until_date: T.unsafe(nil), valid_until_date_after: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Numbers::V2::RegulatoryComplianceList::BundlePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Numbers::V2::RegulatoryComplianceList::EndUserContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), attributes: T.unsafe(nil)); end
end

class Twilio::REST::Numbers::V2::RegulatoryComplianceList::EndUserInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def attributes; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def sid; end
  def to_s; end
  def type; end
  def update(friendly_name: T.unsafe(nil), attributes: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Numbers::V2::RegulatoryComplianceList::EndUserList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(friendly_name: T.unsafe(nil), type: T.unsafe(nil), attributes: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Numbers::V2::RegulatoryComplianceList::EndUserPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Numbers::V2::RegulatoryComplianceList::EndUserTypeContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Numbers::V2::RegulatoryComplianceList::EndUserTypeInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def context; end
  def fetch; end
  def fields; end
  def friendly_name; end
  def inspect; end
  def machine_name; end
  def sid; end
  def to_s; end
  def url; end
end

class Twilio::REST::Numbers::V2::RegulatoryComplianceList::EndUserTypeList < ::Twilio::REST::ListResource
  def initialize(version); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Numbers::V2::RegulatoryComplianceList::EndUserTypePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Numbers::V2::RegulatoryComplianceList::RegulationContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Numbers::V2::RegulatoryComplianceList::RegulationInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def context; end
  def end_user_type; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def iso_country; end
  def number_type; end
  def requirements; end
  def sid; end
  def to_s; end
  def url; end
end

class Twilio::REST::Numbers::V2::RegulatoryComplianceList::RegulationList < ::Twilio::REST::ListResource
  def initialize(version); end

  def each; end
  def get_page(target_url); end
  def list(end_user_type: T.unsafe(nil), iso_country: T.unsafe(nil), number_type: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(end_user_type: T.unsafe(nil), iso_country: T.unsafe(nil), number_type: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(end_user_type: T.unsafe(nil), iso_country: T.unsafe(nil), number_type: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Numbers::V2::RegulatoryComplianceList::RegulationPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Numbers::V2::RegulatoryComplianceList::SupportingDocumentContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), attributes: T.unsafe(nil)); end
end

class Twilio::REST::Numbers::V2::RegulatoryComplianceList::SupportingDocumentInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def attributes; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def failure_reason; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def mime_type; end
  def sid; end
  def status; end
  def to_s; end
  def type; end
  def update(friendly_name: T.unsafe(nil), attributes: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Numbers::V2::RegulatoryComplianceList::SupportingDocumentList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(friendly_name: T.unsafe(nil), type: T.unsafe(nil), attributes: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Numbers::V2::RegulatoryComplianceList::SupportingDocumentPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Numbers::V2::RegulatoryComplianceList::SupportingDocumentTypeContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Numbers::V2::RegulatoryComplianceList::SupportingDocumentTypeInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def context; end
  def fetch; end
  def fields; end
  def friendly_name; end
  def inspect; end
  def machine_name; end
  def sid; end
  def to_s; end
  def url; end
end

class Twilio::REST::Numbers::V2::RegulatoryComplianceList::SupportingDocumentTypeList < ::Twilio::REST::ListResource
  def initialize(version); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Numbers::V2::RegulatoryComplianceList::SupportingDocumentTypePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Numbers::V2::RegulatoryCompliancePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Oauth < ::Twilio::REST::Domain
  def initialize(twilio); end

  def oauth; end
  def openid_discovery; end
  def to_s; end
  def token; end
  def user_info; end
  def v1; end
end

class Twilio::REST::Oauth::V1 < ::Twilio::REST::Version
  def initialize(domain); end

  def oauth; end
  def openid_discovery; end
  def to_s; end
  def token; end
  def user_info; end
end

class Twilio::REST::Oauth::V1::OauthContext < ::Twilio::REST::InstanceContext
  def initialize(version); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Oauth::V1::OauthInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload); end

  def context; end
  def fetch; end
  def inspect; end
  def keys; end
  def to_s; end
  def url; end
end

class Twilio::REST::Oauth::V1::OauthList < ::Twilio::REST::ListResource
  def initialize(version); end

  def to_s; end
end

class Twilio::REST::Oauth::V1::OauthPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Oauth::V1::OpenidDiscoveryContext < ::Twilio::REST::InstanceContext
  def initialize(version); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Oauth::V1::OpenidDiscoveryInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload); end

  def authorization_endpoint; end
  def claims_supported; end
  def context; end
  def device_authorization_endpoint; end
  def fetch; end
  def id_token_signing_alg_values_supported; end
  def inspect; end
  def issuer; end
  def jwk_uri; end
  def response_type_supported; end
  def revocation_endpoint; end
  def scopes_supported; end
  def subject_type_supported; end
  def to_s; end
  def token_endpoint; end
  def url; end
  def userinfo_endpoint; end
end

class Twilio::REST::Oauth::V1::OpenidDiscoveryList < ::Twilio::REST::ListResource
  def initialize(version); end

  def to_s; end
end

class Twilio::REST::Oauth::V1::OpenidDiscoveryPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Oauth::V1::TokenInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload); end

  def access_token; end
  def access_token_expires_at; end
  def id_token; end
  def inspect; end
  def refresh_token; end
  def refresh_token_expires_at; end
  def to_s; end
end

class Twilio::REST::Oauth::V1::TokenList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(grant_type: T.unsafe(nil), client_sid: T.unsafe(nil), client_secret: T.unsafe(nil), code: T.unsafe(nil), code_verifier: T.unsafe(nil), device_code: T.unsafe(nil), refresh_token: T.unsafe(nil), device_id: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Oauth::V1::TokenPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Oauth::V1::UserInfoContext < ::Twilio::REST::InstanceContext
  def initialize(version); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Oauth::V1::UserInfoInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload); end

  def context; end
  def email; end
  def fetch; end
  def first_name; end
  def friendly_name; end
  def inspect; end
  def last_name; end
  def to_s; end
  def url; end
  def user_sid; end
end

class Twilio::REST::Oauth::V1::UserInfoList < ::Twilio::REST::ListResource
  def initialize(version); end

  def to_s; end
end

class Twilio::REST::Oauth::V1::UserInfoPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::ObsoleteClient
  def initialize(*_arg0); end
end

class Twilio::REST::ObsoleteError < ::StandardError; end

class Twilio::REST::Page
  include ::Enumerable

  def initialize(version, response); end

  def each; end
  def get_instance(payload); end
  def load_page(payload); end
  def next_page; end
  def next_page_url; end
  def previous_page; end
  def previous_page_url; end
  def process_response(response); end
  def to_s; end
end

Twilio::REST::Page::META_KEYS = T.let(T.unsafe(nil), Array)

class Twilio::REST::Preview < ::Twilio::REST::Domain
  def initialize(twilio); end

  def assistants(sid = T.unsafe(nil)); end
  def authorization_documents(sid = T.unsafe(nil)); end
  def available_add_ons(sid = T.unsafe(nil)); end
  def commands(sid = T.unsafe(nil)); end
  def deployed_devices; end
  def fleets(sid = T.unsafe(nil)); end
  def hosted_number_orders(sid = T.unsafe(nil)); end
  def hosted_numbers; end
  def installed_add_ons(sid = T.unsafe(nil)); end
  def marketplace; end
  def rate_plans(sid = T.unsafe(nil)); end
  def services(sid = T.unsafe(nil)); end
  def sims(sid = T.unsafe(nil)); end
  def sync; end
  def to_s; end
  def understand; end
  def wireless; end
end

class Twilio::REST::Preview::DeployedDevices < ::Twilio::REST::Version
  def initialize(domain); end

  def fleets(sid = T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Preview::DeployedDevices::FleetContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def certificates(sid = T.unsafe(nil)); end
  def delete; end
  def deployments(sid = T.unsafe(nil)); end
  def devices(sid = T.unsafe(nil)); end
  def fetch; end
  def inspect; end
  def keys(sid = T.unsafe(nil)); end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), default_deployment_sid: T.unsafe(nil)); end
end

class Twilio::REST::Preview::DeployedDevices::FleetContext::CertificateContext < ::Twilio::REST::InstanceContext
  def initialize(version, fleet_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), device_sid: T.unsafe(nil)); end
end

class Twilio::REST::Preview::DeployedDevices::FleetContext::CertificateInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, fleet_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def device_sid; end
  def fetch; end
  def fleet_sid; end
  def friendly_name; end
  def inspect; end
  def sid; end
  def thumbprint; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), device_sid: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Preview::DeployedDevices::FleetContext::CertificateList < ::Twilio::REST::ListResource
  def initialize(version, fleet_sid: T.unsafe(nil)); end

  def create(certificate_data: T.unsafe(nil), friendly_name: T.unsafe(nil), device_sid: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(device_sid: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(device_sid: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(device_sid: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Preview::DeployedDevices::FleetContext::CertificatePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Preview::DeployedDevices::FleetContext::DeploymentContext < ::Twilio::REST::InstanceContext
  def initialize(version, fleet_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), sync_service_sid: T.unsafe(nil)); end
end

class Twilio::REST::Preview::DeployedDevices::FleetContext::DeploymentInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, fleet_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def fleet_sid; end
  def friendly_name; end
  def inspect; end
  def sid; end
  def sync_service_sid; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), sync_service_sid: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Preview::DeployedDevices::FleetContext::DeploymentList < ::Twilio::REST::ListResource
  def initialize(version, fleet_sid: T.unsafe(nil)); end

  def create(friendly_name: T.unsafe(nil), sync_service_sid: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Preview::DeployedDevices::FleetContext::DeploymentPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Preview::DeployedDevices::FleetContext::DeviceContext < ::Twilio::REST::InstanceContext
  def initialize(version, fleet_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), identity: T.unsafe(nil), deployment_sid: T.unsafe(nil), enabled: T.unsafe(nil)); end
end

class Twilio::REST::Preview::DeployedDevices::FleetContext::DeviceInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, fleet_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_authenticated; end
  def date_created; end
  def date_updated; end
  def delete; end
  def deployment_sid; end
  def enabled; end
  def fetch; end
  def fleet_sid; end
  def friendly_name; end
  def identity; end
  def inspect; end
  def sid; end
  def to_s; end
  def unique_name; end
  def update(friendly_name: T.unsafe(nil), identity: T.unsafe(nil), deployment_sid: T.unsafe(nil), enabled: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Preview::DeployedDevices::FleetContext::DeviceList < ::Twilio::REST::ListResource
  def initialize(version, fleet_sid: T.unsafe(nil)); end

  def create(unique_name: T.unsafe(nil), friendly_name: T.unsafe(nil), identity: T.unsafe(nil), deployment_sid: T.unsafe(nil), enabled: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(deployment_sid: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(deployment_sid: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(deployment_sid: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Preview::DeployedDevices::FleetContext::DevicePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Preview::DeployedDevices::FleetContext::KeyContext < ::Twilio::REST::InstanceContext
  def initialize(version, fleet_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), device_sid: T.unsafe(nil)); end
end

class Twilio::REST::Preview::DeployedDevices::FleetContext::KeyInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, fleet_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def device_sid; end
  def fetch; end
  def fleet_sid; end
  def friendly_name; end
  def inspect; end
  def secret; end
  def sid; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), device_sid: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Preview::DeployedDevices::FleetContext::KeyList < ::Twilio::REST::ListResource
  def initialize(version, fleet_sid: T.unsafe(nil)); end

  def create(friendly_name: T.unsafe(nil), device_sid: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(device_sid: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(device_sid: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(device_sid: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Preview::DeployedDevices::FleetContext::KeyPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Preview::DeployedDevices::FleetInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def certificates; end
  def context; end
  def date_created; end
  def date_updated; end
  def default_deployment_sid; end
  def delete; end
  def deployments; end
  def devices; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def keys; end
  def links; end
  def sid; end
  def to_s; end
  def unique_name; end
  def update(friendly_name: T.unsafe(nil), default_deployment_sid: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Preview::DeployedDevices::FleetList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(friendly_name: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Preview::DeployedDevices::FleetPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Preview::HostedNumbers < ::Twilio::REST::Version
  def initialize(domain); end

  def authorization_documents(sid = T.unsafe(nil)); end
  def hosted_number_orders(sid = T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Preview::HostedNumbers::AuthorizationDocumentContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def dependent_hosted_number_orders; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(hosted_number_order_sids: T.unsafe(nil), address_sid: T.unsafe(nil), email: T.unsafe(nil), cc_emails: T.unsafe(nil), status: T.unsafe(nil), contact_title: T.unsafe(nil), contact_phone_number: T.unsafe(nil)); end
end

class Twilio::REST::Preview::HostedNumbers::AuthorizationDocumentContext::DependentHostedNumberOrderInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, signing_document_sid: T.unsafe(nil)); end

  def account_sid; end
  def address_sid; end
  def call_delay; end
  def capabilities; end
  def cc_emails; end
  def date_created; end
  def date_updated; end
  def email; end
  def extension; end
  def failure_reason; end
  def friendly_name; end
  def incoming_phone_number_sid; end
  def inspect; end
  def phone_number; end
  def sid; end
  def signing_document_sid; end
  def status; end
  def to_s; end
  def unique_name; end
  def verification_attempts; end
  def verification_call_sids; end
  def verification_code; end
  def verification_document_sid; end
  def verification_type; end
end

class Twilio::REST::Preview::HostedNumbers::AuthorizationDocumentContext::DependentHostedNumberOrderList < ::Twilio::REST::ListResource
  def initialize(version, signing_document_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(status: T.unsafe(nil), phone_number: T.unsafe(nil), incoming_phone_number_sid: T.unsafe(nil), friendly_name: T.unsafe(nil), unique_name: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(status: T.unsafe(nil), phone_number: T.unsafe(nil), incoming_phone_number_sid: T.unsafe(nil), friendly_name: T.unsafe(nil), unique_name: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(status: T.unsafe(nil), phone_number: T.unsafe(nil), incoming_phone_number_sid: T.unsafe(nil), friendly_name: T.unsafe(nil), unique_name: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Preview::HostedNumbers::AuthorizationDocumentContext::DependentHostedNumberOrderPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Preview::HostedNumbers::AuthorizationDocumentInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def address_sid; end
  def cc_emails; end
  def context; end
  def date_created; end
  def date_updated; end
  def dependent_hosted_number_orders; end
  def email; end
  def fetch; end
  def inspect; end
  def links; end
  def sid; end
  def status; end
  def to_s; end
  def update(hosted_number_order_sids: T.unsafe(nil), address_sid: T.unsafe(nil), email: T.unsafe(nil), cc_emails: T.unsafe(nil), status: T.unsafe(nil), contact_title: T.unsafe(nil), contact_phone_number: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Preview::HostedNumbers::AuthorizationDocumentList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(hosted_number_order_sids: T.unsafe(nil), address_sid: T.unsafe(nil), email: T.unsafe(nil), contact_title: T.unsafe(nil), contact_phone_number: T.unsafe(nil), cc_emails: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(email: T.unsafe(nil), status: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(email: T.unsafe(nil), status: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(email: T.unsafe(nil), status: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Preview::HostedNumbers::AuthorizationDocumentPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Preview::HostedNumbers::HostedNumberOrderContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), unique_name: T.unsafe(nil), email: T.unsafe(nil), cc_emails: T.unsafe(nil), status: T.unsafe(nil), verification_code: T.unsafe(nil), verification_type: T.unsafe(nil), verification_document_sid: T.unsafe(nil), extension: T.unsafe(nil), call_delay: T.unsafe(nil)); end
end

class Twilio::REST::Preview::HostedNumbers::HostedNumberOrderInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def address_sid; end
  def call_delay; end
  def capabilities; end
  def cc_emails; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def email; end
  def extension; end
  def failure_reason; end
  def fetch; end
  def friendly_name; end
  def incoming_phone_number_sid; end
  def inspect; end
  def phone_number; end
  def sid; end
  def signing_document_sid; end
  def status; end
  def to_s; end
  def unique_name; end
  def update(friendly_name: T.unsafe(nil), unique_name: T.unsafe(nil), email: T.unsafe(nil), cc_emails: T.unsafe(nil), status: T.unsafe(nil), verification_code: T.unsafe(nil), verification_type: T.unsafe(nil), verification_document_sid: T.unsafe(nil), extension: T.unsafe(nil), call_delay: T.unsafe(nil)); end
  def url; end
  def verification_attempts; end
  def verification_call_sids; end
  def verification_code; end
  def verification_document_sid; end
  def verification_type; end
end

class Twilio::REST::Preview::HostedNumbers::HostedNumberOrderList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(phone_number: T.unsafe(nil), sms_capability: T.unsafe(nil), account_sid: T.unsafe(nil), friendly_name: T.unsafe(nil), unique_name: T.unsafe(nil), cc_emails: T.unsafe(nil), sms_url: T.unsafe(nil), sms_method: T.unsafe(nil), sms_fallback_url: T.unsafe(nil), sms_fallback_method: T.unsafe(nil), status_callback_url: T.unsafe(nil), status_callback_method: T.unsafe(nil), sms_application_sid: T.unsafe(nil), address_sid: T.unsafe(nil), email: T.unsafe(nil), verification_type: T.unsafe(nil), verification_document_sid: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(status: T.unsafe(nil), phone_number: T.unsafe(nil), incoming_phone_number_sid: T.unsafe(nil), friendly_name: T.unsafe(nil), unique_name: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(status: T.unsafe(nil), phone_number: T.unsafe(nil), incoming_phone_number_sid: T.unsafe(nil), friendly_name: T.unsafe(nil), unique_name: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(status: T.unsafe(nil), phone_number: T.unsafe(nil), incoming_phone_number_sid: T.unsafe(nil), friendly_name: T.unsafe(nil), unique_name: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Preview::HostedNumbers::HostedNumberOrderPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Preview::Marketplace < ::Twilio::REST::Version
  def initialize(domain); end

  def available_add_ons(sid = T.unsafe(nil)); end
  def installed_add_ons(sid = T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Preview::Marketplace::AvailableAddOnContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def extensions(sid = T.unsafe(nil)); end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Preview::Marketplace::AvailableAddOnContext::AvailableAddOnExtensionContext < ::Twilio::REST::InstanceContext
  def initialize(version, available_add_on_sid, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Preview::Marketplace::AvailableAddOnContext::AvailableAddOnExtensionInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, available_add_on_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def available_add_on_sid; end
  def context; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def product_name; end
  def sid; end
  def to_s; end
  def unique_name; end
  def url; end
end

class Twilio::REST::Preview::Marketplace::AvailableAddOnContext::AvailableAddOnExtensionList < ::Twilio::REST::ListResource
  def initialize(version, available_add_on_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Preview::Marketplace::AvailableAddOnContext::AvailableAddOnExtensionPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Preview::Marketplace::AvailableAddOnInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def configuration_schema; end
  def context; end
  def description; end
  def extensions; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def links; end
  def pricing_type; end
  def sid; end
  def to_s; end
  def url; end
end

class Twilio::REST::Preview::Marketplace::AvailableAddOnList < ::Twilio::REST::ListResource
  def initialize(version); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Preview::Marketplace::AvailableAddOnPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Preview::Marketplace::InstalledAddOnContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def delete; end
  def extensions(sid = T.unsafe(nil)); end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(configuration: T.unsafe(nil), unique_name: T.unsafe(nil)); end
end

class Twilio::REST::Preview::Marketplace::InstalledAddOnContext::InstalledAddOnExtensionContext < ::Twilio::REST::InstanceContext
  def initialize(version, installed_add_on_sid, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
  def update(enabled: T.unsafe(nil)); end
end

class Twilio::REST::Preview::Marketplace::InstalledAddOnContext::InstalledAddOnExtensionInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, installed_add_on_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def context; end
  def enabled; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def installed_add_on_sid; end
  def product_name; end
  def sid; end
  def to_s; end
  def unique_name; end
  def update(enabled: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Preview::Marketplace::InstalledAddOnContext::InstalledAddOnExtensionList < ::Twilio::REST::ListResource
  def initialize(version, installed_add_on_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Preview::Marketplace::InstalledAddOnContext::InstalledAddOnExtensionPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Preview::Marketplace::InstalledAddOnInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def configuration; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def description; end
  def extensions; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def links; end
  def sid; end
  def to_s; end
  def unique_name; end
  def update(configuration: T.unsafe(nil), unique_name: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Preview::Marketplace::InstalledAddOnList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(available_add_on_sid: T.unsafe(nil), accept_terms_of_service: T.unsafe(nil), configuration: T.unsafe(nil), unique_name: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Preview::Marketplace::InstalledAddOnPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Preview::Sync < ::Twilio::REST::Version
  def initialize(domain); end

  def services(sid = T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Preview::Sync::ServiceContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def delete; end
  def documents(sid = T.unsafe(nil)); end
  def fetch; end
  def inspect; end
  def sync_lists(sid = T.unsafe(nil)); end
  def sync_maps(sid = T.unsafe(nil)); end
  def to_s; end
  def update(webhook_url: T.unsafe(nil), friendly_name: T.unsafe(nil), reachability_webhooks_enabled: T.unsafe(nil), acl_enabled: T.unsafe(nil)); end
end

class Twilio::REST::Preview::Sync::ServiceContext::DocumentContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, sid); end

  def delete; end
  def document_permissions(identity = T.unsafe(nil)); end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(data: T.unsafe(nil), if_match: T.unsafe(nil)); end
end

class Twilio::REST::Preview::Sync::ServiceContext::DocumentContext::DocumentPermissionContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, document_sid, identity); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(read: T.unsafe(nil), write: T.unsafe(nil), manage: T.unsafe(nil)); end
end

class Twilio::REST::Preview::Sync::ServiceContext::DocumentContext::DocumentPermissionInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), document_sid: T.unsafe(nil), identity: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def delete; end
  def document_sid; end
  def fetch; end
  def identity; end
  def inspect; end
  def manage; end
  def read; end
  def service_sid; end
  def to_s; end
  def update(read: T.unsafe(nil), write: T.unsafe(nil), manage: T.unsafe(nil)); end
  def url; end
  def write; end
end

class Twilio::REST::Preview::Sync::ServiceContext::DocumentContext::DocumentPermissionList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil), document_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Preview::Sync::ServiceContext::DocumentContext::DocumentPermissionPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Preview::Sync::ServiceContext::DocumentInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def created_by; end
  def data; end
  def date_created; end
  def date_updated; end
  def delete; end
  def document_permissions; end
  def fetch; end
  def inspect; end
  def links; end
  def revision; end
  def service_sid; end
  def sid; end
  def to_s; end
  def unique_name; end
  def update(data: T.unsafe(nil), if_match: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Preview::Sync::ServiceContext::DocumentList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil)); end

  def create(unique_name: T.unsafe(nil), data: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Preview::Sync::ServiceContext::DocumentPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Preview::Sync::ServiceContext::SyncListContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def sync_list_items(index = T.unsafe(nil)); end
  def sync_list_permissions(identity = T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Preview::Sync::ServiceContext::SyncListContext::SyncListItemContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, list_sid, index); end

  def delete(if_match: T.unsafe(nil)); end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(data: T.unsafe(nil), if_match: T.unsafe(nil)); end
end

class Twilio::REST::Preview::Sync::ServiceContext::SyncListContext::SyncListItemInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), list_sid: T.unsafe(nil), index: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def created_by; end
  def data; end
  def date_created; end
  def date_updated; end
  def delete(if_match: T.unsafe(nil)); end
  def fetch; end
  def index; end
  def inspect; end
  def list_sid; end
  def revision; end
  def service_sid; end
  def to_s; end
  def update(data: T.unsafe(nil), if_match: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Preview::Sync::ServiceContext::SyncListContext::SyncListItemList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil), list_sid: T.unsafe(nil)); end

  def create(data: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(order: T.unsafe(nil), from: T.unsafe(nil), bounds: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(order: T.unsafe(nil), from: T.unsafe(nil), bounds: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(order: T.unsafe(nil), from: T.unsafe(nil), bounds: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Preview::Sync::ServiceContext::SyncListContext::SyncListItemPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Preview::Sync::ServiceContext::SyncListContext::SyncListPermissionContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, list_sid, identity); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(read: T.unsafe(nil), write: T.unsafe(nil), manage: T.unsafe(nil)); end
end

class Twilio::REST::Preview::Sync::ServiceContext::SyncListContext::SyncListPermissionInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), list_sid: T.unsafe(nil), identity: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def delete; end
  def fetch; end
  def identity; end
  def inspect; end
  def list_sid; end
  def manage; end
  def read; end
  def service_sid; end
  def to_s; end
  def update(read: T.unsafe(nil), write: T.unsafe(nil), manage: T.unsafe(nil)); end
  def url; end
  def write; end
end

class Twilio::REST::Preview::Sync::ServiceContext::SyncListContext::SyncListPermissionList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil), list_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Preview::Sync::ServiceContext::SyncListContext::SyncListPermissionPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Preview::Sync::ServiceContext::SyncListInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def created_by; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def inspect; end
  def links; end
  def revision; end
  def service_sid; end
  def sid; end
  def sync_list_items; end
  def sync_list_permissions; end
  def to_s; end
  def unique_name; end
  def url; end
end

class Twilio::REST::Preview::Sync::ServiceContext::SyncListList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil)); end

  def create(unique_name: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Preview::Sync::ServiceContext::SyncListPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Preview::Sync::ServiceContext::SyncMapContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def sync_map_items(key = T.unsafe(nil)); end
  def sync_map_permissions(identity = T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Preview::Sync::ServiceContext::SyncMapContext::SyncMapItemContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, map_sid, key); end

  def delete(if_match: T.unsafe(nil)); end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(data: T.unsafe(nil), if_match: T.unsafe(nil)); end
end

class Twilio::REST::Preview::Sync::ServiceContext::SyncMapContext::SyncMapItemInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), map_sid: T.unsafe(nil), key: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def created_by; end
  def data; end
  def date_created; end
  def date_updated; end
  def delete(if_match: T.unsafe(nil)); end
  def fetch; end
  def inspect; end
  def key; end
  def map_sid; end
  def revision; end
  def service_sid; end
  def to_s; end
  def update(data: T.unsafe(nil), if_match: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Preview::Sync::ServiceContext::SyncMapContext::SyncMapItemList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil), map_sid: T.unsafe(nil)); end

  def create(key: T.unsafe(nil), data: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(order: T.unsafe(nil), from: T.unsafe(nil), bounds: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(order: T.unsafe(nil), from: T.unsafe(nil), bounds: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(order: T.unsafe(nil), from: T.unsafe(nil), bounds: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Preview::Sync::ServiceContext::SyncMapContext::SyncMapItemPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Preview::Sync::ServiceContext::SyncMapContext::SyncMapPermissionContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, map_sid, identity); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(read: T.unsafe(nil), write: T.unsafe(nil), manage: T.unsafe(nil)); end
end

class Twilio::REST::Preview::Sync::ServiceContext::SyncMapContext::SyncMapPermissionInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), map_sid: T.unsafe(nil), identity: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def delete; end
  def fetch; end
  def identity; end
  def inspect; end
  def manage; end
  def map_sid; end
  def read; end
  def service_sid; end
  def to_s; end
  def update(read: T.unsafe(nil), write: T.unsafe(nil), manage: T.unsafe(nil)); end
  def url; end
  def write; end
end

class Twilio::REST::Preview::Sync::ServiceContext::SyncMapContext::SyncMapPermissionList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil), map_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Preview::Sync::ServiceContext::SyncMapContext::SyncMapPermissionPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Preview::Sync::ServiceContext::SyncMapInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def created_by; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def inspect; end
  def links; end
  def revision; end
  def service_sid; end
  def sid; end
  def sync_map_items; end
  def sync_map_permissions; end
  def to_s; end
  def unique_name; end
  def url; end
end

class Twilio::REST::Preview::Sync::ServiceContext::SyncMapList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil)); end

  def create(unique_name: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Preview::Sync::ServiceContext::SyncMapPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Preview::Sync::ServiceInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def acl_enabled; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def documents; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def links; end
  def reachability_webhooks_enabled; end
  def sid; end
  def sync_lists; end
  def sync_maps; end
  def to_s; end
  def update(webhook_url: T.unsafe(nil), friendly_name: T.unsafe(nil), reachability_webhooks_enabled: T.unsafe(nil), acl_enabled: T.unsafe(nil)); end
  def url; end
  def webhook_url; end
end

class Twilio::REST::Preview::Sync::ServiceList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(friendly_name: T.unsafe(nil), webhook_url: T.unsafe(nil), reachability_webhooks_enabled: T.unsafe(nil), acl_enabled: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Preview::Sync::ServicePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Preview::Understand < ::Twilio::REST::Version
  def initialize(domain); end

  def assistants(sid = T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Preview::Understand::AssistantContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def assistant_fallback_actions; end
  def assistant_initiation_actions; end
  def delete; end
  def dialogues(sid = T.unsafe(nil)); end
  def fetch; end
  def field_types(sid = T.unsafe(nil)); end
  def inspect; end
  def model_builds(sid = T.unsafe(nil)); end
  def queries(sid = T.unsafe(nil)); end
  def style_sheet; end
  def tasks(sid = T.unsafe(nil)); end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), log_queries: T.unsafe(nil), unique_name: T.unsafe(nil), callback_url: T.unsafe(nil), callback_events: T.unsafe(nil), fallback_actions: T.unsafe(nil), initiation_actions: T.unsafe(nil), style_sheet: T.unsafe(nil)); end
end

class Twilio::REST::Preview::Understand::AssistantContext::AssistantFallbackActionsContext < ::Twilio::REST::InstanceContext
  def initialize(version, assistant_sid); end

  def fetch; end
  def inspect; end
  def to_s; end
  def update(fallback_actions: T.unsafe(nil)); end
end

class Twilio::REST::Preview::Understand::AssistantContext::AssistantFallbackActionsInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, assistant_sid: T.unsafe(nil)); end

  def account_sid; end
  def assistant_sid; end
  def context; end
  def data; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(fallback_actions: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Preview::Understand::AssistantContext::AssistantFallbackActionsList < ::Twilio::REST::ListResource
  def initialize(version, assistant_sid: T.unsafe(nil)); end

  def to_s; end
end

class Twilio::REST::Preview::Understand::AssistantContext::AssistantFallbackActionsPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Preview::Understand::AssistantContext::AssistantInitiationActionsContext < ::Twilio::REST::InstanceContext
  def initialize(version, assistant_sid); end

  def fetch; end
  def inspect; end
  def to_s; end
  def update(initiation_actions: T.unsafe(nil)); end
end

class Twilio::REST::Preview::Understand::AssistantContext::AssistantInitiationActionsInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, assistant_sid: T.unsafe(nil)); end

  def account_sid; end
  def assistant_sid; end
  def context; end
  def data; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(initiation_actions: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Preview::Understand::AssistantContext::AssistantInitiationActionsList < ::Twilio::REST::ListResource
  def initialize(version, assistant_sid: T.unsafe(nil)); end

  def to_s; end
end

class Twilio::REST::Preview::Understand::AssistantContext::AssistantInitiationActionsPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Preview::Understand::AssistantContext::DialogueContext < ::Twilio::REST::InstanceContext
  def initialize(version, assistant_sid, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Preview::Understand::AssistantContext::DialogueInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, assistant_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def assistant_sid; end
  def context; end
  def data; end
  def fetch; end
  def inspect; end
  def sid; end
  def to_s; end
  def url; end
end

class Twilio::REST::Preview::Understand::AssistantContext::DialogueList < ::Twilio::REST::ListResource
  def initialize(version, assistant_sid: T.unsafe(nil)); end

  def to_s; end
end

class Twilio::REST::Preview::Understand::AssistantContext::DialoguePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Preview::Understand::AssistantContext::FieldTypeContext < ::Twilio::REST::InstanceContext
  def initialize(version, assistant_sid, sid); end

  def delete; end
  def fetch; end
  def field_values(sid = T.unsafe(nil)); end
  def inspect; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), unique_name: T.unsafe(nil)); end
end

class Twilio::REST::Preview::Understand::AssistantContext::FieldTypeContext::FieldValueContext < ::Twilio::REST::InstanceContext
  def initialize(version, assistant_sid, field_type_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Preview::Understand::AssistantContext::FieldTypeContext::FieldValueInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, assistant_sid: T.unsafe(nil), field_type_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def assistant_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def field_type_sid; end
  def inspect; end
  def language; end
  def sid; end
  def synonym_of; end
  def to_s; end
  def url; end
  def value; end
end

class Twilio::REST::Preview::Understand::AssistantContext::FieldTypeContext::FieldValueList < ::Twilio::REST::ListResource
  def initialize(version, assistant_sid: T.unsafe(nil), field_type_sid: T.unsafe(nil)); end

  def create(language: T.unsafe(nil), value: T.unsafe(nil), synonym_of: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(language: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(language: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(language: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Preview::Understand::AssistantContext::FieldTypeContext::FieldValuePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Preview::Understand::AssistantContext::FieldTypeInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, assistant_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def assistant_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def field_values; end
  def friendly_name; end
  def inspect; end
  def links; end
  def sid; end
  def to_s; end
  def unique_name; end
  def update(friendly_name: T.unsafe(nil), unique_name: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Preview::Understand::AssistantContext::FieldTypeList < ::Twilio::REST::ListResource
  def initialize(version, assistant_sid: T.unsafe(nil)); end

  def create(unique_name: T.unsafe(nil), friendly_name: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Preview::Understand::AssistantContext::FieldTypePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Preview::Understand::AssistantContext::ModelBuildContext < ::Twilio::REST::InstanceContext
  def initialize(version, assistant_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(unique_name: T.unsafe(nil)); end
end

class Twilio::REST::Preview::Understand::AssistantContext::ModelBuildInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, assistant_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def assistant_sid; end
  def build_duration; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def error_code; end
  def fetch; end
  def inspect; end
  def sid; end
  def status; end
  def to_s; end
  def unique_name; end
  def update(unique_name: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Preview::Understand::AssistantContext::ModelBuildList < ::Twilio::REST::ListResource
  def initialize(version, assistant_sid: T.unsafe(nil)); end

  def create(status_callback: T.unsafe(nil), unique_name: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Preview::Understand::AssistantContext::ModelBuildPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Preview::Understand::AssistantContext::QueryContext < ::Twilio::REST::InstanceContext
  def initialize(version, assistant_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(sample_sid: T.unsafe(nil), status: T.unsafe(nil)); end
end

class Twilio::REST::Preview::Understand::AssistantContext::QueryInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, assistant_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def assistant_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def inspect; end
  def language; end
  def model_build_sid; end
  def query; end
  def results; end
  def sample_sid; end
  def sid; end
  def source_channel; end
  def status; end
  def to_s; end
  def update(sample_sid: T.unsafe(nil), status: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Preview::Understand::AssistantContext::QueryList < ::Twilio::REST::ListResource
  def initialize(version, assistant_sid: T.unsafe(nil)); end

  def create(language: T.unsafe(nil), query: T.unsafe(nil), tasks: T.unsafe(nil), model_build: T.unsafe(nil), field: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(language: T.unsafe(nil), model_build: T.unsafe(nil), status: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(language: T.unsafe(nil), model_build: T.unsafe(nil), status: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(language: T.unsafe(nil), model_build: T.unsafe(nil), status: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Preview::Understand::AssistantContext::QueryPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Preview::Understand::AssistantContext::StyleSheetContext < ::Twilio::REST::InstanceContext
  def initialize(version, assistant_sid); end

  def fetch; end
  def inspect; end
  def to_s; end
  def update(style_sheet: T.unsafe(nil)); end
end

class Twilio::REST::Preview::Understand::AssistantContext::StyleSheetInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, assistant_sid: T.unsafe(nil)); end

  def account_sid; end
  def assistant_sid; end
  def context; end
  def data; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(style_sheet: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Preview::Understand::AssistantContext::StyleSheetList < ::Twilio::REST::ListResource
  def initialize(version, assistant_sid: T.unsafe(nil)); end

  def to_s; end
end

class Twilio::REST::Preview::Understand::AssistantContext::StyleSheetPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Preview::Understand::AssistantContext::TaskContext < ::Twilio::REST::InstanceContext
  def initialize(version, assistant_sid, sid); end

  def delete; end
  def fetch; end
  def fields(sid = T.unsafe(nil)); end
  def inspect; end
  def samples(sid = T.unsafe(nil)); end
  def statistics; end
  def task_actions; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), unique_name: T.unsafe(nil), actions: T.unsafe(nil), actions_url: T.unsafe(nil)); end
end

class Twilio::REST::Preview::Understand::AssistantContext::TaskContext::FieldContext < ::Twilio::REST::InstanceContext
  def initialize(version, assistant_sid, task_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Preview::Understand::AssistantContext::TaskContext::FieldInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, assistant_sid: T.unsafe(nil), task_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def assistant_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def field_type; end
  def inspect; end
  def sid; end
  def task_sid; end
  def to_s; end
  def unique_name; end
  def url; end
end

class Twilio::REST::Preview::Understand::AssistantContext::TaskContext::FieldList < ::Twilio::REST::ListResource
  def initialize(version, assistant_sid: T.unsafe(nil), task_sid: T.unsafe(nil)); end

  def create(field_type: T.unsafe(nil), unique_name: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Preview::Understand::AssistantContext::TaskContext::FieldPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Preview::Understand::AssistantContext::TaskContext::SampleContext < ::Twilio::REST::InstanceContext
  def initialize(version, assistant_sid, task_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(language: T.unsafe(nil), tagged_text: T.unsafe(nil), source_channel: T.unsafe(nil)); end
end

class Twilio::REST::Preview::Understand::AssistantContext::TaskContext::SampleInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, assistant_sid: T.unsafe(nil), task_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def assistant_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def inspect; end
  def language; end
  def sid; end
  def source_channel; end
  def tagged_text; end
  def task_sid; end
  def to_s; end
  def update(language: T.unsafe(nil), tagged_text: T.unsafe(nil), source_channel: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Preview::Understand::AssistantContext::TaskContext::SampleList < ::Twilio::REST::ListResource
  def initialize(version, assistant_sid: T.unsafe(nil), task_sid: T.unsafe(nil)); end

  def create(language: T.unsafe(nil), tagged_text: T.unsafe(nil), source_channel: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(language: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(language: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(language: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Preview::Understand::AssistantContext::TaskContext::SamplePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Preview::Understand::AssistantContext::TaskContext::TaskActionsContext < ::Twilio::REST::InstanceContext
  def initialize(version, assistant_sid, task_sid); end

  def fetch; end
  def inspect; end
  def to_s; end
  def update(actions: T.unsafe(nil)); end
end

class Twilio::REST::Preview::Understand::AssistantContext::TaskContext::TaskActionsInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, assistant_sid: T.unsafe(nil), task_sid: T.unsafe(nil)); end

  def account_sid; end
  def assistant_sid; end
  def context; end
  def data; end
  def fetch; end
  def inspect; end
  def task_sid; end
  def to_s; end
  def update(actions: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Preview::Understand::AssistantContext::TaskContext::TaskActionsList < ::Twilio::REST::ListResource
  def initialize(version, assistant_sid: T.unsafe(nil), task_sid: T.unsafe(nil)); end

  def to_s; end
end

class Twilio::REST::Preview::Understand::AssistantContext::TaskContext::TaskActionsPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Preview::Understand::AssistantContext::TaskContext::TaskStatisticsContext < ::Twilio::REST::InstanceContext
  def initialize(version, assistant_sid, task_sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Preview::Understand::AssistantContext::TaskContext::TaskStatisticsInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, assistant_sid: T.unsafe(nil), task_sid: T.unsafe(nil)); end

  def account_sid; end
  def assistant_sid; end
  def context; end
  def fetch; end
  def fields_count; end
  def inspect; end
  def samples_count; end
  def task_sid; end
  def to_s; end
  def url; end
end

class Twilio::REST::Preview::Understand::AssistantContext::TaskContext::TaskStatisticsList < ::Twilio::REST::ListResource
  def initialize(version, assistant_sid: T.unsafe(nil), task_sid: T.unsafe(nil)); end

  def to_s; end
end

class Twilio::REST::Preview::Understand::AssistantContext::TaskContext::TaskStatisticsPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Preview::Understand::AssistantContext::TaskInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, assistant_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def actions_url; end
  def assistant_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def fields; end
  def friendly_name; end
  def inspect; end
  def links; end
  def samples; end
  def sid; end
  def statistics; end
  def task_actions; end
  def to_s; end
  def unique_name; end
  def update(friendly_name: T.unsafe(nil), unique_name: T.unsafe(nil), actions: T.unsafe(nil), actions_url: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Preview::Understand::AssistantContext::TaskList < ::Twilio::REST::ListResource
  def initialize(version, assistant_sid: T.unsafe(nil)); end

  def create(unique_name: T.unsafe(nil), friendly_name: T.unsafe(nil), actions: T.unsafe(nil), actions_url: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Preview::Understand::AssistantContext::TaskPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Preview::Understand::AssistantInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def assistant_fallback_actions; end
  def assistant_initiation_actions; end
  def callback_events; end
  def callback_url; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def dialogues; end
  def fetch; end
  def field_types; end
  def friendly_name; end
  def inspect; end
  def latest_model_build_sid; end
  def links; end
  def log_queries; end
  def model_builds; end
  def queries; end
  def sid; end
  def style_sheet; end
  def tasks; end
  def to_s; end
  def unique_name; end
  def update(friendly_name: T.unsafe(nil), log_queries: T.unsafe(nil), unique_name: T.unsafe(nil), callback_url: T.unsafe(nil), callback_events: T.unsafe(nil), fallback_actions: T.unsafe(nil), initiation_actions: T.unsafe(nil), style_sheet: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Preview::Understand::AssistantList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(friendly_name: T.unsafe(nil), log_queries: T.unsafe(nil), unique_name: T.unsafe(nil), callback_url: T.unsafe(nil), callback_events: T.unsafe(nil), fallback_actions: T.unsafe(nil), initiation_actions: T.unsafe(nil), style_sheet: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Preview::Understand::AssistantPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Preview::Wireless < ::Twilio::REST::Version
  def initialize(domain); end

  def commands(sid = T.unsafe(nil)); end
  def rate_plans(sid = T.unsafe(nil)); end
  def sims(sid = T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Preview::Wireless::CommandContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Preview::Wireless::CommandInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def command; end
  def command_mode; end
  def context; end
  def date_created; end
  def date_updated; end
  def device_sid; end
  def direction; end
  def fetch; end
  def inspect; end
  def sid; end
  def sim_sid; end
  def status; end
  def to_s; end
  def url; end
end

class Twilio::REST::Preview::Wireless::CommandList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(command: T.unsafe(nil), device: T.unsafe(nil), sim: T.unsafe(nil), callback_method: T.unsafe(nil), callback_url: T.unsafe(nil), command_mode: T.unsafe(nil), include_sid: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(device: T.unsafe(nil), sim: T.unsafe(nil), status: T.unsafe(nil), direction: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(device: T.unsafe(nil), sim: T.unsafe(nil), status: T.unsafe(nil), direction: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(device: T.unsafe(nil), sim: T.unsafe(nil), status: T.unsafe(nil), direction: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Preview::Wireless::CommandPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Preview::Wireless::RatePlanContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(unique_name: T.unsafe(nil), friendly_name: T.unsafe(nil)); end
end

class Twilio::REST::Preview::Wireless::RatePlanInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def data_enabled; end
  def data_limit; end
  def data_metering; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def international_roaming; end
  def messaging_enabled; end
  def national_roaming_enabled; end
  def sid; end
  def to_s; end
  def unique_name; end
  def update(unique_name: T.unsafe(nil), friendly_name: T.unsafe(nil)); end
  def url; end
  def voice_enabled; end
end

class Twilio::REST::Preview::Wireless::RatePlanList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(unique_name: T.unsafe(nil), friendly_name: T.unsafe(nil), data_enabled: T.unsafe(nil), data_limit: T.unsafe(nil), data_metering: T.unsafe(nil), messaging_enabled: T.unsafe(nil), voice_enabled: T.unsafe(nil), commands_enabled: T.unsafe(nil), national_roaming_enabled: T.unsafe(nil), international_roaming: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Preview::Wireless::RatePlanPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Preview::Wireless::SimContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
  def update(unique_name: T.unsafe(nil), callback_method: T.unsafe(nil), callback_url: T.unsafe(nil), friendly_name: T.unsafe(nil), rate_plan: T.unsafe(nil), status: T.unsafe(nil), commands_callback_method: T.unsafe(nil), commands_callback_url: T.unsafe(nil), sms_fallback_method: T.unsafe(nil), sms_fallback_url: T.unsafe(nil), sms_method: T.unsafe(nil), sms_url: T.unsafe(nil), voice_fallback_method: T.unsafe(nil), voice_fallback_url: T.unsafe(nil), voice_method: T.unsafe(nil), voice_url: T.unsafe(nil)); end
  def usage; end
end

class Twilio::REST::Preview::Wireless::SimContext::UsageContext < ::Twilio::REST::InstanceContext
  def initialize(version, sim_sid); end

  def fetch(end_: T.unsafe(nil), start: T.unsafe(nil)); end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Preview::Wireless::SimContext::UsageInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sim_sid: T.unsafe(nil)); end

  def account_sid; end
  def commands_costs; end
  def commands_usage; end
  def context; end
  def data_costs; end
  def data_usage; end
  def fetch(end_: T.unsafe(nil), start: T.unsafe(nil)); end
  def inspect; end
  def period; end
  def sim_sid; end
  def sim_unique_name; end
  def to_s; end
  def url; end
end

class Twilio::REST::Preview::Wireless::SimContext::UsageList < ::Twilio::REST::ListResource
  def initialize(version, sim_sid: T.unsafe(nil)); end

  def to_s; end
end

class Twilio::REST::Preview::Wireless::SimContext::UsagePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Preview::Wireless::SimInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def commands_callback_method; end
  def commands_callback_url; end
  def context; end
  def date_created; end
  def date_updated; end
  def e_id; end
  def fetch; end
  def friendly_name; end
  def iccid; end
  def inspect; end
  def links; end
  def rate_plan_sid; end
  def sid; end
  def sms_fallback_method; end
  def sms_fallback_url; end
  def sms_method; end
  def sms_url; end
  def status; end
  def to_s; end
  def unique_name; end
  def update(unique_name: T.unsafe(nil), callback_method: T.unsafe(nil), callback_url: T.unsafe(nil), friendly_name: T.unsafe(nil), rate_plan: T.unsafe(nil), status: T.unsafe(nil), commands_callback_method: T.unsafe(nil), commands_callback_url: T.unsafe(nil), sms_fallback_method: T.unsafe(nil), sms_fallback_url: T.unsafe(nil), sms_method: T.unsafe(nil), sms_url: T.unsafe(nil), voice_fallback_method: T.unsafe(nil), voice_fallback_url: T.unsafe(nil), voice_method: T.unsafe(nil), voice_url: T.unsafe(nil)); end
  def url; end
  def usage; end
  def voice_fallback_method; end
  def voice_fallback_url; end
  def voice_method; end
  def voice_url; end
end

class Twilio::REST::Preview::Wireless::SimList < ::Twilio::REST::ListResource
  def initialize(version); end

  def each; end
  def get_page(target_url); end
  def list(status: T.unsafe(nil), iccid: T.unsafe(nil), rate_plan: T.unsafe(nil), e_id: T.unsafe(nil), sim_registration_code: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(status: T.unsafe(nil), iccid: T.unsafe(nil), rate_plan: T.unsafe(nil), e_id: T.unsafe(nil), sim_registration_code: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(status: T.unsafe(nil), iccid: T.unsafe(nil), rate_plan: T.unsafe(nil), e_id: T.unsafe(nil), sim_registration_code: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Preview::Wireless::SimPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Pricing < ::Twilio::REST::Domain
  def initialize(twilio); end

  def countries(iso_country = T.unsafe(nil)); end
  def messaging; end
  def numbers(destination_number = T.unsafe(nil)); end
  def phone_numbers; end
  def to_s; end
  def v1; end
  def v2; end
  def voice; end
end

class Twilio::REST::Pricing::V1 < ::Twilio::REST::Version
  def initialize(domain); end

  def messaging; end
  def phone_numbers; end
  def to_s; end
  def voice; end
end

class Twilio::REST::Pricing::V1::MessagingInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload); end

  def inspect; end
  def links; end
  def name; end
  def to_s; end
  def url; end
end

class Twilio::REST::Pricing::V1::MessagingList < ::Twilio::REST::ListResource
  def initialize(version); end

  def countries(iso_country = T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Pricing::V1::MessagingList::CountryContext < ::Twilio::REST::InstanceContext
  def initialize(version, iso_country); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Pricing::V1::MessagingList::CountryInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, iso_country: T.unsafe(nil)); end

  def context; end
  def country; end
  def fetch; end
  def inbound_sms_prices; end
  def inspect; end
  def iso_country; end
  def outbound_sms_prices; end
  def price_unit; end
  def to_s; end
  def url; end
end

class Twilio::REST::Pricing::V1::MessagingList::CountryList < ::Twilio::REST::ListResource
  def initialize(version); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Pricing::V1::MessagingList::CountryPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Pricing::V1::MessagingPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Pricing::V1::PhoneNumberInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload); end

  def inspect; end
  def links; end
  def name; end
  def to_s; end
  def url; end
end

class Twilio::REST::Pricing::V1::PhoneNumberList < ::Twilio::REST::ListResource
  def initialize(version); end

  def countries(iso_country = T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Pricing::V1::PhoneNumberList::CountryContext < ::Twilio::REST::InstanceContext
  def initialize(version, iso_country); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Pricing::V1::PhoneNumberList::CountryInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, iso_country: T.unsafe(nil)); end

  def context; end
  def country; end
  def fetch; end
  def inspect; end
  def iso_country; end
  def phone_number_prices; end
  def price_unit; end
  def to_s; end
  def url; end
end

class Twilio::REST::Pricing::V1::PhoneNumberList::CountryList < ::Twilio::REST::ListResource
  def initialize(version); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Pricing::V1::PhoneNumberList::CountryPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Pricing::V1::PhoneNumberPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Pricing::V1::VoiceInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload); end

  def inspect; end
  def links; end
  def name; end
  def to_s; end
  def url; end
end

class Twilio::REST::Pricing::V1::VoiceList < ::Twilio::REST::ListResource
  def initialize(version); end

  def countries(iso_country = T.unsafe(nil)); end
  def numbers(number = T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Pricing::V1::VoiceList::CountryContext < ::Twilio::REST::InstanceContext
  def initialize(version, iso_country); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Pricing::V1::VoiceList::CountryInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, iso_country: T.unsafe(nil)); end

  def context; end
  def country; end
  def fetch; end
  def inbound_call_prices; end
  def inspect; end
  def iso_country; end
  def outbound_prefix_prices; end
  def price_unit; end
  def to_s; end
  def url; end
end

class Twilio::REST::Pricing::V1::VoiceList::CountryList < ::Twilio::REST::ListResource
  def initialize(version); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Pricing::V1::VoiceList::CountryPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Pricing::V1::VoiceList::NumberContext < ::Twilio::REST::InstanceContext
  def initialize(version, number); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Pricing::V1::VoiceList::NumberInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, number: T.unsafe(nil)); end

  def context; end
  def country; end
  def fetch; end
  def inbound_call_price; end
  def inspect; end
  def iso_country; end
  def number; end
  def outbound_call_price; end
  def price_unit; end
  def to_s; end
  def url; end
end

class Twilio::REST::Pricing::V1::VoiceList::NumberList < ::Twilio::REST::ListResource
  def initialize(version); end

  def to_s; end
end

class Twilio::REST::Pricing::V1::VoiceList::NumberPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Pricing::V1::VoicePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Pricing::V2 < ::Twilio::REST::Version
  def initialize(domain); end

  def countries(iso_country = T.unsafe(nil)); end
  def numbers(destination_number = T.unsafe(nil)); end
  def to_s; end
  def voice; end
end

class Twilio::REST::Pricing::V2::CountryContext < ::Twilio::REST::InstanceContext
  def initialize(version, iso_country); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Pricing::V2::CountryInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, iso_country: T.unsafe(nil)); end

  def context; end
  def country; end
  def fetch; end
  def inspect; end
  def iso_country; end
  def originating_call_prices; end
  def price_unit; end
  def terminating_prefix_prices; end
  def to_s; end
  def url; end
end

class Twilio::REST::Pricing::V2::CountryList < ::Twilio::REST::ListResource
  def initialize(version); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Pricing::V2::CountryPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Pricing::V2::NumberContext < ::Twilio::REST::InstanceContext
  def initialize(version, destination_number); end

  def fetch(origination_number: T.unsafe(nil)); end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Pricing::V2::NumberInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, destination_number: T.unsafe(nil)); end

  def context; end
  def country; end
  def destination_number; end
  def fetch(origination_number: T.unsafe(nil)); end
  def inspect; end
  def iso_country; end
  def originating_call_price; end
  def origination_number; end
  def price_unit; end
  def terminating_prefix_prices; end
  def to_s; end
  def url; end
end

class Twilio::REST::Pricing::V2::NumberList < ::Twilio::REST::ListResource
  def initialize(version); end

  def to_s; end
end

class Twilio::REST::Pricing::V2::NumberPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Pricing::V2::VoiceInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload); end

  def inspect; end
  def links; end
  def name; end
  def to_s; end
  def url; end
end

class Twilio::REST::Pricing::V2::VoiceList < ::Twilio::REST::ListResource
  def initialize(version); end

  def countries(iso_country = T.unsafe(nil)); end
  def numbers(destination_number = T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Pricing::V2::VoiceList::CountryContext < ::Twilio::REST::InstanceContext
  def initialize(version, iso_country); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Pricing::V2::VoiceList::CountryInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, iso_country: T.unsafe(nil)); end

  def context; end
  def country; end
  def fetch; end
  def inbound_call_prices; end
  def inspect; end
  def iso_country; end
  def outbound_prefix_prices; end
  def price_unit; end
  def to_s; end
  def url; end
end

class Twilio::REST::Pricing::V2::VoiceList::CountryList < ::Twilio::REST::ListResource
  def initialize(version); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Pricing::V2::VoiceList::CountryPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Pricing::V2::VoiceList::NumberContext < ::Twilio::REST::InstanceContext
  def initialize(version, destination_number); end

  def fetch(origination_number: T.unsafe(nil)); end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Pricing::V2::VoiceList::NumberInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, destination_number: T.unsafe(nil)); end

  def context; end
  def country; end
  def destination_number; end
  def fetch(origination_number: T.unsafe(nil)); end
  def inbound_call_price; end
  def inspect; end
  def iso_country; end
  def origination_number; end
  def outbound_call_prices; end
  def price_unit; end
  def to_s; end
  def url; end
end

class Twilio::REST::Pricing::V2::VoiceList::NumberList < ::Twilio::REST::ListResource
  def initialize(version); end

  def to_s; end
end

class Twilio::REST::Pricing::V2::VoiceList::NumberPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Pricing::V2::VoicePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::PricingClient < ::Twilio::REST::ObsoleteClient; end

class Twilio::REST::Proxy < ::Twilio::REST::Domain
  def initialize(twilio); end

  def services(sid = T.unsafe(nil)); end
  def to_s; end
  def v1; end
end

class Twilio::REST::Proxy::V1 < ::Twilio::REST::Version
  def initialize(domain); end

  def services(sid = T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Proxy::V1::ServiceContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def phone_numbers(sid = T.unsafe(nil)); end
  def sessions(sid = T.unsafe(nil)); end
  def short_codes(sid = T.unsafe(nil)); end
  def to_s; end
  def update(unique_name: T.unsafe(nil), default_ttl: T.unsafe(nil), callback_url: T.unsafe(nil), geo_match_level: T.unsafe(nil), number_selection_behavior: T.unsafe(nil), intercept_callback_url: T.unsafe(nil), out_of_session_callback_url: T.unsafe(nil), chat_instance_sid: T.unsafe(nil)); end
end

class Twilio::REST::Proxy::V1::ServiceContext::PhoneNumberContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(is_reserved: T.unsafe(nil)); end
end

class Twilio::REST::Proxy::V1::ServiceContext::PhoneNumberInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def capabilities; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def in_use; end
  def inspect; end
  def is_reserved; end
  def iso_country; end
  def phone_number; end
  def service_sid; end
  def sid; end
  def to_s; end
  def update(is_reserved: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Proxy::V1::ServiceContext::PhoneNumberList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil)); end

  def create(sid: T.unsafe(nil), phone_number: T.unsafe(nil), is_reserved: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Proxy::V1::ServiceContext::PhoneNumberPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Proxy::V1::ServiceContext::SessionContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def interactions(sid = T.unsafe(nil)); end
  def participants(sid = T.unsafe(nil)); end
  def to_s; end
  def update(date_expiry: T.unsafe(nil), ttl: T.unsafe(nil), status: T.unsafe(nil)); end
end

class Twilio::REST::Proxy::V1::ServiceContext::SessionContext::InteractionContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, session_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Proxy::V1::ServiceContext::SessionContext::InteractionInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), session_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def data; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def inbound_participant_sid; end
  def inbound_resource_sid; end
  def inbound_resource_status; end
  def inbound_resource_type; end
  def inbound_resource_url; end
  def inspect; end
  def outbound_participant_sid; end
  def outbound_resource_sid; end
  def outbound_resource_status; end
  def outbound_resource_type; end
  def outbound_resource_url; end
  def service_sid; end
  def session_sid; end
  def sid; end
  def to_s; end
  def type; end
  def url; end
end

class Twilio::REST::Proxy::V1::ServiceContext::SessionContext::InteractionList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil), session_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Proxy::V1::ServiceContext::SessionContext::InteractionPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Proxy::V1::ServiceContext::SessionContext::ParticipantContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, session_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def message_interactions(sid = T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Proxy::V1::ServiceContext::SessionContext::ParticipantContext::MessageInteractionContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, session_sid, participant_sid, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Proxy::V1::ServiceContext::SessionContext::ParticipantContext::MessageInteractionInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), session_sid: T.unsafe(nil), participant_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def data; end
  def date_created; end
  def date_updated; end
  def fetch; end
  def inbound_participant_sid; end
  def inbound_resource_sid; end
  def inbound_resource_status; end
  def inbound_resource_type; end
  def inbound_resource_url; end
  def inspect; end
  def outbound_participant_sid; end
  def outbound_resource_sid; end
  def outbound_resource_status; end
  def outbound_resource_type; end
  def outbound_resource_url; end
  def participant_sid; end
  def service_sid; end
  def session_sid; end
  def sid; end
  def to_s; end
  def type; end
  def url; end
end

class Twilio::REST::Proxy::V1::ServiceContext::SessionContext::ParticipantContext::MessageInteractionList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil), session_sid: T.unsafe(nil), participant_sid: T.unsafe(nil)); end

  def create(body: T.unsafe(nil), media_url: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Proxy::V1::ServiceContext::SessionContext::ParticipantContext::MessageInteractionPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Proxy::V1::ServiceContext::SessionContext::ParticipantInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), session_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_deleted; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def identifier; end
  def inspect; end
  def links; end
  def message_interactions; end
  def proxy_identifier; end
  def proxy_identifier_sid; end
  def service_sid; end
  def session_sid; end
  def sid; end
  def to_s; end
  def url; end
end

class Twilio::REST::Proxy::V1::ServiceContext::SessionContext::ParticipantList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil), session_sid: T.unsafe(nil)); end

  def create(identifier: T.unsafe(nil), friendly_name: T.unsafe(nil), proxy_identifier: T.unsafe(nil), proxy_identifier_sid: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Proxy::V1::ServiceContext::SessionContext::ParticipantPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Proxy::V1::ServiceContext::SessionInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def closed_reason; end
  def context; end
  def date_created; end
  def date_ended; end
  def date_expiry; end
  def date_last_interaction; end
  def date_started; end
  def date_updated; end
  def delete; end
  def fetch; end
  def inspect; end
  def interactions; end
  def links; end
  def mode; end
  def participants; end
  def service_sid; end
  def sid; end
  def status; end
  def to_s; end
  def ttl; end
  def unique_name; end
  def update(date_expiry: T.unsafe(nil), ttl: T.unsafe(nil), status: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Proxy::V1::ServiceContext::SessionList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil)); end

  def create(unique_name: T.unsafe(nil), date_expiry: T.unsafe(nil), ttl: T.unsafe(nil), mode: T.unsafe(nil), status: T.unsafe(nil), participants: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Proxy::V1::ServiceContext::SessionPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Proxy::V1::ServiceContext::ShortCodeContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(is_reserved: T.unsafe(nil)); end
end

class Twilio::REST::Proxy::V1::ServiceContext::ShortCodeInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def capabilities; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def inspect; end
  def is_reserved; end
  def iso_country; end
  def service_sid; end
  def short_code; end
  def sid; end
  def to_s; end
  def update(is_reserved: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Proxy::V1::ServiceContext::ShortCodeList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil)); end

  def create(sid: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Proxy::V1::ServiceContext::ShortCodePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Proxy::V1::ServiceInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def callback_url; end
  def chat_instance_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def default_ttl; end
  def delete; end
  def fetch; end
  def geo_match_level; end
  def inspect; end
  def intercept_callback_url; end
  def links; end
  def number_selection_behavior; end
  def out_of_session_callback_url; end
  def phone_numbers; end
  def sessions; end
  def short_codes; end
  def sid; end
  def to_s; end
  def unique_name; end
  def update(unique_name: T.unsafe(nil), default_ttl: T.unsafe(nil), callback_url: T.unsafe(nil), geo_match_level: T.unsafe(nil), number_selection_behavior: T.unsafe(nil), intercept_callback_url: T.unsafe(nil), out_of_session_callback_url: T.unsafe(nil), chat_instance_sid: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Proxy::V1::ServiceList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(unique_name: T.unsafe(nil), default_ttl: T.unsafe(nil), callback_url: T.unsafe(nil), geo_match_level: T.unsafe(nil), number_selection_behavior: T.unsafe(nil), intercept_callback_url: T.unsafe(nil), out_of_session_callback_url: T.unsafe(nil), chat_instance_sid: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Proxy::V1::ServicePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::RestError < ::Twilio::REST::TwilioError
  def initialize(message, response); end

  def body; end
  def code; end
  def details; end
  def error_message; end
  def message; end
  def more_info; end
  def response; end
  def status_code; end
  def to_s; end

  private

  def format_message(initial_message); end
end

class Twilio::REST::Routes < ::Twilio::REST::Domain
  def initialize(twilio); end

  def phone_numbers(phone_number = T.unsafe(nil)); end
  def sip_domains(sip_domain = T.unsafe(nil)); end
  def to_s; end
  def trunks(sip_trunk_domain = T.unsafe(nil)); end
  def v2; end
end

class Twilio::REST::Routes::V2 < ::Twilio::REST::Version
  def initialize(domain); end

  def phone_numbers(phone_number = T.unsafe(nil)); end
  def sip_domains(sip_domain = T.unsafe(nil)); end
  def to_s; end
  def trunks(sip_trunk_domain = T.unsafe(nil)); end
end

class Twilio::REST::Routes::V2::PhoneNumberContext < ::Twilio::REST::InstanceContext
  def initialize(version, phone_number); end

  def fetch; end
  def inspect; end
  def to_s; end
  def update(voice_region: T.unsafe(nil), friendly_name: T.unsafe(nil)); end
end

class Twilio::REST::Routes::V2::PhoneNumberInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, phone_number: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def phone_number; end
  def sid; end
  def to_s; end
  def update(voice_region: T.unsafe(nil), friendly_name: T.unsafe(nil)); end
  def url; end
  def voice_region; end
end

class Twilio::REST::Routes::V2::PhoneNumberList < ::Twilio::REST::ListResource
  def initialize(version); end

  def to_s; end
end

class Twilio::REST::Routes::V2::PhoneNumberPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Routes::V2::SipDomainContext < ::Twilio::REST::InstanceContext
  def initialize(version, sip_domain); end

  def fetch; end
  def inspect; end
  def to_s; end
  def update(voice_region: T.unsafe(nil), friendly_name: T.unsafe(nil)); end
end

class Twilio::REST::Routes::V2::SipDomainInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sip_domain: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def sid; end
  def sip_domain; end
  def to_s; end
  def update(voice_region: T.unsafe(nil), friendly_name: T.unsafe(nil)); end
  def url; end
  def voice_region; end
end

class Twilio::REST::Routes::V2::SipDomainList < ::Twilio::REST::ListResource
  def initialize(version); end

  def to_s; end
end

class Twilio::REST::Routes::V2::SipDomainPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Routes::V2::TrunkContext < ::Twilio::REST::InstanceContext
  def initialize(version, sip_trunk_domain); end

  def fetch; end
  def inspect; end
  def to_s; end
  def update(voice_region: T.unsafe(nil), friendly_name: T.unsafe(nil)); end
end

class Twilio::REST::Routes::V2::TrunkInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sip_trunk_domain: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def sid; end
  def sip_trunk_domain; end
  def to_s; end
  def update(voice_region: T.unsafe(nil), friendly_name: T.unsafe(nil)); end
  def url; end
  def voice_region; end
end

class Twilio::REST::Routes::V2::TrunkList < ::Twilio::REST::ListResource
  def initialize(version); end

  def to_s; end
end

class Twilio::REST::Routes::V2::TrunkPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Serverless < ::Twilio::REST::Domain
  def initialize(twilio); end

  def services(sid = T.unsafe(nil)); end
  def to_s; end
  def v1; end
end

class Twilio::REST::Serverless::V1 < ::Twilio::REST::Version
  def initialize(domain); end

  def services(sid = T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Serverless::V1::ServiceContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def assets(sid = T.unsafe(nil)); end
  def builds(sid = T.unsafe(nil)); end
  def delete; end
  def environments(sid = T.unsafe(nil)); end
  def fetch; end
  def functions(sid = T.unsafe(nil)); end
  def inspect; end
  def to_s; end
  def update(include_credentials: T.unsafe(nil), friendly_name: T.unsafe(nil), ui_editable: T.unsafe(nil)); end
end

class Twilio::REST::Serverless::V1::ServiceContext::AssetContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, sid); end

  def asset_versions(sid = T.unsafe(nil)); end
  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil)); end
end

class Twilio::REST::Serverless::V1::ServiceContext::AssetContext::AssetVersionContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, asset_sid, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Serverless::V1::ServiceContext::AssetContext::AssetVersionInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), asset_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def asset_sid; end
  def context; end
  def date_created; end
  def fetch; end
  def inspect; end
  def path; end
  def service_sid; end
  def sid; end
  def to_s; end
  def url; end
  def visibility; end
end

class Twilio::REST::Serverless::V1::ServiceContext::AssetContext::AssetVersionList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil), asset_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Serverless::V1::ServiceContext::AssetContext::AssetVersionPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Serverless::V1::ServiceContext::AssetInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def asset_versions; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def links; end
  def service_sid; end
  def sid; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Serverless::V1::ServiceContext::AssetList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil)); end

  def create(friendly_name: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Serverless::V1::ServiceContext::AssetPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Serverless::V1::ServiceContext::BuildContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, sid); end

  def build_status; end
  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Serverless::V1::ServiceContext::BuildContext::BuildStatusContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Serverless::V1::ServiceContext::BuildContext::BuildStatusInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def fetch; end
  def inspect; end
  def service_sid; end
  def sid; end
  def status; end
  def to_s; end
  def url; end
end

class Twilio::REST::Serverless::V1::ServiceContext::BuildContext::BuildStatusList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def to_s; end
end

class Twilio::REST::Serverless::V1::ServiceContext::BuildContext::BuildStatusPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Serverless::V1::ServiceContext::BuildInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def asset_versions; end
  def build_status; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def dependencies; end
  def fetch; end
  def function_versions; end
  def inspect; end
  def links; end
  def runtime; end
  def service_sid; end
  def sid; end
  def status; end
  def to_s; end
  def url; end
end

class Twilio::REST::Serverless::V1::ServiceContext::BuildList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil)); end

  def create(asset_versions: T.unsafe(nil), function_versions: T.unsafe(nil), dependencies: T.unsafe(nil), runtime: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Serverless::V1::ServiceContext::BuildPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Serverless::V1::ServiceContext::EnvironmentContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, sid); end

  def delete; end
  def deployments(sid = T.unsafe(nil)); end
  def fetch; end
  def inspect; end
  def logs(sid = T.unsafe(nil)); end
  def to_s; end
  def variables(sid = T.unsafe(nil)); end
end

class Twilio::REST::Serverless::V1::ServiceContext::EnvironmentContext::DeploymentContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, environment_sid, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Serverless::V1::ServiceContext::EnvironmentContext::DeploymentInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), environment_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def build_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def environment_sid; end
  def fetch; end
  def inspect; end
  def service_sid; end
  def sid; end
  def to_s; end
  def url; end
end

class Twilio::REST::Serverless::V1::ServiceContext::EnvironmentContext::DeploymentList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil), environment_sid: T.unsafe(nil)); end

  def create(build_sid: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Serverless::V1::ServiceContext::EnvironmentContext::DeploymentPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Serverless::V1::ServiceContext::EnvironmentContext::LogContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, environment_sid, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Serverless::V1::ServiceContext::EnvironmentContext::LogInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), environment_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def build_sid; end
  def context; end
  def date_created; end
  def deployment_sid; end
  def environment_sid; end
  def fetch; end
  def function_sid; end
  def inspect; end
  def level; end
  def message; end
  def request_sid; end
  def service_sid; end
  def sid; end
  def to_s; end
  def url; end
end

class Twilio::REST::Serverless::V1::ServiceContext::EnvironmentContext::LogList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil), environment_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(function_sid: T.unsafe(nil), start_date: T.unsafe(nil), end_date: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(function_sid: T.unsafe(nil), start_date: T.unsafe(nil), end_date: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(function_sid: T.unsafe(nil), start_date: T.unsafe(nil), end_date: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Serverless::V1::ServiceContext::EnvironmentContext::LogPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Serverless::V1::ServiceContext::EnvironmentContext::VariableContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, environment_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(key: T.unsafe(nil), value: T.unsafe(nil)); end
end

class Twilio::REST::Serverless::V1::ServiceContext::EnvironmentContext::VariableInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), environment_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def environment_sid; end
  def fetch; end
  def inspect; end
  def key; end
  def service_sid; end
  def sid; end
  def to_s; end
  def update(key: T.unsafe(nil), value: T.unsafe(nil)); end
  def url; end
  def value; end
end

class Twilio::REST::Serverless::V1::ServiceContext::EnvironmentContext::VariableList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil), environment_sid: T.unsafe(nil)); end

  def create(key: T.unsafe(nil), value: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Serverless::V1::ServiceContext::EnvironmentContext::VariablePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Serverless::V1::ServiceContext::EnvironmentInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def build_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def deployments; end
  def domain_name; end
  def domain_suffix; end
  def fetch; end
  def inspect; end
  def links; end
  def logs; end
  def service_sid; end
  def sid; end
  def to_s; end
  def unique_name; end
  def url; end
  def variables; end
end

class Twilio::REST::Serverless::V1::ServiceContext::EnvironmentList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil)); end

  def create(unique_name: T.unsafe(nil), domain_suffix: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Serverless::V1::ServiceContext::EnvironmentPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Serverless::V1::ServiceContext::FunctionContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, sid); end

  def delete; end
  def fetch; end
  def function_versions(sid = T.unsafe(nil)); end
  def inspect; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil)); end
end

class Twilio::REST::Serverless::V1::ServiceContext::FunctionContext::FunctionVersionContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, function_sid, sid); end

  def fetch; end
  def function_version_content; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Serverless::V1::ServiceContext::FunctionContext::FunctionVersionContext::FunctionVersionContentContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, function_sid, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Serverless::V1::ServiceContext::FunctionContext::FunctionVersionContext::FunctionVersionContentInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), function_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def content; end
  def context; end
  def fetch; end
  def function_sid; end
  def inspect; end
  def service_sid; end
  def sid; end
  def to_s; end
  def url; end
end

class Twilio::REST::Serverless::V1::ServiceContext::FunctionContext::FunctionVersionContext::FunctionVersionContentList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil), function_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def to_s; end
end

class Twilio::REST::Serverless::V1::ServiceContext::FunctionContext::FunctionVersionContext::FunctionVersionContentPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Serverless::V1::ServiceContext::FunctionContext::FunctionVersionInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), function_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def fetch; end
  def function_sid; end
  def function_version_content; end
  def inspect; end
  def links; end
  def path; end
  def service_sid; end
  def sid; end
  def to_s; end
  def url; end
  def visibility; end
end

class Twilio::REST::Serverless::V1::ServiceContext::FunctionContext::FunctionVersionList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil), function_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Serverless::V1::ServiceContext::FunctionContext::FunctionVersionPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Serverless::V1::ServiceContext::FunctionInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def function_versions; end
  def inspect; end
  def links; end
  def service_sid; end
  def sid; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Serverless::V1::ServiceContext::FunctionList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil)); end

  def create(friendly_name: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Serverless::V1::ServiceContext::FunctionPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Serverless::V1::ServiceInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def assets; end
  def builds; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def domain_base; end
  def environments; end
  def fetch; end
  def friendly_name; end
  def functions; end
  def include_credentials; end
  def inspect; end
  def links; end
  def sid; end
  def to_s; end
  def ui_editable; end
  def unique_name; end
  def update(include_credentials: T.unsafe(nil), friendly_name: T.unsafe(nil), ui_editable: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Serverless::V1::ServiceList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(unique_name: T.unsafe(nil), friendly_name: T.unsafe(nil), include_credentials: T.unsafe(nil), ui_editable: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Serverless::V1::ServicePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Studio < ::Twilio::REST::Domain
  def initialize(twilio); end

  def flow_validate; end
  def flows(sid = T.unsafe(nil)); end
  def to_s; end
  def v1; end
  def v2; end
end

class Twilio::REST::Studio::V1 < ::Twilio::REST::Version
  def initialize(domain); end

  def flows(sid = T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Studio::V1::FlowContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def delete; end
  def engagements(sid = T.unsafe(nil)); end
  def executions(sid = T.unsafe(nil)); end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Studio::V1::FlowContext::EngagementContext < ::Twilio::REST::InstanceContext
  def initialize(version, flow_sid, sid); end

  def delete; end
  def engagement_context; end
  def fetch; end
  def inspect; end
  def steps(sid = T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Studio::V1::FlowContext::EngagementContext::EngagementContextContext < ::Twilio::REST::InstanceContext
  def initialize(version, flow_sid, engagement_sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Studio::V1::FlowContext::EngagementContext::EngagementContextInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, flow_sid: T.unsafe(nil), engagement_sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def engagement_sid; end
  def fetch; end
  def flow_sid; end
  def inspect; end
  def to_s; end
  def url; end
end

class Twilio::REST::Studio::V1::FlowContext::EngagementContext::EngagementContextList < ::Twilio::REST::ListResource
  def initialize(version, flow_sid: T.unsafe(nil), engagement_sid: T.unsafe(nil)); end

  def to_s; end
end

class Twilio::REST::Studio::V1::FlowContext::EngagementContext::EngagementContextPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Studio::V1::FlowContext::EngagementContext::StepContext < ::Twilio::REST::InstanceContext
  def initialize(version, flow_sid, engagement_sid, sid); end

  def fetch; end
  def inspect; end
  def step_context; end
  def to_s; end
end

class Twilio::REST::Studio::V1::FlowContext::EngagementContext::StepContext::StepContextContext < ::Twilio::REST::InstanceContext
  def initialize(version, flow_sid, engagement_sid, step_sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Studio::V1::FlowContext::EngagementContext::StepContext::StepContextInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, flow_sid: T.unsafe(nil), engagement_sid: T.unsafe(nil), step_sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def engagement_sid; end
  def fetch; end
  def flow_sid; end
  def inspect; end
  def step_sid; end
  def to_s; end
  def url; end
end

class Twilio::REST::Studio::V1::FlowContext::EngagementContext::StepContext::StepContextList < ::Twilio::REST::ListResource
  def initialize(version, flow_sid: T.unsafe(nil), engagement_sid: T.unsafe(nil), step_sid: T.unsafe(nil)); end

  def to_s; end
end

class Twilio::REST::Studio::V1::FlowContext::EngagementContext::StepContext::StepContextPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Studio::V1::FlowContext::EngagementContext::StepInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, flow_sid: T.unsafe(nil), engagement_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def engagement_sid; end
  def fetch; end
  def flow_sid; end
  def inspect; end
  def links; end
  def name; end
  def sid; end
  def step_context; end
  def to_s; end
  def transitioned_from; end
  def transitioned_to; end
  def url; end
end

class Twilio::REST::Studio::V1::FlowContext::EngagementContext::StepList < ::Twilio::REST::ListResource
  def initialize(version, flow_sid: T.unsafe(nil), engagement_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Studio::V1::FlowContext::EngagementContext::StepPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Studio::V1::FlowContext::EngagementInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, flow_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def contact_channel_address; end
  def contact_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def engagement_context; end
  def fetch; end
  def flow_sid; end
  def inspect; end
  def links; end
  def sid; end
  def status; end
  def steps; end
  def to_s; end
  def url; end
end

class Twilio::REST::Studio::V1::FlowContext::EngagementList < ::Twilio::REST::ListResource
  def initialize(version, flow_sid: T.unsafe(nil)); end

  def create(to: T.unsafe(nil), from: T.unsafe(nil), parameters: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Studio::V1::FlowContext::EngagementPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Studio::V1::FlowContext::ExecutionContext < ::Twilio::REST::InstanceContext
  def initialize(version, flow_sid, sid); end

  def delete; end
  def execution_context; end
  def fetch; end
  def inspect; end
  def steps(sid = T.unsafe(nil)); end
  def to_s; end
  def update(status: T.unsafe(nil)); end
end

class Twilio::REST::Studio::V1::FlowContext::ExecutionContext::ExecutionContextContext < ::Twilio::REST::InstanceContext
  def initialize(version, flow_sid, execution_sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Studio::V1::FlowContext::ExecutionContext::ExecutionContextInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, flow_sid: T.unsafe(nil), execution_sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def execution_sid; end
  def fetch; end
  def flow_sid; end
  def inspect; end
  def to_s; end
  def url; end
end

class Twilio::REST::Studio::V1::FlowContext::ExecutionContext::ExecutionContextList < ::Twilio::REST::ListResource
  def initialize(version, flow_sid: T.unsafe(nil), execution_sid: T.unsafe(nil)); end

  def to_s; end
end

class Twilio::REST::Studio::V1::FlowContext::ExecutionContext::ExecutionContextPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Studio::V1::FlowContext::ExecutionContext::ExecutionStepContext < ::Twilio::REST::InstanceContext
  def initialize(version, flow_sid, execution_sid, sid); end

  def fetch; end
  def inspect; end
  def step_context; end
  def to_s; end
end

class Twilio::REST::Studio::V1::FlowContext::ExecutionContext::ExecutionStepContext::ExecutionStepContextContext < ::Twilio::REST::InstanceContext
  def initialize(version, flow_sid, execution_sid, step_sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Studio::V1::FlowContext::ExecutionContext::ExecutionStepContext::ExecutionStepContextInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, flow_sid: T.unsafe(nil), execution_sid: T.unsafe(nil), step_sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def execution_sid; end
  def fetch; end
  def flow_sid; end
  def inspect; end
  def step_sid; end
  def to_s; end
  def url; end
end

class Twilio::REST::Studio::V1::FlowContext::ExecutionContext::ExecutionStepContext::ExecutionStepContextList < ::Twilio::REST::ListResource
  def initialize(version, flow_sid: T.unsafe(nil), execution_sid: T.unsafe(nil), step_sid: T.unsafe(nil)); end

  def to_s; end
end

class Twilio::REST::Studio::V1::FlowContext::ExecutionContext::ExecutionStepContext::ExecutionStepContextPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Studio::V1::FlowContext::ExecutionContext::ExecutionStepInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, flow_sid: T.unsafe(nil), execution_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def execution_sid; end
  def fetch; end
  def flow_sid; end
  def inspect; end
  def links; end
  def name; end
  def sid; end
  def step_context; end
  def to_s; end
  def transitioned_from; end
  def transitioned_to; end
  def url; end
end

class Twilio::REST::Studio::V1::FlowContext::ExecutionContext::ExecutionStepList < ::Twilio::REST::ListResource
  def initialize(version, flow_sid: T.unsafe(nil), execution_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Studio::V1::FlowContext::ExecutionContext::ExecutionStepPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Studio::V1::FlowContext::ExecutionInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, flow_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def contact_channel_address; end
  def contact_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def execution_context; end
  def fetch; end
  def flow_sid; end
  def inspect; end
  def links; end
  def sid; end
  def status; end
  def steps; end
  def to_s; end
  def update(status: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Studio::V1::FlowContext::ExecutionList < ::Twilio::REST::ListResource
  def initialize(version, flow_sid: T.unsafe(nil)); end

  def create(to: T.unsafe(nil), from: T.unsafe(nil), parameters: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(date_created_from: T.unsafe(nil), date_created_to: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(date_created_from: T.unsafe(nil), date_created_to: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(date_created_from: T.unsafe(nil), date_created_to: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Studio::V1::FlowContext::ExecutionPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Studio::V1::FlowInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def engagements; end
  def executions; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def links; end
  def sid; end
  def status; end
  def to_s; end
  def url; end
  def version; end
end

class Twilio::REST::Studio::V1::FlowList < ::Twilio::REST::ListResource
  def initialize(version); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Studio::V1::FlowPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Studio::V2 < ::Twilio::REST::Version
  def initialize(domain); end

  def flow_validate; end
  def flows(sid = T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Studio::V2::FlowContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def delete; end
  def executions(sid = T.unsafe(nil)); end
  def fetch; end
  def inspect; end
  def revisions(revision = T.unsafe(nil)); end
  def test_users; end
  def to_s; end
  def update(status: T.unsafe(nil), friendly_name: T.unsafe(nil), definition: T.unsafe(nil), commit_message: T.unsafe(nil)); end
end

class Twilio::REST::Studio::V2::FlowContext::ExecutionContext < ::Twilio::REST::InstanceContext
  def initialize(version, flow_sid, sid); end

  def delete; end
  def execution_context; end
  def fetch; end
  def inspect; end
  def steps(sid = T.unsafe(nil)); end
  def to_s; end
  def update(status: T.unsafe(nil)); end
end

class Twilio::REST::Studio::V2::FlowContext::ExecutionContext::ExecutionContextContext < ::Twilio::REST::InstanceContext
  def initialize(version, flow_sid, execution_sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Studio::V2::FlowContext::ExecutionContext::ExecutionContextInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, flow_sid: T.unsafe(nil), execution_sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def execution_sid; end
  def fetch; end
  def flow_sid; end
  def inspect; end
  def to_s; end
  def url; end
end

class Twilio::REST::Studio::V2::FlowContext::ExecutionContext::ExecutionContextList < ::Twilio::REST::ListResource
  def initialize(version, flow_sid: T.unsafe(nil), execution_sid: T.unsafe(nil)); end

  def to_s; end
end

class Twilio::REST::Studio::V2::FlowContext::ExecutionContext::ExecutionContextPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Studio::V2::FlowContext::ExecutionContext::ExecutionStepContext < ::Twilio::REST::InstanceContext
  def initialize(version, flow_sid, execution_sid, sid); end

  def fetch; end
  def inspect; end
  def step_context; end
  def to_s; end
end

class Twilio::REST::Studio::V2::FlowContext::ExecutionContext::ExecutionStepContext::ExecutionStepContextContext < ::Twilio::REST::InstanceContext
  def initialize(version, flow_sid, execution_sid, step_sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Studio::V2::FlowContext::ExecutionContext::ExecutionStepContext::ExecutionStepContextInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, flow_sid: T.unsafe(nil), execution_sid: T.unsafe(nil), step_sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def execution_sid; end
  def fetch; end
  def flow_sid; end
  def inspect; end
  def step_sid; end
  def to_s; end
  def url; end
end

class Twilio::REST::Studio::V2::FlowContext::ExecutionContext::ExecutionStepContext::ExecutionStepContextList < ::Twilio::REST::ListResource
  def initialize(version, flow_sid: T.unsafe(nil), execution_sid: T.unsafe(nil), step_sid: T.unsafe(nil)); end

  def to_s; end
end

class Twilio::REST::Studio::V2::FlowContext::ExecutionContext::ExecutionStepContext::ExecutionStepContextPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Studio::V2::FlowContext::ExecutionContext::ExecutionStepInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, flow_sid: T.unsafe(nil), execution_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def execution_sid; end
  def fetch; end
  def flow_sid; end
  def inspect; end
  def links; end
  def name; end
  def sid; end
  def step_context; end
  def to_s; end
  def transitioned_from; end
  def transitioned_to; end
  def url; end
end

class Twilio::REST::Studio::V2::FlowContext::ExecutionContext::ExecutionStepList < ::Twilio::REST::ListResource
  def initialize(version, flow_sid: T.unsafe(nil), execution_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Studio::V2::FlowContext::ExecutionContext::ExecutionStepPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Studio::V2::FlowContext::ExecutionInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, flow_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def contact_channel_address; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def execution_context; end
  def fetch; end
  def flow_sid; end
  def inspect; end
  def links; end
  def sid; end
  def status; end
  def steps; end
  def to_s; end
  def update(status: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Studio::V2::FlowContext::ExecutionList < ::Twilio::REST::ListResource
  def initialize(version, flow_sid: T.unsafe(nil)); end

  def create(to: T.unsafe(nil), from: T.unsafe(nil), parameters: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(date_created_from: T.unsafe(nil), date_created_to: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(date_created_from: T.unsafe(nil), date_created_to: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(date_created_from: T.unsafe(nil), date_created_to: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Studio::V2::FlowContext::ExecutionPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Studio::V2::FlowContext::FlowRevisionContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid, revision); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Studio::V2::FlowContext::FlowRevisionInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil), revision: T.unsafe(nil)); end

  def account_sid; end
  def commit_message; end
  def context; end
  def date_created; end
  def date_updated; end
  def definition; end
  def errors; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def revision; end
  def sid; end
  def status; end
  def to_s; end
  def url; end
  def valid; end
end

class Twilio::REST::Studio::V2::FlowContext::FlowRevisionList < ::Twilio::REST::ListResource
  def initialize(version, sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Studio::V2::FlowContext::FlowRevisionPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Studio::V2::FlowContext::FlowTestUserContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
  def update(test_users: T.unsafe(nil)); end
end

class Twilio::REST::Studio::V2::FlowContext::FlowTestUserInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def context; end
  def fetch; end
  def inspect; end
  def sid; end
  def test_users; end
  def to_s; end
  def update(test_users: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Studio::V2::FlowContext::FlowTestUserList < ::Twilio::REST::ListResource
  def initialize(version, sid: T.unsafe(nil)); end

  def to_s; end
end

class Twilio::REST::Studio::V2::FlowContext::FlowTestUserPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Studio::V2::FlowInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def commit_message; end
  def context; end
  def date_created; end
  def date_updated; end
  def definition; end
  def delete; end
  def errors; end
  def executions; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def links; end
  def revision; end
  def revisions; end
  def sid; end
  def status; end
  def test_users; end
  def to_s; end
  def update(status: T.unsafe(nil), friendly_name: T.unsafe(nil), definition: T.unsafe(nil), commit_message: T.unsafe(nil)); end
  def url; end
  def valid; end
  def warnings; end
  def webhook_url; end
end

class Twilio::REST::Studio::V2::FlowList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(friendly_name: T.unsafe(nil), status: T.unsafe(nil), definition: T.unsafe(nil), commit_message: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Studio::V2::FlowPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Studio::V2::FlowValidateInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload); end

  def inspect; end
  def to_s; end
  def valid; end
end

class Twilio::REST::Studio::V2::FlowValidateList < ::Twilio::REST::ListResource
  def initialize(version); end

  def to_s; end
  def update(friendly_name: T.unsafe(nil), status: T.unsafe(nil), definition: T.unsafe(nil), commit_message: T.unsafe(nil)); end
end

class Twilio::REST::Studio::V2::FlowValidatePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Supersim < ::Twilio::REST::Domain
  def initialize(twilio); end

  def esim_profiles(sid = T.unsafe(nil)); end
  def fleets(sid = T.unsafe(nil)); end
  def ip_commands(sid = T.unsafe(nil)); end
  def network_access_profiles(sid = T.unsafe(nil)); end
  def networks(sid = T.unsafe(nil)); end
  def settings_updates; end
  def sims(sid = T.unsafe(nil)); end
  def sms_commands(sid = T.unsafe(nil)); end
  def to_s; end
  def usage_records; end
  def v1; end
end

class Twilio::REST::Supersim::V1 < ::Twilio::REST::Version
  def initialize(domain); end

  def esim_profiles(sid = T.unsafe(nil)); end
  def fleets(sid = T.unsafe(nil)); end
  def ip_commands(sid = T.unsafe(nil)); end
  def network_access_profiles(sid = T.unsafe(nil)); end
  def networks(sid = T.unsafe(nil)); end
  def settings_updates; end
  def sims(sid = T.unsafe(nil)); end
  def sms_commands(sid = T.unsafe(nil)); end
  def to_s; end
  def usage_records; end
end

class Twilio::REST::Supersim::V1::EsimProfileContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Supersim::V1::EsimProfileInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def eid; end
  def error_code; end
  def error_message; end
  def fetch; end
  def iccid; end
  def inspect; end
  def sid; end
  def sim_sid; end
  def smdp_plus_address; end
  def status; end
  def to_s; end
  def url; end
end

class Twilio::REST::Supersim::V1::EsimProfileList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(callback_url: T.unsafe(nil), callback_method: T.unsafe(nil), eid: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(eid: T.unsafe(nil), sim_sid: T.unsafe(nil), status: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(eid: T.unsafe(nil), sim_sid: T.unsafe(nil), status: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(eid: T.unsafe(nil), sim_sid: T.unsafe(nil), status: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Supersim::V1::EsimProfilePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Supersim::V1::FleetContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
  def update(unique_name: T.unsafe(nil), network_access_profile: T.unsafe(nil), ip_commands_url: T.unsafe(nil), ip_commands_method: T.unsafe(nil), sms_commands_url: T.unsafe(nil), sms_commands_method: T.unsafe(nil), data_limit: T.unsafe(nil)); end
end

class Twilio::REST::Supersim::V1::FleetInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def data_enabled; end
  def data_limit; end
  def data_metering; end
  def date_created; end
  def date_updated; end
  def fetch; end
  def inspect; end
  def ip_commands_method; end
  def ip_commands_url; end
  def network_access_profile_sid; end
  def sid; end
  def sms_commands_enabled; end
  def sms_commands_method; end
  def sms_commands_url; end
  def to_s; end
  def unique_name; end
  def update(unique_name: T.unsafe(nil), network_access_profile: T.unsafe(nil), ip_commands_url: T.unsafe(nil), ip_commands_method: T.unsafe(nil), sms_commands_url: T.unsafe(nil), sms_commands_method: T.unsafe(nil), data_limit: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Supersim::V1::FleetList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(network_access_profile: T.unsafe(nil), unique_name: T.unsafe(nil), data_enabled: T.unsafe(nil), data_limit: T.unsafe(nil), ip_commands_url: T.unsafe(nil), ip_commands_method: T.unsafe(nil), sms_commands_enabled: T.unsafe(nil), sms_commands_url: T.unsafe(nil), sms_commands_method: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(network_access_profile: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(network_access_profile: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(network_access_profile: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Supersim::V1::FleetPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Supersim::V1::IpCommandContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Supersim::V1::IpCommandInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def device_ip; end
  def device_port; end
  def direction; end
  def fetch; end
  def inspect; end
  def payload; end
  def payload_type; end
  def sid; end
  def sim_iccid; end
  def sim_sid; end
  def status; end
  def to_s; end
  def url; end
end

class Twilio::REST::Supersim::V1::IpCommandList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(sim: T.unsafe(nil), payload: T.unsafe(nil), device_port: T.unsafe(nil), payload_type: T.unsafe(nil), callback_url: T.unsafe(nil), callback_method: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(sim: T.unsafe(nil), sim_iccid: T.unsafe(nil), status: T.unsafe(nil), direction: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(sim: T.unsafe(nil), sim_iccid: T.unsafe(nil), status: T.unsafe(nil), direction: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(sim: T.unsafe(nil), sim_iccid: T.unsafe(nil), status: T.unsafe(nil), direction: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Supersim::V1::IpCommandPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Supersim::V1::NetworkAccessProfileContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def fetch; end
  def inspect; end
  def networks(sid = T.unsafe(nil)); end
  def to_s; end
  def update(unique_name: T.unsafe(nil)); end
end

class Twilio::REST::Supersim::V1::NetworkAccessProfileContext::NetworkAccessProfileNetworkContext < ::Twilio::REST::InstanceContext
  def initialize(version, network_access_profile_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Supersim::V1::NetworkAccessProfileContext::NetworkAccessProfileNetworkInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, network_access_profile_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def context; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def identifiers; end
  def inspect; end
  def iso_country; end
  def network_access_profile_sid; end
  def sid; end
  def to_s; end
  def url; end
end

class Twilio::REST::Supersim::V1::NetworkAccessProfileContext::NetworkAccessProfileNetworkList < ::Twilio::REST::ListResource
  def initialize(version, network_access_profile_sid: T.unsafe(nil)); end

  def create(network: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Supersim::V1::NetworkAccessProfileContext::NetworkAccessProfileNetworkPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Supersim::V1::NetworkAccessProfileInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def fetch; end
  def inspect; end
  def links; end
  def networks; end
  def sid; end
  def to_s; end
  def unique_name; end
  def update(unique_name: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Supersim::V1::NetworkAccessProfileList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(unique_name: T.unsafe(nil), networks: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Supersim::V1::NetworkAccessProfilePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Supersim::V1::NetworkContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Supersim::V1::NetworkInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def context; end
  def fetch; end
  def friendly_name; end
  def identifiers; end
  def inspect; end
  def iso_country; end
  def sid; end
  def to_s; end
  def url; end
end

class Twilio::REST::Supersim::V1::NetworkList < ::Twilio::REST::ListResource
  def initialize(version); end

  def each; end
  def get_page(target_url); end
  def list(iso_country: T.unsafe(nil), mcc: T.unsafe(nil), mnc: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(iso_country: T.unsafe(nil), mcc: T.unsafe(nil), mnc: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(iso_country: T.unsafe(nil), mcc: T.unsafe(nil), mnc: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Supersim::V1::NetworkPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Supersim::V1::SettingsUpdateInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload); end

  def date_completed; end
  def date_created; end
  def date_updated; end
  def iccid; end
  def inspect; end
  def packages; end
  def sid; end
  def sim_sid; end
  def status; end
  def to_s; end
end

class Twilio::REST::Supersim::V1::SettingsUpdateList < ::Twilio::REST::ListResource
  def initialize(version); end

  def each; end
  def get_page(target_url); end
  def list(sim: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(sim: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(sim: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Supersim::V1::SettingsUpdatePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Supersim::V1::SimContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def billing_periods; end
  def fetch; end
  def inspect; end
  def sim_ip_addresses; end
  def to_s; end
  def update(unique_name: T.unsafe(nil), status: T.unsafe(nil), fleet: T.unsafe(nil), callback_url: T.unsafe(nil), callback_method: T.unsafe(nil), account_sid: T.unsafe(nil)); end
end

class Twilio::REST::Supersim::V1::SimContext::BillingPeriodInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sim_sid: T.unsafe(nil)); end

  def account_sid; end
  def date_created; end
  def date_updated; end
  def end_time; end
  def inspect; end
  def period_type; end
  def sid; end
  def sim_sid; end
  def start_time; end
  def to_s; end
end

class Twilio::REST::Supersim::V1::SimContext::BillingPeriodList < ::Twilio::REST::ListResource
  def initialize(version, sim_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Supersim::V1::SimContext::BillingPeriodPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Supersim::V1::SimContext::SimIpAddressInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sim_sid: T.unsafe(nil)); end

  def inspect; end
  def ip_address; end
  def ip_address_version; end
  def to_s; end
end

class Twilio::REST::Supersim::V1::SimContext::SimIpAddressList < ::Twilio::REST::ListResource
  def initialize(version, sim_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Supersim::V1::SimContext::SimIpAddressPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Supersim::V1::SimInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def billing_periods; end
  def context; end
  def date_created; end
  def date_updated; end
  def fetch; end
  def fleet_sid; end
  def iccid; end
  def inspect; end
  def links; end
  def sid; end
  def sim_ip_addresses; end
  def status; end
  def to_s; end
  def unique_name; end
  def update(unique_name: T.unsafe(nil), status: T.unsafe(nil), fleet: T.unsafe(nil), callback_url: T.unsafe(nil), callback_method: T.unsafe(nil), account_sid: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Supersim::V1::SimList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(iccid: T.unsafe(nil), registration_code: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(status: T.unsafe(nil), fleet: T.unsafe(nil), iccid: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(status: T.unsafe(nil), fleet: T.unsafe(nil), iccid: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(status: T.unsafe(nil), fleet: T.unsafe(nil), iccid: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Supersim::V1::SimPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Supersim::V1::SmsCommandContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Supersim::V1::SmsCommandInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def direction; end
  def fetch; end
  def inspect; end
  def payload; end
  def sid; end
  def sim_sid; end
  def status; end
  def to_s; end
  def url; end
end

class Twilio::REST::Supersim::V1::SmsCommandList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(sim: T.unsafe(nil), payload: T.unsafe(nil), callback_method: T.unsafe(nil), callback_url: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(sim: T.unsafe(nil), status: T.unsafe(nil), direction: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(sim: T.unsafe(nil), status: T.unsafe(nil), direction: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(sim: T.unsafe(nil), status: T.unsafe(nil), direction: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Supersim::V1::SmsCommandPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Supersim::V1::UsageRecordInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload); end

  def account_sid; end
  def billed_unit; end
  def data_download; end
  def data_total; end
  def data_total_billed; end
  def data_upload; end
  def fleet_sid; end
  def inspect; end
  def iso_country; end
  def network_sid; end
  def period; end
  def sim_sid; end
  def to_s; end
end

class Twilio::REST::Supersim::V1::UsageRecordList < ::Twilio::REST::ListResource
  def initialize(version); end

  def each; end
  def get_page(target_url); end
  def list(sim: T.unsafe(nil), fleet: T.unsafe(nil), network: T.unsafe(nil), iso_country: T.unsafe(nil), group: T.unsafe(nil), granularity: T.unsafe(nil), start_time: T.unsafe(nil), end_time: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(sim: T.unsafe(nil), fleet: T.unsafe(nil), network: T.unsafe(nil), iso_country: T.unsafe(nil), group: T.unsafe(nil), granularity: T.unsafe(nil), start_time: T.unsafe(nil), end_time: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(sim: T.unsafe(nil), fleet: T.unsafe(nil), network: T.unsafe(nil), iso_country: T.unsafe(nil), group: T.unsafe(nil), granularity: T.unsafe(nil), start_time: T.unsafe(nil), end_time: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Supersim::V1::UsageRecordPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Sync < ::Twilio::REST::Domain
  def initialize(twilio); end

  def services(sid = T.unsafe(nil)); end
  def to_s; end
  def v1; end
end

class Twilio::REST::Sync::V1 < ::Twilio::REST::Version
  def initialize(domain); end

  def services(sid = T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Sync::V1::ServiceContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def delete; end
  def documents(sid = T.unsafe(nil)); end
  def fetch; end
  def inspect; end
  def sync_lists(sid = T.unsafe(nil)); end
  def sync_maps(sid = T.unsafe(nil)); end
  def sync_streams(sid = T.unsafe(nil)); end
  def to_s; end
  def update(webhook_url: T.unsafe(nil), friendly_name: T.unsafe(nil), reachability_webhooks_enabled: T.unsafe(nil), acl_enabled: T.unsafe(nil), reachability_debouncing_enabled: T.unsafe(nil), reachability_debouncing_window: T.unsafe(nil), webhooks_from_rest_enabled: T.unsafe(nil)); end
end

class Twilio::REST::Sync::V1::ServiceContext::DocumentContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, sid); end

  def delete; end
  def document_permissions(identity = T.unsafe(nil)); end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(data: T.unsafe(nil), ttl: T.unsafe(nil), if_match: T.unsafe(nil)); end
end

class Twilio::REST::Sync::V1::ServiceContext::DocumentContext::DocumentPermissionContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, document_sid, identity); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(read: T.unsafe(nil), write: T.unsafe(nil), manage: T.unsafe(nil)); end
end

class Twilio::REST::Sync::V1::ServiceContext::DocumentContext::DocumentPermissionInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), document_sid: T.unsafe(nil), identity: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def delete; end
  def document_sid; end
  def fetch; end
  def identity; end
  def inspect; end
  def manage; end
  def read; end
  def service_sid; end
  def to_s; end
  def update(read: T.unsafe(nil), write: T.unsafe(nil), manage: T.unsafe(nil)); end
  def url; end
  def write; end
end

class Twilio::REST::Sync::V1::ServiceContext::DocumentContext::DocumentPermissionList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil), document_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Sync::V1::ServiceContext::DocumentContext::DocumentPermissionPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Sync::V1::ServiceContext::DocumentInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def created_by; end
  def data; end
  def date_created; end
  def date_expires; end
  def date_updated; end
  def delete; end
  def document_permissions; end
  def fetch; end
  def inspect; end
  def links; end
  def revision; end
  def service_sid; end
  def sid; end
  def to_s; end
  def unique_name; end
  def update(data: T.unsafe(nil), ttl: T.unsafe(nil), if_match: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Sync::V1::ServiceContext::DocumentList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil)); end

  def create(unique_name: T.unsafe(nil), data: T.unsafe(nil), ttl: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Sync::V1::ServiceContext::DocumentPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Sync::V1::ServiceContext::SyncListContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def sync_list_items(index = T.unsafe(nil)); end
  def sync_list_permissions(identity = T.unsafe(nil)); end
  def to_s; end
  def update(ttl: T.unsafe(nil), collection_ttl: T.unsafe(nil)); end
end

class Twilio::REST::Sync::V1::ServiceContext::SyncListContext::SyncListItemContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, list_sid, index); end

  def delete(if_match: T.unsafe(nil)); end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(data: T.unsafe(nil), ttl: T.unsafe(nil), item_ttl: T.unsafe(nil), collection_ttl: T.unsafe(nil), if_match: T.unsafe(nil)); end
end

class Twilio::REST::Sync::V1::ServiceContext::SyncListContext::SyncListItemInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), list_sid: T.unsafe(nil), index: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def created_by; end
  def data; end
  def date_created; end
  def date_expires; end
  def date_updated; end
  def delete(if_match: T.unsafe(nil)); end
  def fetch; end
  def index; end
  def inspect; end
  def list_sid; end
  def revision; end
  def service_sid; end
  def to_s; end
  def update(data: T.unsafe(nil), ttl: T.unsafe(nil), item_ttl: T.unsafe(nil), collection_ttl: T.unsafe(nil), if_match: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Sync::V1::ServiceContext::SyncListContext::SyncListItemList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil), list_sid: T.unsafe(nil)); end

  def create(data: T.unsafe(nil), ttl: T.unsafe(nil), item_ttl: T.unsafe(nil), collection_ttl: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(order: T.unsafe(nil), from: T.unsafe(nil), bounds: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(order: T.unsafe(nil), from: T.unsafe(nil), bounds: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(order: T.unsafe(nil), from: T.unsafe(nil), bounds: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Sync::V1::ServiceContext::SyncListContext::SyncListItemPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Sync::V1::ServiceContext::SyncListContext::SyncListPermissionContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, list_sid, identity); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(read: T.unsafe(nil), write: T.unsafe(nil), manage: T.unsafe(nil)); end
end

class Twilio::REST::Sync::V1::ServiceContext::SyncListContext::SyncListPermissionInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), list_sid: T.unsafe(nil), identity: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def delete; end
  def fetch; end
  def identity; end
  def inspect; end
  def list_sid; end
  def manage; end
  def read; end
  def service_sid; end
  def to_s; end
  def update(read: T.unsafe(nil), write: T.unsafe(nil), manage: T.unsafe(nil)); end
  def url; end
  def write; end
end

class Twilio::REST::Sync::V1::ServiceContext::SyncListContext::SyncListPermissionList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil), list_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Sync::V1::ServiceContext::SyncListContext::SyncListPermissionPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Sync::V1::ServiceContext::SyncListInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def created_by; end
  def date_created; end
  def date_expires; end
  def date_updated; end
  def delete; end
  def fetch; end
  def inspect; end
  def links; end
  def revision; end
  def service_sid; end
  def sid; end
  def sync_list_items; end
  def sync_list_permissions; end
  def to_s; end
  def unique_name; end
  def update(ttl: T.unsafe(nil), collection_ttl: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Sync::V1::ServiceContext::SyncListList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil)); end

  def create(unique_name: T.unsafe(nil), ttl: T.unsafe(nil), collection_ttl: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Sync::V1::ServiceContext::SyncListPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Sync::V1::ServiceContext::SyncMapContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def sync_map_items(key = T.unsafe(nil)); end
  def sync_map_permissions(identity = T.unsafe(nil)); end
  def to_s; end
  def update(ttl: T.unsafe(nil), collection_ttl: T.unsafe(nil)); end
end

class Twilio::REST::Sync::V1::ServiceContext::SyncMapContext::SyncMapItemContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, map_sid, key); end

  def delete(if_match: T.unsafe(nil)); end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(data: T.unsafe(nil), ttl: T.unsafe(nil), item_ttl: T.unsafe(nil), collection_ttl: T.unsafe(nil), if_match: T.unsafe(nil)); end
end

class Twilio::REST::Sync::V1::ServiceContext::SyncMapContext::SyncMapItemInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), map_sid: T.unsafe(nil), key: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def created_by; end
  def data; end
  def date_created; end
  def date_expires; end
  def date_updated; end
  def delete(if_match: T.unsafe(nil)); end
  def fetch; end
  def inspect; end
  def key; end
  def map_sid; end
  def revision; end
  def service_sid; end
  def to_s; end
  def update(data: T.unsafe(nil), ttl: T.unsafe(nil), item_ttl: T.unsafe(nil), collection_ttl: T.unsafe(nil), if_match: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Sync::V1::ServiceContext::SyncMapContext::SyncMapItemList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil), map_sid: T.unsafe(nil)); end

  def create(key: T.unsafe(nil), data: T.unsafe(nil), ttl: T.unsafe(nil), item_ttl: T.unsafe(nil), collection_ttl: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(order: T.unsafe(nil), from: T.unsafe(nil), bounds: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(order: T.unsafe(nil), from: T.unsafe(nil), bounds: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(order: T.unsafe(nil), from: T.unsafe(nil), bounds: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Sync::V1::ServiceContext::SyncMapContext::SyncMapItemPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Sync::V1::ServiceContext::SyncMapContext::SyncMapPermissionContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, map_sid, identity); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(read: T.unsafe(nil), write: T.unsafe(nil), manage: T.unsafe(nil)); end
end

class Twilio::REST::Sync::V1::ServiceContext::SyncMapContext::SyncMapPermissionInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), map_sid: T.unsafe(nil), identity: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def delete; end
  def fetch; end
  def identity; end
  def inspect; end
  def manage; end
  def map_sid; end
  def read; end
  def service_sid; end
  def to_s; end
  def update(read: T.unsafe(nil), write: T.unsafe(nil), manage: T.unsafe(nil)); end
  def url; end
  def write; end
end

class Twilio::REST::Sync::V1::ServiceContext::SyncMapContext::SyncMapPermissionList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil), map_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Sync::V1::ServiceContext::SyncMapContext::SyncMapPermissionPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Sync::V1::ServiceContext::SyncMapInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def created_by; end
  def date_created; end
  def date_expires; end
  def date_updated; end
  def delete; end
  def fetch; end
  def inspect; end
  def links; end
  def revision; end
  def service_sid; end
  def sid; end
  def sync_map_items; end
  def sync_map_permissions; end
  def to_s; end
  def unique_name; end
  def update(ttl: T.unsafe(nil), collection_ttl: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Sync::V1::ServiceContext::SyncMapList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil)); end

  def create(unique_name: T.unsafe(nil), ttl: T.unsafe(nil), collection_ttl: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Sync::V1::ServiceContext::SyncMapPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Sync::V1::ServiceContext::SyncStreamContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def stream_messages; end
  def to_s; end
  def update(ttl: T.unsafe(nil)); end
end

class Twilio::REST::Sync::V1::ServiceContext::SyncStreamContext::StreamMessageInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), stream_sid: T.unsafe(nil)); end

  def data; end
  def inspect; end
  def sid; end
  def to_s; end
end

class Twilio::REST::Sync::V1::ServiceContext::SyncStreamContext::StreamMessageList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil), stream_sid: T.unsafe(nil)); end

  def create(data: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Sync::V1::ServiceContext::SyncStreamContext::StreamMessagePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Sync::V1::ServiceContext::SyncStreamInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def created_by; end
  def date_created; end
  def date_expires; end
  def date_updated; end
  def delete; end
  def fetch; end
  def inspect; end
  def links; end
  def service_sid; end
  def sid; end
  def stream_messages; end
  def to_s; end
  def unique_name; end
  def update(ttl: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Sync::V1::ServiceContext::SyncStreamList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil)); end

  def create(unique_name: T.unsafe(nil), ttl: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Sync::V1::ServiceContext::SyncStreamPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Sync::V1::ServiceInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def acl_enabled; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def documents; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def links; end
  def reachability_debouncing_enabled; end
  def reachability_debouncing_window; end
  def reachability_webhooks_enabled; end
  def sid; end
  def sync_lists; end
  def sync_maps; end
  def sync_streams; end
  def to_s; end
  def unique_name; end
  def update(webhook_url: T.unsafe(nil), friendly_name: T.unsafe(nil), reachability_webhooks_enabled: T.unsafe(nil), acl_enabled: T.unsafe(nil), reachability_debouncing_enabled: T.unsafe(nil), reachability_debouncing_window: T.unsafe(nil), webhooks_from_rest_enabled: T.unsafe(nil)); end
  def url; end
  def webhook_url; end
  def webhooks_from_rest_enabled; end
end

class Twilio::REST::Sync::V1::ServiceList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(friendly_name: T.unsafe(nil), webhook_url: T.unsafe(nil), reachability_webhooks_enabled: T.unsafe(nil), acl_enabled: T.unsafe(nil), reachability_debouncing_enabled: T.unsafe(nil), reachability_debouncing_window: T.unsafe(nil), webhooks_from_rest_enabled: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Sync::V1::ServicePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::TaskRouterClient < ::Twilio::REST::ObsoleteClient; end

class Twilio::REST::Taskrouter < ::Twilio::REST::Domain
  def initialize(twilio); end

  def to_s; end
  def v1; end
  def workspaces(sid = T.unsafe(nil)); end
end

class Twilio::REST::Taskrouter::V1 < ::Twilio::REST::Version
  def initialize(domain); end

  def to_s; end
  def workspaces(sid = T.unsafe(nil)); end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def activities(sid = T.unsafe(nil)); end
  def cumulative_statistics; end
  def delete; end
  def events(sid = T.unsafe(nil)); end
  def fetch; end
  def inspect; end
  def real_time_statistics; end
  def statistics; end
  def task_channels(sid = T.unsafe(nil)); end
  def task_queues(sid = T.unsafe(nil)); end
  def tasks(sid = T.unsafe(nil)); end
  def to_s; end
  def update(default_activity_sid: T.unsafe(nil), event_callback_url: T.unsafe(nil), events_filter: T.unsafe(nil), friendly_name: T.unsafe(nil), multi_task_enabled: T.unsafe(nil), timeout_activity_sid: T.unsafe(nil), prioritize_queue_order: T.unsafe(nil)); end
  def workers(sid = T.unsafe(nil)); end
  def workflows(sid = T.unsafe(nil)); end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::ActivityContext < ::Twilio::REST::InstanceContext
  def initialize(version, workspace_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil)); end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::ActivityInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, workspace_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def available; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def links; end
  def sid; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil)); end
  def url; end
  def workspace_sid; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::ActivityList < ::Twilio::REST::ListResource
  def initialize(version, workspace_sid: T.unsafe(nil)); end

  def create(friendly_name: T.unsafe(nil), available: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(friendly_name: T.unsafe(nil), available: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(friendly_name: T.unsafe(nil), available: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(friendly_name: T.unsafe(nil), available: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::ActivityPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::EventContext < ::Twilio::REST::InstanceContext
  def initialize(version, workspace_sid, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::EventInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, workspace_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def actor_sid; end
  def actor_type; end
  def actor_url; end
  def context; end
  def description; end
  def event_data; end
  def event_date; end
  def event_date_ms; end
  def event_type; end
  def fetch; end
  def inspect; end
  def resource_sid; end
  def resource_type; end
  def resource_url; end
  def sid; end
  def source; end
  def source_ip_address; end
  def to_s; end
  def url; end
  def workspace_sid; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::EventList < ::Twilio::REST::ListResource
  def initialize(version, workspace_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(end_date: T.unsafe(nil), event_type: T.unsafe(nil), minutes: T.unsafe(nil), reservation_sid: T.unsafe(nil), start_date: T.unsafe(nil), task_queue_sid: T.unsafe(nil), task_sid: T.unsafe(nil), worker_sid: T.unsafe(nil), workflow_sid: T.unsafe(nil), task_channel: T.unsafe(nil), sid: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(end_date: T.unsafe(nil), event_type: T.unsafe(nil), minutes: T.unsafe(nil), reservation_sid: T.unsafe(nil), start_date: T.unsafe(nil), task_queue_sid: T.unsafe(nil), task_sid: T.unsafe(nil), worker_sid: T.unsafe(nil), workflow_sid: T.unsafe(nil), task_channel: T.unsafe(nil), sid: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(end_date: T.unsafe(nil), event_type: T.unsafe(nil), minutes: T.unsafe(nil), reservation_sid: T.unsafe(nil), start_date: T.unsafe(nil), task_queue_sid: T.unsafe(nil), task_sid: T.unsafe(nil), worker_sid: T.unsafe(nil), workflow_sid: T.unsafe(nil), task_channel: T.unsafe(nil), sid: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::EventPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskChannelContext < ::Twilio::REST::InstanceContext
  def initialize(version, workspace_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), channel_optimized_routing: T.unsafe(nil)); end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskChannelInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, workspace_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def channel_optimized_routing; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def links; end
  def sid; end
  def to_s; end
  def unique_name; end
  def update(friendly_name: T.unsafe(nil), channel_optimized_routing: T.unsafe(nil)); end
  def url; end
  def workspace_sid; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskChannelList < ::Twilio::REST::ListResource
  def initialize(version, workspace_sid: T.unsafe(nil)); end

  def create(friendly_name: T.unsafe(nil), unique_name: T.unsafe(nil), channel_optimized_routing: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskChannelPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskContext < ::Twilio::REST::InstanceContext
  def initialize(version, workspace_sid, sid); end

  def delete(if_match: T.unsafe(nil)); end
  def fetch; end
  def inspect; end
  def reservations(sid = T.unsafe(nil)); end
  def to_s; end
  def update(attributes: T.unsafe(nil), assignment_status: T.unsafe(nil), reason: T.unsafe(nil), priority: T.unsafe(nil), task_channel: T.unsafe(nil), if_match: T.unsafe(nil)); end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskContext::ReservationContext < ::Twilio::REST::InstanceContext
  def initialize(version, workspace_sid, task_sid, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
  def update(reservation_status: T.unsafe(nil), worker_activity_sid: T.unsafe(nil), instruction: T.unsafe(nil), dequeue_post_work_activity_sid: T.unsafe(nil), dequeue_from: T.unsafe(nil), dequeue_record: T.unsafe(nil), dequeue_timeout: T.unsafe(nil), dequeue_to: T.unsafe(nil), dequeue_status_callback_url: T.unsafe(nil), call_from: T.unsafe(nil), call_record: T.unsafe(nil), call_timeout: T.unsafe(nil), call_to: T.unsafe(nil), call_url: T.unsafe(nil), call_status_callback_url: T.unsafe(nil), call_accept: T.unsafe(nil), redirect_call_sid: T.unsafe(nil), redirect_accept: T.unsafe(nil), redirect_url: T.unsafe(nil), to: T.unsafe(nil), from: T.unsafe(nil), status_callback: T.unsafe(nil), status_callback_method: T.unsafe(nil), status_callback_event: T.unsafe(nil), timeout: T.unsafe(nil), record: T.unsafe(nil), muted: T.unsafe(nil), beep: T.unsafe(nil), start_conference_on_enter: T.unsafe(nil), end_conference_on_exit: T.unsafe(nil), wait_url: T.unsafe(nil), wait_method: T.unsafe(nil), early_media: T.unsafe(nil), max_participants: T.unsafe(nil), conference_status_callback: T.unsafe(nil), conference_status_callback_method: T.unsafe(nil), conference_status_callback_event: T.unsafe(nil), conference_record: T.unsafe(nil), conference_trim: T.unsafe(nil), recording_channels: T.unsafe(nil), recording_status_callback: T.unsafe(nil), recording_status_callback_method: T.unsafe(nil), conference_recording_status_callback: T.unsafe(nil), conference_recording_status_callback_method: T.unsafe(nil), region: T.unsafe(nil), sip_auth_username: T.unsafe(nil), sip_auth_password: T.unsafe(nil), dequeue_status_callback_event: T.unsafe(nil), post_work_activity_sid: T.unsafe(nil), supervisor_mode: T.unsafe(nil), supervisor: T.unsafe(nil), end_conference_on_customer_exit: T.unsafe(nil), beep_on_customer_entrance: T.unsafe(nil), if_match: T.unsafe(nil)); end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskContext::ReservationInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, workspace_sid: T.unsafe(nil), task_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def fetch; end
  def inspect; end
  def links; end
  def reservation_status; end
  def sid; end
  def task_sid; end
  def to_s; end
  def update(reservation_status: T.unsafe(nil), worker_activity_sid: T.unsafe(nil), instruction: T.unsafe(nil), dequeue_post_work_activity_sid: T.unsafe(nil), dequeue_from: T.unsafe(nil), dequeue_record: T.unsafe(nil), dequeue_timeout: T.unsafe(nil), dequeue_to: T.unsafe(nil), dequeue_status_callback_url: T.unsafe(nil), call_from: T.unsafe(nil), call_record: T.unsafe(nil), call_timeout: T.unsafe(nil), call_to: T.unsafe(nil), call_url: T.unsafe(nil), call_status_callback_url: T.unsafe(nil), call_accept: T.unsafe(nil), redirect_call_sid: T.unsafe(nil), redirect_accept: T.unsafe(nil), redirect_url: T.unsafe(nil), to: T.unsafe(nil), from: T.unsafe(nil), status_callback: T.unsafe(nil), status_callback_method: T.unsafe(nil), status_callback_event: T.unsafe(nil), timeout: T.unsafe(nil), record: T.unsafe(nil), muted: T.unsafe(nil), beep: T.unsafe(nil), start_conference_on_enter: T.unsafe(nil), end_conference_on_exit: T.unsafe(nil), wait_url: T.unsafe(nil), wait_method: T.unsafe(nil), early_media: T.unsafe(nil), max_participants: T.unsafe(nil), conference_status_callback: T.unsafe(nil), conference_status_callback_method: T.unsafe(nil), conference_status_callback_event: T.unsafe(nil), conference_record: T.unsafe(nil), conference_trim: T.unsafe(nil), recording_channels: T.unsafe(nil), recording_status_callback: T.unsafe(nil), recording_status_callback_method: T.unsafe(nil), conference_recording_status_callback: T.unsafe(nil), conference_recording_status_callback_method: T.unsafe(nil), region: T.unsafe(nil), sip_auth_username: T.unsafe(nil), sip_auth_password: T.unsafe(nil), dequeue_status_callback_event: T.unsafe(nil), post_work_activity_sid: T.unsafe(nil), supervisor_mode: T.unsafe(nil), supervisor: T.unsafe(nil), end_conference_on_customer_exit: T.unsafe(nil), beep_on_customer_entrance: T.unsafe(nil), if_match: T.unsafe(nil)); end
  def url; end
  def worker_name; end
  def worker_sid; end
  def workspace_sid; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskContext::ReservationList < ::Twilio::REST::ListResource
  def initialize(version, workspace_sid: T.unsafe(nil), task_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(reservation_status: T.unsafe(nil), worker_sid: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(reservation_status: T.unsafe(nil), worker_sid: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(reservation_status: T.unsafe(nil), worker_sid: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskContext::ReservationPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, workspace_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def addons; end
  def age; end
  def assignment_status; end
  def attributes; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete(if_match: T.unsafe(nil)); end
  def fetch; end
  def inspect; end
  def links; end
  def priority; end
  def reason; end
  def reservations; end
  def sid; end
  def task_channel_sid; end
  def task_channel_unique_name; end
  def task_queue_entered_date; end
  def task_queue_friendly_name; end
  def task_queue_sid; end
  def timeout; end
  def to_s; end
  def update(attributes: T.unsafe(nil), assignment_status: T.unsafe(nil), reason: T.unsafe(nil), priority: T.unsafe(nil), task_channel: T.unsafe(nil), if_match: T.unsafe(nil)); end
  def url; end
  def workflow_friendly_name; end
  def workflow_sid; end
  def workspace_sid; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskList < ::Twilio::REST::ListResource
  def initialize(version, workspace_sid: T.unsafe(nil)); end

  def create(timeout: T.unsafe(nil), priority: T.unsafe(nil), task_channel: T.unsafe(nil), workflow_sid: T.unsafe(nil), attributes: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(priority: T.unsafe(nil), assignment_status: T.unsafe(nil), workflow_sid: T.unsafe(nil), workflow_name: T.unsafe(nil), task_queue_sid: T.unsafe(nil), task_queue_name: T.unsafe(nil), evaluate_task_attributes: T.unsafe(nil), ordering: T.unsafe(nil), has_addons: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(priority: T.unsafe(nil), assignment_status: T.unsafe(nil), workflow_sid: T.unsafe(nil), workflow_name: T.unsafe(nil), task_queue_sid: T.unsafe(nil), task_queue_name: T.unsafe(nil), evaluate_task_attributes: T.unsafe(nil), ordering: T.unsafe(nil), has_addons: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(priority: T.unsafe(nil), assignment_status: T.unsafe(nil), workflow_sid: T.unsafe(nil), workflow_name: T.unsafe(nil), task_queue_sid: T.unsafe(nil), task_queue_name: T.unsafe(nil), evaluate_task_attributes: T.unsafe(nil), ordering: T.unsafe(nil), has_addons: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskQueueContext < ::Twilio::REST::InstanceContext
  def initialize(version, workspace_sid, sid); end

  def cumulative_statistics; end
  def delete; end
  def fetch; end
  def inspect; end
  def real_time_statistics; end
  def statistics; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), target_workers: T.unsafe(nil), reservation_activity_sid: T.unsafe(nil), assignment_activity_sid: T.unsafe(nil), max_reserved_workers: T.unsafe(nil), task_order: T.unsafe(nil)); end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskQueueContext::TaskQueueCumulativeStatisticsContext < ::Twilio::REST::InstanceContext
  def initialize(version, workspace_sid, task_queue_sid); end

  def fetch(end_date: T.unsafe(nil), minutes: T.unsafe(nil), start_date: T.unsafe(nil), task_channel: T.unsafe(nil), split_by_wait_time: T.unsafe(nil)); end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskQueueContext::TaskQueueCumulativeStatisticsInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, workspace_sid: T.unsafe(nil), task_queue_sid: T.unsafe(nil)); end

  def account_sid; end
  def avg_task_acceptance_time; end
  def context; end
  def end_time; end
  def fetch(end_date: T.unsafe(nil), minutes: T.unsafe(nil), start_date: T.unsafe(nil), task_channel: T.unsafe(nil), split_by_wait_time: T.unsafe(nil)); end
  def inspect; end
  def reservations_accepted; end
  def reservations_canceled; end
  def reservations_created; end
  def reservations_rejected; end
  def reservations_rescinded; end
  def reservations_timed_out; end
  def split_by_wait_time; end
  def start_time; end
  def task_queue_sid; end
  def tasks_canceled; end
  def tasks_completed; end
  def tasks_deleted; end
  def tasks_entered; end
  def tasks_moved; end
  def to_s; end
  def url; end
  def wait_duration_in_queue_until_accepted; end
  def wait_duration_until_accepted; end
  def wait_duration_until_canceled; end
  def workspace_sid; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskQueueContext::TaskQueueCumulativeStatisticsList < ::Twilio::REST::ListResource
  def initialize(version, workspace_sid: T.unsafe(nil), task_queue_sid: T.unsafe(nil)); end

  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskQueueContext::TaskQueueCumulativeStatisticsPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskQueueContext::TaskQueueRealTimeStatisticsContext < ::Twilio::REST::InstanceContext
  def initialize(version, workspace_sid, task_queue_sid); end

  def fetch(task_channel: T.unsafe(nil)); end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskQueueContext::TaskQueueRealTimeStatisticsInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, workspace_sid: T.unsafe(nil), task_queue_sid: T.unsafe(nil)); end

  def account_sid; end
  def activity_statistics; end
  def context; end
  def fetch(task_channel: T.unsafe(nil)); end
  def inspect; end
  def longest_relative_task_age_in_queue; end
  def longest_relative_task_sid_in_queue; end
  def longest_task_waiting_age; end
  def longest_task_waiting_sid; end
  def task_queue_sid; end
  def tasks_by_priority; end
  def tasks_by_status; end
  def to_s; end
  def total_available_workers; end
  def total_eligible_workers; end
  def total_tasks; end
  def url; end
  def workspace_sid; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskQueueContext::TaskQueueRealTimeStatisticsList < ::Twilio::REST::ListResource
  def initialize(version, workspace_sid: T.unsafe(nil), task_queue_sid: T.unsafe(nil)); end

  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskQueueContext::TaskQueueRealTimeStatisticsPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskQueueContext::TaskQueueStatisticsContext < ::Twilio::REST::InstanceContext
  def initialize(version, workspace_sid, task_queue_sid); end

  def fetch(end_date: T.unsafe(nil), minutes: T.unsafe(nil), start_date: T.unsafe(nil), task_channel: T.unsafe(nil), split_by_wait_time: T.unsafe(nil)); end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskQueueContext::TaskQueueStatisticsInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, workspace_sid: T.unsafe(nil), task_queue_sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def cumulative; end
  def fetch(end_date: T.unsafe(nil), minutes: T.unsafe(nil), start_date: T.unsafe(nil), task_channel: T.unsafe(nil), split_by_wait_time: T.unsafe(nil)); end
  def inspect; end
  def realtime; end
  def task_queue_sid; end
  def to_s; end
  def url; end
  def workspace_sid; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskQueueContext::TaskQueueStatisticsList < ::Twilio::REST::ListResource
  def initialize(version, workspace_sid: T.unsafe(nil), task_queue_sid: T.unsafe(nil)); end

  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskQueueContext::TaskQueueStatisticsPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskQueueInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, workspace_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def assignment_activity_name; end
  def assignment_activity_sid; end
  def context; end
  def cumulative_statistics; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def links; end
  def max_reserved_workers; end
  def real_time_statistics; end
  def reservation_activity_name; end
  def reservation_activity_sid; end
  def sid; end
  def statistics; end
  def target_workers; end
  def task_order; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), target_workers: T.unsafe(nil), reservation_activity_sid: T.unsafe(nil), assignment_activity_sid: T.unsafe(nil), max_reserved_workers: T.unsafe(nil), task_order: T.unsafe(nil)); end
  def url; end
  def workspace_sid; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskQueueList < ::Twilio::REST::ListResource
  def initialize(version, workspace_sid: T.unsafe(nil)); end

  def create(friendly_name: T.unsafe(nil), target_workers: T.unsafe(nil), max_reserved_workers: T.unsafe(nil), task_order: T.unsafe(nil), reservation_activity_sid: T.unsafe(nil), assignment_activity_sid: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(friendly_name: T.unsafe(nil), evaluate_worker_attributes: T.unsafe(nil), worker_sid: T.unsafe(nil), ordering: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(friendly_name: T.unsafe(nil), evaluate_worker_attributes: T.unsafe(nil), worker_sid: T.unsafe(nil), ordering: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def statistics; end
  def stream(friendly_name: T.unsafe(nil), evaluate_worker_attributes: T.unsafe(nil), worker_sid: T.unsafe(nil), ordering: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskQueueList::TaskQueuesStatisticsInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, workspace_sid: T.unsafe(nil)); end

  def account_sid; end
  def cumulative; end
  def inspect; end
  def realtime; end
  def task_queue_sid; end
  def to_s; end
  def workspace_sid; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskQueueList::TaskQueuesStatisticsList < ::Twilio::REST::ListResource
  def initialize(version, workspace_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(end_date: T.unsafe(nil), friendly_name: T.unsafe(nil), minutes: T.unsafe(nil), start_date: T.unsafe(nil), task_channel: T.unsafe(nil), split_by_wait_time: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(end_date: T.unsafe(nil), friendly_name: T.unsafe(nil), minutes: T.unsafe(nil), start_date: T.unsafe(nil), task_channel: T.unsafe(nil), split_by_wait_time: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(end_date: T.unsafe(nil), friendly_name: T.unsafe(nil), minutes: T.unsafe(nil), start_date: T.unsafe(nil), task_channel: T.unsafe(nil), split_by_wait_time: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskQueueList::TaskQueuesStatisticsPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskQueuePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerContext < ::Twilio::REST::InstanceContext
  def initialize(version, workspace_sid, sid); end

  def cumulative_statistics; end
  def delete(if_match: T.unsafe(nil)); end
  def fetch; end
  def inspect; end
  def real_time_statistics; end
  def reservations(sid = T.unsafe(nil)); end
  def statistics; end
  def to_s; end
  def update(activity_sid: T.unsafe(nil), attributes: T.unsafe(nil), friendly_name: T.unsafe(nil), reject_pending_reservations: T.unsafe(nil), if_match: T.unsafe(nil)); end
  def worker_channels(sid = T.unsafe(nil)); end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerContext::ReservationContext < ::Twilio::REST::InstanceContext
  def initialize(version, workspace_sid, worker_sid, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
  def update(reservation_status: T.unsafe(nil), worker_activity_sid: T.unsafe(nil), instruction: T.unsafe(nil), dequeue_post_work_activity_sid: T.unsafe(nil), dequeue_from: T.unsafe(nil), dequeue_record: T.unsafe(nil), dequeue_timeout: T.unsafe(nil), dequeue_to: T.unsafe(nil), dequeue_status_callback_url: T.unsafe(nil), call_from: T.unsafe(nil), call_record: T.unsafe(nil), call_timeout: T.unsafe(nil), call_to: T.unsafe(nil), call_url: T.unsafe(nil), call_status_callback_url: T.unsafe(nil), call_accept: T.unsafe(nil), redirect_call_sid: T.unsafe(nil), redirect_accept: T.unsafe(nil), redirect_url: T.unsafe(nil), to: T.unsafe(nil), from: T.unsafe(nil), status_callback: T.unsafe(nil), status_callback_method: T.unsafe(nil), status_callback_event: T.unsafe(nil), timeout: T.unsafe(nil), record: T.unsafe(nil), muted: T.unsafe(nil), beep: T.unsafe(nil), start_conference_on_enter: T.unsafe(nil), end_conference_on_exit: T.unsafe(nil), wait_url: T.unsafe(nil), wait_method: T.unsafe(nil), early_media: T.unsafe(nil), max_participants: T.unsafe(nil), conference_status_callback: T.unsafe(nil), conference_status_callback_method: T.unsafe(nil), conference_status_callback_event: T.unsafe(nil), conference_record: T.unsafe(nil), conference_trim: T.unsafe(nil), recording_channels: T.unsafe(nil), recording_status_callback: T.unsafe(nil), recording_status_callback_method: T.unsafe(nil), conference_recording_status_callback: T.unsafe(nil), conference_recording_status_callback_method: T.unsafe(nil), region: T.unsafe(nil), sip_auth_username: T.unsafe(nil), sip_auth_password: T.unsafe(nil), dequeue_status_callback_event: T.unsafe(nil), post_work_activity_sid: T.unsafe(nil), end_conference_on_customer_exit: T.unsafe(nil), beep_on_customer_entrance: T.unsafe(nil), if_match: T.unsafe(nil)); end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerContext::ReservationInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, workspace_sid: T.unsafe(nil), worker_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def fetch; end
  def inspect; end
  def links; end
  def reservation_status; end
  def sid; end
  def task_sid; end
  def to_s; end
  def update(reservation_status: T.unsafe(nil), worker_activity_sid: T.unsafe(nil), instruction: T.unsafe(nil), dequeue_post_work_activity_sid: T.unsafe(nil), dequeue_from: T.unsafe(nil), dequeue_record: T.unsafe(nil), dequeue_timeout: T.unsafe(nil), dequeue_to: T.unsafe(nil), dequeue_status_callback_url: T.unsafe(nil), call_from: T.unsafe(nil), call_record: T.unsafe(nil), call_timeout: T.unsafe(nil), call_to: T.unsafe(nil), call_url: T.unsafe(nil), call_status_callback_url: T.unsafe(nil), call_accept: T.unsafe(nil), redirect_call_sid: T.unsafe(nil), redirect_accept: T.unsafe(nil), redirect_url: T.unsafe(nil), to: T.unsafe(nil), from: T.unsafe(nil), status_callback: T.unsafe(nil), status_callback_method: T.unsafe(nil), status_callback_event: T.unsafe(nil), timeout: T.unsafe(nil), record: T.unsafe(nil), muted: T.unsafe(nil), beep: T.unsafe(nil), start_conference_on_enter: T.unsafe(nil), end_conference_on_exit: T.unsafe(nil), wait_url: T.unsafe(nil), wait_method: T.unsafe(nil), early_media: T.unsafe(nil), max_participants: T.unsafe(nil), conference_status_callback: T.unsafe(nil), conference_status_callback_method: T.unsafe(nil), conference_status_callback_event: T.unsafe(nil), conference_record: T.unsafe(nil), conference_trim: T.unsafe(nil), recording_channels: T.unsafe(nil), recording_status_callback: T.unsafe(nil), recording_status_callback_method: T.unsafe(nil), conference_recording_status_callback: T.unsafe(nil), conference_recording_status_callback_method: T.unsafe(nil), region: T.unsafe(nil), sip_auth_username: T.unsafe(nil), sip_auth_password: T.unsafe(nil), dequeue_status_callback_event: T.unsafe(nil), post_work_activity_sid: T.unsafe(nil), end_conference_on_customer_exit: T.unsafe(nil), beep_on_customer_entrance: T.unsafe(nil), if_match: T.unsafe(nil)); end
  def url; end
  def worker_name; end
  def worker_sid; end
  def workspace_sid; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerContext::ReservationList < ::Twilio::REST::ListResource
  def initialize(version, workspace_sid: T.unsafe(nil), worker_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(reservation_status: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(reservation_status: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(reservation_status: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerContext::ReservationPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerContext::WorkerChannelContext < ::Twilio::REST::InstanceContext
  def initialize(version, workspace_sid, worker_sid, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
  def update(capacity: T.unsafe(nil), available: T.unsafe(nil)); end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerContext::WorkerChannelInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, workspace_sid: T.unsafe(nil), worker_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def assigned_tasks; end
  def available; end
  def available_capacity_percentage; end
  def configured_capacity; end
  def context; end
  def date_created; end
  def date_updated; end
  def fetch; end
  def inspect; end
  def sid; end
  def task_channel_sid; end
  def task_channel_unique_name; end
  def to_s; end
  def update(capacity: T.unsafe(nil), available: T.unsafe(nil)); end
  def url; end
  def worker_sid; end
  def workspace_sid; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerContext::WorkerChannelList < ::Twilio::REST::ListResource
  def initialize(version, workspace_sid: T.unsafe(nil), worker_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerContext::WorkerChannelPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerContext::WorkerStatisticsContext < ::Twilio::REST::InstanceContext
  def initialize(version, workspace_sid, worker_sid); end

  def fetch(minutes: T.unsafe(nil), start_date: T.unsafe(nil), end_date: T.unsafe(nil), task_channel: T.unsafe(nil)); end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerContext::WorkerStatisticsInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, workspace_sid: T.unsafe(nil), worker_sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def cumulative; end
  def fetch(minutes: T.unsafe(nil), start_date: T.unsafe(nil), end_date: T.unsafe(nil), task_channel: T.unsafe(nil)); end
  def inspect; end
  def to_s; end
  def url; end
  def worker_sid; end
  def workspace_sid; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerContext::WorkerStatisticsList < ::Twilio::REST::ListResource
  def initialize(version, workspace_sid: T.unsafe(nil), worker_sid: T.unsafe(nil)); end

  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerContext::WorkerStatisticsPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerContext::WorkersCumulativeStatisticsContext < ::Twilio::REST::InstanceContext
  def initialize(version, workspace_sid); end

  def fetch(end_date: T.unsafe(nil), minutes: T.unsafe(nil), start_date: T.unsafe(nil), task_channel: T.unsafe(nil)); end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerContext::WorkersCumulativeStatisticsInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, workspace_sid: T.unsafe(nil)); end

  def account_sid; end
  def activity_durations; end
  def context; end
  def end_time; end
  def fetch(end_date: T.unsafe(nil), minutes: T.unsafe(nil), start_date: T.unsafe(nil), task_channel: T.unsafe(nil)); end
  def inspect; end
  def reservations_accepted; end
  def reservations_canceled; end
  def reservations_created; end
  def reservations_rejected; end
  def reservations_rescinded; end
  def reservations_timed_out; end
  def start_time; end
  def to_s; end
  def url; end
  def workspace_sid; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerContext::WorkersCumulativeStatisticsList < ::Twilio::REST::ListResource
  def initialize(version, workspace_sid: T.unsafe(nil)); end

  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerContext::WorkersCumulativeStatisticsPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerContext::WorkersRealTimeStatisticsContext < ::Twilio::REST::InstanceContext
  def initialize(version, workspace_sid); end

  def fetch(task_channel: T.unsafe(nil)); end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerContext::WorkersRealTimeStatisticsInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, workspace_sid: T.unsafe(nil)); end

  def account_sid; end
  def activity_statistics; end
  def context; end
  def fetch(task_channel: T.unsafe(nil)); end
  def inspect; end
  def to_s; end
  def total_workers; end
  def url; end
  def workspace_sid; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerContext::WorkersRealTimeStatisticsList < ::Twilio::REST::ListResource
  def initialize(version, workspace_sid: T.unsafe(nil)); end

  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerContext::WorkersRealTimeStatisticsPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, workspace_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def activity_name; end
  def activity_sid; end
  def attributes; end
  def available; end
  def context; end
  def cumulative_statistics; end
  def date_created; end
  def date_status_changed; end
  def date_updated; end
  def delete(if_match: T.unsafe(nil)); end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def links; end
  def real_time_statistics; end
  def reservations; end
  def sid; end
  def statistics; end
  def to_s; end
  def update(activity_sid: T.unsafe(nil), attributes: T.unsafe(nil), friendly_name: T.unsafe(nil), reject_pending_reservations: T.unsafe(nil), if_match: T.unsafe(nil)); end
  def url; end
  def worker_channels; end
  def workspace_sid; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerList < ::Twilio::REST::ListResource
  def initialize(version, workspace_sid: T.unsafe(nil)); end

  def create(friendly_name: T.unsafe(nil), activity_sid: T.unsafe(nil), attributes: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(activity_name: T.unsafe(nil), activity_sid: T.unsafe(nil), available: T.unsafe(nil), friendly_name: T.unsafe(nil), target_workers_expression: T.unsafe(nil), task_queue_name: T.unsafe(nil), task_queue_sid: T.unsafe(nil), ordering: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(activity_name: T.unsafe(nil), activity_sid: T.unsafe(nil), available: T.unsafe(nil), friendly_name: T.unsafe(nil), target_workers_expression: T.unsafe(nil), task_queue_name: T.unsafe(nil), task_queue_sid: T.unsafe(nil), ordering: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def statistics; end
  def stream(activity_name: T.unsafe(nil), activity_sid: T.unsafe(nil), available: T.unsafe(nil), friendly_name: T.unsafe(nil), target_workers_expression: T.unsafe(nil), task_queue_name: T.unsafe(nil), task_queue_sid: T.unsafe(nil), ordering: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerList::WorkersStatisticsContext < ::Twilio::REST::InstanceContext
  def initialize(version, workspace_sid); end

  def fetch(minutes: T.unsafe(nil), start_date: T.unsafe(nil), end_date: T.unsafe(nil), task_queue_sid: T.unsafe(nil), task_queue_name: T.unsafe(nil), friendly_name: T.unsafe(nil), task_channel: T.unsafe(nil)); end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerList::WorkersStatisticsInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, workspace_sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def cumulative; end
  def fetch(minutes: T.unsafe(nil), start_date: T.unsafe(nil), end_date: T.unsafe(nil), task_queue_sid: T.unsafe(nil), task_queue_name: T.unsafe(nil), friendly_name: T.unsafe(nil), task_channel: T.unsafe(nil)); end
  def inspect; end
  def realtime; end
  def to_s; end
  def url; end
  def workspace_sid; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerList::WorkersStatisticsList < ::Twilio::REST::ListResource
  def initialize(version, workspace_sid: T.unsafe(nil)); end

  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerList::WorkersStatisticsPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkflowContext < ::Twilio::REST::InstanceContext
  def initialize(version, workspace_sid, sid); end

  def cumulative_statistics; end
  def delete; end
  def fetch; end
  def inspect; end
  def real_time_statistics; end
  def statistics; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), assignment_callback_url: T.unsafe(nil), fallback_assignment_callback_url: T.unsafe(nil), configuration: T.unsafe(nil), task_reservation_timeout: T.unsafe(nil), re_evaluate_tasks: T.unsafe(nil)); end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkflowContext::WorkflowCumulativeStatisticsContext < ::Twilio::REST::InstanceContext
  def initialize(version, workspace_sid, workflow_sid); end

  def fetch(end_date: T.unsafe(nil), minutes: T.unsafe(nil), start_date: T.unsafe(nil), task_channel: T.unsafe(nil), split_by_wait_time: T.unsafe(nil)); end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkflowContext::WorkflowCumulativeStatisticsInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, workspace_sid: T.unsafe(nil), workflow_sid: T.unsafe(nil)); end

  def account_sid; end
  def avg_task_acceptance_time; end
  def context; end
  def end_time; end
  def fetch(end_date: T.unsafe(nil), minutes: T.unsafe(nil), start_date: T.unsafe(nil), task_channel: T.unsafe(nil), split_by_wait_time: T.unsafe(nil)); end
  def inspect; end
  def reservations_accepted; end
  def reservations_canceled; end
  def reservations_created; end
  def reservations_rejected; end
  def reservations_rescinded; end
  def reservations_timed_out; end
  def split_by_wait_time; end
  def start_time; end
  def tasks_canceled; end
  def tasks_completed; end
  def tasks_deleted; end
  def tasks_entered; end
  def tasks_moved; end
  def tasks_timed_out_in_workflow; end
  def to_s; end
  def url; end
  def wait_duration_until_accepted; end
  def wait_duration_until_canceled; end
  def workflow_sid; end
  def workspace_sid; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkflowContext::WorkflowCumulativeStatisticsList < ::Twilio::REST::ListResource
  def initialize(version, workspace_sid: T.unsafe(nil), workflow_sid: T.unsafe(nil)); end

  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkflowContext::WorkflowCumulativeStatisticsPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkflowContext::WorkflowRealTimeStatisticsContext < ::Twilio::REST::InstanceContext
  def initialize(version, workspace_sid, workflow_sid); end

  def fetch(task_channel: T.unsafe(nil)); end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkflowContext::WorkflowRealTimeStatisticsInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, workspace_sid: T.unsafe(nil), workflow_sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def fetch(task_channel: T.unsafe(nil)); end
  def inspect; end
  def longest_task_waiting_age; end
  def longest_task_waiting_sid; end
  def tasks_by_priority; end
  def tasks_by_status; end
  def to_s; end
  def total_tasks; end
  def url; end
  def workflow_sid; end
  def workspace_sid; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkflowContext::WorkflowRealTimeStatisticsList < ::Twilio::REST::ListResource
  def initialize(version, workspace_sid: T.unsafe(nil), workflow_sid: T.unsafe(nil)); end

  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkflowContext::WorkflowRealTimeStatisticsPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkflowContext::WorkflowStatisticsContext < ::Twilio::REST::InstanceContext
  def initialize(version, workspace_sid, workflow_sid); end

  def fetch(minutes: T.unsafe(nil), start_date: T.unsafe(nil), end_date: T.unsafe(nil), task_channel: T.unsafe(nil), split_by_wait_time: T.unsafe(nil)); end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkflowContext::WorkflowStatisticsInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, workspace_sid: T.unsafe(nil), workflow_sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def cumulative; end
  def fetch(minutes: T.unsafe(nil), start_date: T.unsafe(nil), end_date: T.unsafe(nil), task_channel: T.unsafe(nil), split_by_wait_time: T.unsafe(nil)); end
  def inspect; end
  def realtime; end
  def to_s; end
  def url; end
  def workflow_sid; end
  def workspace_sid; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkflowContext::WorkflowStatisticsList < ::Twilio::REST::ListResource
  def initialize(version, workspace_sid: T.unsafe(nil), workflow_sid: T.unsafe(nil)); end

  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkflowContext::WorkflowStatisticsPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkflowInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, workspace_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def assignment_callback_url; end
  def configuration; end
  def context; end
  def cumulative_statistics; end
  def date_created; end
  def date_updated; end
  def delete; end
  def document_content_type; end
  def fallback_assignment_callback_url; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def links; end
  def real_time_statistics; end
  def sid; end
  def statistics; end
  def task_reservation_timeout; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), assignment_callback_url: T.unsafe(nil), fallback_assignment_callback_url: T.unsafe(nil), configuration: T.unsafe(nil), task_reservation_timeout: T.unsafe(nil), re_evaluate_tasks: T.unsafe(nil)); end
  def url; end
  def workspace_sid; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkflowList < ::Twilio::REST::ListResource
  def initialize(version, workspace_sid: T.unsafe(nil)); end

  def create(friendly_name: T.unsafe(nil), configuration: T.unsafe(nil), assignment_callback_url: T.unsafe(nil), fallback_assignment_callback_url: T.unsafe(nil), task_reservation_timeout: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(friendly_name: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(friendly_name: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(friendly_name: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkflowPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkspaceCumulativeStatisticsContext < ::Twilio::REST::InstanceContext
  def initialize(version, workspace_sid); end

  def fetch(end_date: T.unsafe(nil), minutes: T.unsafe(nil), start_date: T.unsafe(nil), task_channel: T.unsafe(nil), split_by_wait_time: T.unsafe(nil)); end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkspaceCumulativeStatisticsInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, workspace_sid: T.unsafe(nil)); end

  def account_sid; end
  def avg_task_acceptance_time; end
  def context; end
  def end_time; end
  def fetch(end_date: T.unsafe(nil), minutes: T.unsafe(nil), start_date: T.unsafe(nil), task_channel: T.unsafe(nil), split_by_wait_time: T.unsafe(nil)); end
  def inspect; end
  def reservations_accepted; end
  def reservations_canceled; end
  def reservations_created; end
  def reservations_rejected; end
  def reservations_rescinded; end
  def reservations_timed_out; end
  def split_by_wait_time; end
  def start_time; end
  def tasks_canceled; end
  def tasks_completed; end
  def tasks_created; end
  def tasks_deleted; end
  def tasks_moved; end
  def tasks_timed_out_in_workflow; end
  def to_s; end
  def url; end
  def wait_duration_until_accepted; end
  def wait_duration_until_canceled; end
  def workspace_sid; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkspaceCumulativeStatisticsList < ::Twilio::REST::ListResource
  def initialize(version, workspace_sid: T.unsafe(nil)); end

  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkspaceCumulativeStatisticsPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkspaceRealTimeStatisticsContext < ::Twilio::REST::InstanceContext
  def initialize(version, workspace_sid); end

  def fetch(task_channel: T.unsafe(nil)); end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkspaceRealTimeStatisticsInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, workspace_sid: T.unsafe(nil)); end

  def account_sid; end
  def activity_statistics; end
  def context; end
  def fetch(task_channel: T.unsafe(nil)); end
  def inspect; end
  def longest_task_waiting_age; end
  def longest_task_waiting_sid; end
  def tasks_by_priority; end
  def tasks_by_status; end
  def to_s; end
  def total_tasks; end
  def total_workers; end
  def url; end
  def workspace_sid; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkspaceRealTimeStatisticsList < ::Twilio::REST::ListResource
  def initialize(version, workspace_sid: T.unsafe(nil)); end

  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkspaceRealTimeStatisticsPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkspaceStatisticsContext < ::Twilio::REST::InstanceContext
  def initialize(version, workspace_sid); end

  def fetch(minutes: T.unsafe(nil), start_date: T.unsafe(nil), end_date: T.unsafe(nil), task_channel: T.unsafe(nil), split_by_wait_time: T.unsafe(nil)); end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkspaceStatisticsInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, workspace_sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def cumulative; end
  def fetch(minutes: T.unsafe(nil), start_date: T.unsafe(nil), end_date: T.unsafe(nil), task_channel: T.unsafe(nil), split_by_wait_time: T.unsafe(nil)); end
  def inspect; end
  def realtime; end
  def to_s; end
  def url; end
  def workspace_sid; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkspaceStatisticsList < ::Twilio::REST::ListResource
  def initialize(version, workspace_sid: T.unsafe(nil)); end

  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkspaceStatisticsPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def activities; end
  def context; end
  def cumulative_statistics; end
  def date_created; end
  def date_updated; end
  def default_activity_name; end
  def default_activity_sid; end
  def delete; end
  def event_callback_url; end
  def events; end
  def events_filter; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def links; end
  def multi_task_enabled; end
  def prioritize_queue_order; end
  def real_time_statistics; end
  def sid; end
  def statistics; end
  def task_channels; end
  def task_queues; end
  def tasks; end
  def timeout_activity_name; end
  def timeout_activity_sid; end
  def to_s; end
  def update(default_activity_sid: T.unsafe(nil), event_callback_url: T.unsafe(nil), events_filter: T.unsafe(nil), friendly_name: T.unsafe(nil), multi_task_enabled: T.unsafe(nil), timeout_activity_sid: T.unsafe(nil), prioritize_queue_order: T.unsafe(nil)); end
  def url; end
  def workers; end
  def workflows; end
end

class Twilio::REST::Taskrouter::V1::WorkspaceList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(friendly_name: T.unsafe(nil), event_callback_url: T.unsafe(nil), events_filter: T.unsafe(nil), multi_task_enabled: T.unsafe(nil), template: T.unsafe(nil), prioritize_queue_order: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(friendly_name: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(friendly_name: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(friendly_name: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Taskrouter::V1::WorkspacePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Trunking < ::Twilio::REST::Domain
  def initialize(twilio); end

  def to_s; end
  def trunks(sid = T.unsafe(nil)); end
  def v1; end
end

class Twilio::REST::Trunking::V1 < ::Twilio::REST::Version
  def initialize(domain); end

  def to_s; end
  def trunks(sid = T.unsafe(nil)); end
end

class Twilio::REST::Trunking::V1::TrunkContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def credentials_lists(sid = T.unsafe(nil)); end
  def delete; end
  def fetch; end
  def inspect; end
  def ip_access_control_lists(sid = T.unsafe(nil)); end
  def origination_urls(sid = T.unsafe(nil)); end
  def phone_numbers(sid = T.unsafe(nil)); end
  def recordings; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), domain_name: T.unsafe(nil), disaster_recovery_url: T.unsafe(nil), disaster_recovery_method: T.unsafe(nil), transfer_mode: T.unsafe(nil), secure: T.unsafe(nil), cnam_lookup_enabled: T.unsafe(nil), transfer_caller_id: T.unsafe(nil)); end
end

class Twilio::REST::Trunking::V1::TrunkContext::CredentialListContext < ::Twilio::REST::InstanceContext
  def initialize(version, trunk_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Trunking::V1::TrunkContext::CredentialListInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, trunk_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def sid; end
  def to_s; end
  def trunk_sid; end
  def url; end
end

class Twilio::REST::Trunking::V1::TrunkContext::CredentialListList < ::Twilio::REST::ListResource
  def initialize(version, trunk_sid: T.unsafe(nil)); end

  def create(credential_list_sid: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Trunking::V1::TrunkContext::CredentialListPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Trunking::V1::TrunkContext::IpAccessControlListContext < ::Twilio::REST::InstanceContext
  def initialize(version, trunk_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Trunking::V1::TrunkContext::IpAccessControlListInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, trunk_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def sid; end
  def to_s; end
  def trunk_sid; end
  def url; end
end

class Twilio::REST::Trunking::V1::TrunkContext::IpAccessControlListList < ::Twilio::REST::ListResource
  def initialize(version, trunk_sid: T.unsafe(nil)); end

  def create(ip_access_control_list_sid: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Trunking::V1::TrunkContext::IpAccessControlListPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Trunking::V1::TrunkContext::OriginationUrlContext < ::Twilio::REST::InstanceContext
  def initialize(version, trunk_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(weight: T.unsafe(nil), priority: T.unsafe(nil), enabled: T.unsafe(nil), friendly_name: T.unsafe(nil), sip_url: T.unsafe(nil)); end
end

class Twilio::REST::Trunking::V1::TrunkContext::OriginationUrlInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, trunk_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def enabled; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def priority; end
  def sid; end
  def sip_url; end
  def to_s; end
  def trunk_sid; end
  def update(weight: T.unsafe(nil), priority: T.unsafe(nil), enabled: T.unsafe(nil), friendly_name: T.unsafe(nil), sip_url: T.unsafe(nil)); end
  def url; end
  def weight; end
end

class Twilio::REST::Trunking::V1::TrunkContext::OriginationUrlList < ::Twilio::REST::ListResource
  def initialize(version, trunk_sid: T.unsafe(nil)); end

  def create(weight: T.unsafe(nil), priority: T.unsafe(nil), enabled: T.unsafe(nil), friendly_name: T.unsafe(nil), sip_url: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Trunking::V1::TrunkContext::OriginationUrlPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Trunking::V1::TrunkContext::PhoneNumberContext < ::Twilio::REST::InstanceContext
  def initialize(version, trunk_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Trunking::V1::TrunkContext::PhoneNumberInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, trunk_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def address_requirements; end
  def api_version; end
  def beta; end
  def capabilities; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def links; end
  def phone_number; end
  def sid; end
  def sms_application_sid; end
  def sms_fallback_method; end
  def sms_fallback_url; end
  def sms_method; end
  def sms_url; end
  def status_callback; end
  def status_callback_method; end
  def to_s; end
  def trunk_sid; end
  def url; end
  def voice_application_sid; end
  def voice_caller_id_lookup; end
  def voice_fallback_method; end
  def voice_fallback_url; end
  def voice_method; end
  def voice_url; end
end

class Twilio::REST::Trunking::V1::TrunkContext::PhoneNumberList < ::Twilio::REST::ListResource
  def initialize(version, trunk_sid: T.unsafe(nil)); end

  def create(phone_number_sid: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Trunking::V1::TrunkContext::PhoneNumberPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Trunking::V1::TrunkContext::RecordingContext < ::Twilio::REST::InstanceContext
  def initialize(version, trunk_sid); end

  def fetch; end
  def inspect; end
  def to_s; end
  def update(mode: T.unsafe(nil), trim: T.unsafe(nil)); end
end

class Twilio::REST::Trunking::V1::TrunkContext::RecordingInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, trunk_sid: T.unsafe(nil)); end

  def context; end
  def fetch; end
  def inspect; end
  def mode; end
  def to_s; end
  def trim; end
  def update(mode: T.unsafe(nil), trim: T.unsafe(nil)); end
end

class Twilio::REST::Trunking::V1::TrunkContext::RecordingList < ::Twilio::REST::ListResource
  def initialize(version, trunk_sid: T.unsafe(nil)); end

  def to_s; end
end

class Twilio::REST::Trunking::V1::TrunkContext::RecordingPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Trunking::V1::TrunkInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def auth_type; end
  def auth_type_set; end
  def cnam_lookup_enabled; end
  def context; end
  def credentials_lists; end
  def date_created; end
  def date_updated; end
  def delete; end
  def disaster_recovery_method; end
  def disaster_recovery_url; end
  def domain_name; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def ip_access_control_lists; end
  def links; end
  def origination_urls; end
  def phone_numbers; end
  def recording; end
  def recordings; end
  def secure; end
  def sid; end
  def to_s; end
  def transfer_caller_id; end
  def transfer_mode; end
  def update(friendly_name: T.unsafe(nil), domain_name: T.unsafe(nil), disaster_recovery_url: T.unsafe(nil), disaster_recovery_method: T.unsafe(nil), transfer_mode: T.unsafe(nil), secure: T.unsafe(nil), cnam_lookup_enabled: T.unsafe(nil), transfer_caller_id: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Trunking::V1::TrunkList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(friendly_name: T.unsafe(nil), domain_name: T.unsafe(nil), disaster_recovery_url: T.unsafe(nil), disaster_recovery_method: T.unsafe(nil), transfer_mode: T.unsafe(nil), secure: T.unsafe(nil), cnam_lookup_enabled: T.unsafe(nil), transfer_caller_id: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Trunking::V1::TrunkPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::TrunkingClient < ::Twilio::REST::ObsoleteClient; end

class Twilio::REST::Trusthub < ::Twilio::REST::Domain
  def initialize(twilio); end

  def customer_profiles(sid = T.unsafe(nil)); end
  def end_user_types(sid = T.unsafe(nil)); end
  def end_users(sid = T.unsafe(nil)); end
  def policies(sid = T.unsafe(nil)); end
  def supporting_document_types(sid = T.unsafe(nil)); end
  def supporting_documents(sid = T.unsafe(nil)); end
  def to_s; end
  def trust_products(sid = T.unsafe(nil)); end
  def v1; end
end

class Twilio::REST::Trusthub::V1 < ::Twilio::REST::Version
  def initialize(domain); end

  def customer_profiles(sid = T.unsafe(nil)); end
  def end_user_types(sid = T.unsafe(nil)); end
  def end_users(sid = T.unsafe(nil)); end
  def policies(sid = T.unsafe(nil)); end
  def supporting_document_types(sid = T.unsafe(nil)); end
  def supporting_documents(sid = T.unsafe(nil)); end
  def to_s; end
  def trust_products(sid = T.unsafe(nil)); end
end

class Twilio::REST::Trusthub::V1::CustomerProfilesContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def customer_profiles_channel_endpoint_assignment(sid = T.unsafe(nil)); end
  def customer_profiles_entity_assignments(sid = T.unsafe(nil)); end
  def customer_profiles_evaluations(sid = T.unsafe(nil)); end
  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(status: T.unsafe(nil), status_callback: T.unsafe(nil), friendly_name: T.unsafe(nil), email: T.unsafe(nil)); end
end

class Twilio::REST::Trusthub::V1::CustomerProfilesContext::CustomerProfilesChannelEndpointAssignmentContext < ::Twilio::REST::InstanceContext
  def initialize(version, customer_profile_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Trusthub::V1::CustomerProfilesContext::CustomerProfilesChannelEndpointAssignmentInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, customer_profile_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def channel_endpoint_sid; end
  def channel_endpoint_type; end
  def context; end
  def customer_profile_sid; end
  def date_created; end
  def delete; end
  def fetch; end
  def inspect; end
  def sid; end
  def to_s; end
  def url; end
end

class Twilio::REST::Trusthub::V1::CustomerProfilesContext::CustomerProfilesChannelEndpointAssignmentList < ::Twilio::REST::ListResource
  def initialize(version, customer_profile_sid: T.unsafe(nil)); end

  def create(channel_endpoint_type: T.unsafe(nil), channel_endpoint_sid: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(channel_endpoint_sid: T.unsafe(nil), channel_endpoint_sids: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(channel_endpoint_sid: T.unsafe(nil), channel_endpoint_sids: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(channel_endpoint_sid: T.unsafe(nil), channel_endpoint_sids: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Trusthub::V1::CustomerProfilesContext::CustomerProfilesChannelEndpointAssignmentPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Trusthub::V1::CustomerProfilesContext::CustomerProfilesEntityAssignmentsContext < ::Twilio::REST::InstanceContext
  def initialize(version, customer_profile_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Trusthub::V1::CustomerProfilesContext::CustomerProfilesEntityAssignmentsInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, customer_profile_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def customer_profile_sid; end
  def date_created; end
  def delete; end
  def fetch; end
  def inspect; end
  def object_sid; end
  def sid; end
  def to_s; end
  def url; end
end

class Twilio::REST::Trusthub::V1::CustomerProfilesContext::CustomerProfilesEntityAssignmentsList < ::Twilio::REST::ListResource
  def initialize(version, customer_profile_sid: T.unsafe(nil)); end

  def create(object_sid: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Trusthub::V1::CustomerProfilesContext::CustomerProfilesEntityAssignmentsPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Trusthub::V1::CustomerProfilesContext::CustomerProfilesEvaluationsContext < ::Twilio::REST::InstanceContext
  def initialize(version, customer_profile_sid, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Trusthub::V1::CustomerProfilesContext::CustomerProfilesEvaluationsInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, customer_profile_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def customer_profile_sid; end
  def date_created; end
  def fetch; end
  def inspect; end
  def policy_sid; end
  def results; end
  def sid; end
  def status; end
  def to_s; end
  def url; end
end

class Twilio::REST::Trusthub::V1::CustomerProfilesContext::CustomerProfilesEvaluationsList < ::Twilio::REST::ListResource
  def initialize(version, customer_profile_sid: T.unsafe(nil)); end

  def create(policy_sid: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Trusthub::V1::CustomerProfilesContext::CustomerProfilesEvaluationsPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Trusthub::V1::CustomerProfilesInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def customer_profiles_channel_endpoint_assignment; end
  def customer_profiles_entity_assignments; end
  def customer_profiles_evaluations; end
  def date_created; end
  def date_updated; end
  def delete; end
  def email; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def links; end
  def policy_sid; end
  def sid; end
  def status; end
  def status_callback; end
  def to_s; end
  def update(status: T.unsafe(nil), status_callback: T.unsafe(nil), friendly_name: T.unsafe(nil), email: T.unsafe(nil)); end
  def url; end
  def valid_until; end
end

class Twilio::REST::Trusthub::V1::CustomerProfilesList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(friendly_name: T.unsafe(nil), email: T.unsafe(nil), policy_sid: T.unsafe(nil), status_callback: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(status: T.unsafe(nil), friendly_name: T.unsafe(nil), policy_sid: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(status: T.unsafe(nil), friendly_name: T.unsafe(nil), policy_sid: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(status: T.unsafe(nil), friendly_name: T.unsafe(nil), policy_sid: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Trusthub::V1::CustomerProfilesPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Trusthub::V1::EndUserContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), attributes: T.unsafe(nil)); end
end

class Twilio::REST::Trusthub::V1::EndUserInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def attributes; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def sid; end
  def to_s; end
  def type; end
  def update(friendly_name: T.unsafe(nil), attributes: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Trusthub::V1::EndUserList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(friendly_name: T.unsafe(nil), type: T.unsafe(nil), attributes: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Trusthub::V1::EndUserPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Trusthub::V1::EndUserTypeContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Trusthub::V1::EndUserTypeInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def context; end
  def fetch; end
  def fields; end
  def friendly_name; end
  def inspect; end
  def machine_name; end
  def sid; end
  def to_s; end
  def url; end
end

class Twilio::REST::Trusthub::V1::EndUserTypeList < ::Twilio::REST::ListResource
  def initialize(version); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Trusthub::V1::EndUserTypePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Trusthub::V1::PoliciesContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Trusthub::V1::PoliciesInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def context; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def requirements; end
  def sid; end
  def to_s; end
  def url; end
end

class Twilio::REST::Trusthub::V1::PoliciesList < ::Twilio::REST::ListResource
  def initialize(version); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Trusthub::V1::PoliciesPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Trusthub::V1::SupportingDocumentContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), attributes: T.unsafe(nil)); end
end

class Twilio::REST::Trusthub::V1::SupportingDocumentInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def attributes; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def mime_type; end
  def sid; end
  def status; end
  def to_s; end
  def type; end
  def update(friendly_name: T.unsafe(nil), attributes: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Trusthub::V1::SupportingDocumentList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(friendly_name: T.unsafe(nil), type: T.unsafe(nil), attributes: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Trusthub::V1::SupportingDocumentPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Trusthub::V1::SupportingDocumentTypeContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Trusthub::V1::SupportingDocumentTypeInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def context; end
  def fetch; end
  def fields; end
  def friendly_name; end
  def inspect; end
  def machine_name; end
  def sid; end
  def to_s; end
  def url; end
end

class Twilio::REST::Trusthub::V1::SupportingDocumentTypeList < ::Twilio::REST::ListResource
  def initialize(version); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Trusthub::V1::SupportingDocumentTypePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Trusthub::V1::TrustProductsContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def trust_products_channel_endpoint_assignment(sid = T.unsafe(nil)); end
  def trust_products_entity_assignments(sid = T.unsafe(nil)); end
  def trust_products_evaluations(sid = T.unsafe(nil)); end
  def update(status: T.unsafe(nil), status_callback: T.unsafe(nil), friendly_name: T.unsafe(nil), email: T.unsafe(nil)); end
end

class Twilio::REST::Trusthub::V1::TrustProductsContext::TrustProductsChannelEndpointAssignmentContext < ::Twilio::REST::InstanceContext
  def initialize(version, trust_product_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Trusthub::V1::TrustProductsContext::TrustProductsChannelEndpointAssignmentInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, trust_product_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def channel_endpoint_sid; end
  def channel_endpoint_type; end
  def context; end
  def date_created; end
  def delete; end
  def fetch; end
  def inspect; end
  def sid; end
  def to_s; end
  def trust_product_sid; end
  def url; end
end

class Twilio::REST::Trusthub::V1::TrustProductsContext::TrustProductsChannelEndpointAssignmentList < ::Twilio::REST::ListResource
  def initialize(version, trust_product_sid: T.unsafe(nil)); end

  def create(channel_endpoint_type: T.unsafe(nil), channel_endpoint_sid: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(channel_endpoint_sid: T.unsafe(nil), channel_endpoint_sids: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(channel_endpoint_sid: T.unsafe(nil), channel_endpoint_sids: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(channel_endpoint_sid: T.unsafe(nil), channel_endpoint_sids: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Trusthub::V1::TrustProductsContext::TrustProductsChannelEndpointAssignmentPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Trusthub::V1::TrustProductsContext::TrustProductsEntityAssignmentsContext < ::Twilio::REST::InstanceContext
  def initialize(version, trust_product_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Trusthub::V1::TrustProductsContext::TrustProductsEntityAssignmentsInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, trust_product_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def delete; end
  def fetch; end
  def inspect; end
  def object_sid; end
  def sid; end
  def to_s; end
  def trust_product_sid; end
  def url; end
end

class Twilio::REST::Trusthub::V1::TrustProductsContext::TrustProductsEntityAssignmentsList < ::Twilio::REST::ListResource
  def initialize(version, trust_product_sid: T.unsafe(nil)); end

  def create(object_sid: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Trusthub::V1::TrustProductsContext::TrustProductsEntityAssignmentsPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Trusthub::V1::TrustProductsContext::TrustProductsEvaluationsContext < ::Twilio::REST::InstanceContext
  def initialize(version, trust_product_sid, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Trusthub::V1::TrustProductsContext::TrustProductsEvaluationsInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, trust_product_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def fetch; end
  def inspect; end
  def policy_sid; end
  def results; end
  def sid; end
  def status; end
  def to_s; end
  def trust_product_sid; end
  def url; end
end

class Twilio::REST::Trusthub::V1::TrustProductsContext::TrustProductsEvaluationsList < ::Twilio::REST::ListResource
  def initialize(version, trust_product_sid: T.unsafe(nil)); end

  def create(policy_sid: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Trusthub::V1::TrustProductsContext::TrustProductsEvaluationsPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Trusthub::V1::TrustProductsInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def email; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def links; end
  def policy_sid; end
  def sid; end
  def status; end
  def status_callback; end
  def to_s; end
  def trust_products_channel_endpoint_assignment; end
  def trust_products_entity_assignments; end
  def trust_products_evaluations; end
  def update(status: T.unsafe(nil), status_callback: T.unsafe(nil), friendly_name: T.unsafe(nil), email: T.unsafe(nil)); end
  def url; end
  def valid_until; end
end

class Twilio::REST::Trusthub::V1::TrustProductsList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(friendly_name: T.unsafe(nil), email: T.unsafe(nil), policy_sid: T.unsafe(nil), status_callback: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(status: T.unsafe(nil), friendly_name: T.unsafe(nil), policy_sid: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(status: T.unsafe(nil), friendly_name: T.unsafe(nil), policy_sid: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(status: T.unsafe(nil), friendly_name: T.unsafe(nil), policy_sid: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Trusthub::V1::TrustProductsPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::TwilioError < ::StandardError
  def body; end
end

class Twilio::REST::Verify < ::Twilio::REST::Domain
  def initialize(twilio); end

  def forms(form_type = T.unsafe(nil)); end
  def safelist(phone_number = T.unsafe(nil)); end
  def services(sid = T.unsafe(nil)); end
  def templates; end
  def to_s; end
  def v2; end
  def verification_attempts(sid = T.unsafe(nil)); end
  def verification_attempts_summary; end
end

class Twilio::REST::Verify::V2 < ::Twilio::REST::Version
  def initialize(domain); end

  def forms(form_type = T.unsafe(nil)); end
  def safelist(phone_number = T.unsafe(nil)); end
  def services(sid = T.unsafe(nil)); end
  def templates; end
  def to_s; end
  def verification_attempts(sid = T.unsafe(nil)); end
  def verification_attempts_summary; end
end

class Twilio::REST::Verify::V2::FormContext < ::Twilio::REST::InstanceContext
  def initialize(version, form_type); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Verify::V2::FormInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, form_type: T.unsafe(nil)); end

  def context; end
  def fetch; end
  def form_meta; end
  def form_type; end
  def forms; end
  def inspect; end
  def to_s; end
  def url; end
end

class Twilio::REST::Verify::V2::FormList < ::Twilio::REST::ListResource
  def initialize(version); end

  def to_s; end
end

class Twilio::REST::Verify::V2::FormPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Verify::V2::SafelistContext < ::Twilio::REST::InstanceContext
  def initialize(version, phone_number); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Verify::V2::SafelistInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, phone_number: T.unsafe(nil)); end

  def context; end
  def delete; end
  def fetch; end
  def inspect; end
  def phone_number; end
  def sid; end
  def to_s; end
  def url; end
end

class Twilio::REST::Verify::V2::SafelistList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(phone_number: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Verify::V2::SafelistPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Verify::V2::ServiceContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def access_tokens(sid = T.unsafe(nil)); end
  def delete; end
  def entities(identity = T.unsafe(nil)); end
  def fetch; end
  def inspect; end
  def messaging_configurations(country = T.unsafe(nil)); end
  def rate_limits(sid = T.unsafe(nil)); end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), code_length: T.unsafe(nil), lookup_enabled: T.unsafe(nil), skip_sms_to_landlines: T.unsafe(nil), dtmf_input_required: T.unsafe(nil), tts_name: T.unsafe(nil), psd2_enabled: T.unsafe(nil), do_not_share_warning_enabled: T.unsafe(nil), custom_code_enabled: T.unsafe(nil), push_include_date: T.unsafe(nil), push_apn_credential_sid: T.unsafe(nil), push_fcm_credential_sid: T.unsafe(nil), totp_issuer: T.unsafe(nil), totp_time_step: T.unsafe(nil), totp_code_length: T.unsafe(nil), totp_skew: T.unsafe(nil), default_template_sid: T.unsafe(nil)); end
  def verification_checks; end
  def verifications(sid = T.unsafe(nil)); end
  def webhooks(sid = T.unsafe(nil)); end
end

class Twilio::REST::Verify::V2::ServiceContext::AccessTokenContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Verify::V2::ServiceContext::AccessTokenInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def entity_identity; end
  def factor_friendly_name; end
  def factor_type; end
  def fetch; end
  def inspect; end
  def service_sid; end
  def sid; end
  def to_s; end
  def token; end
  def ttl; end
  def url; end
end

class Twilio::REST::Verify::V2::ServiceContext::AccessTokenList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil)); end

  def create(identity: T.unsafe(nil), factor_type: T.unsafe(nil), factor_friendly_name: T.unsafe(nil), ttl: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Verify::V2::ServiceContext::AccessTokenPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Verify::V2::ServiceContext::EntityContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, identity); end

  def challenges(sid = T.unsafe(nil)); end
  def delete; end
  def factors(sid = T.unsafe(nil)); end
  def fetch; end
  def inspect; end
  def new_factors; end
  def to_s; end
end

class Twilio::REST::Verify::V2::ServiceContext::EntityContext::ChallengeContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, identity, sid); end

  def fetch; end
  def inspect; end
  def notifications; end
  def to_s; end
  def update(auth_payload: T.unsafe(nil), metadata: T.unsafe(nil)); end
end

class Twilio::REST::Verify::V2::ServiceContext::EntityContext::ChallengeContext::NotificationInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), identity: T.unsafe(nil), challenge_sid: T.unsafe(nil)); end

  def account_sid; end
  def challenge_sid; end
  def date_created; end
  def entity_sid; end
  def identity; end
  def inspect; end
  def priority; end
  def service_sid; end
  def sid; end
  def to_s; end
  def ttl; end
end

class Twilio::REST::Verify::V2::ServiceContext::EntityContext::ChallengeContext::NotificationList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil), identity: T.unsafe(nil), challenge_sid: T.unsafe(nil)); end

  def create(ttl: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Verify::V2::ServiceContext::EntityContext::ChallengeContext::NotificationPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Verify::V2::ServiceContext::EntityContext::ChallengeInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), identity: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_responded; end
  def date_updated; end
  def details; end
  def entity_sid; end
  def expiration_date; end
  def factor_sid; end
  def factor_type; end
  def fetch; end
  def hidden_details; end
  def identity; end
  def inspect; end
  def links; end
  def metadata; end
  def notifications; end
  def responded_reason; end
  def service_sid; end
  def sid; end
  def status; end
  def to_s; end
  def update(auth_payload: T.unsafe(nil), metadata: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Verify::V2::ServiceContext::EntityContext::ChallengeList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil), identity: T.unsafe(nil)); end

  def create(factor_sid: T.unsafe(nil), expiration_date: T.unsafe(nil), details_message: T.unsafe(nil), details_fields: T.unsafe(nil), hidden_details: T.unsafe(nil), auth_payload: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(factor_sid: T.unsafe(nil), status: T.unsafe(nil), order: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(factor_sid: T.unsafe(nil), status: T.unsafe(nil), order: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(factor_sid: T.unsafe(nil), status: T.unsafe(nil), order: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Verify::V2::ServiceContext::EntityContext::ChallengePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Verify::V2::ServiceContext::EntityContext::FactorContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, identity, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(auth_payload: T.unsafe(nil), friendly_name: T.unsafe(nil), config_notification_token: T.unsafe(nil), config_sdk_version: T.unsafe(nil), config_time_step: T.unsafe(nil), config_skew: T.unsafe(nil), config_code_length: T.unsafe(nil), config_alg: T.unsafe(nil), config_notification_platform: T.unsafe(nil)); end
end

class Twilio::REST::Verify::V2::ServiceContext::EntityContext::FactorInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), identity: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def config; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def entity_sid; end
  def factor_type; end
  def fetch; end
  def friendly_name; end
  def identity; end
  def inspect; end
  def metadata; end
  def service_sid; end
  def sid; end
  def status; end
  def to_s; end
  def update(auth_payload: T.unsafe(nil), friendly_name: T.unsafe(nil), config_notification_token: T.unsafe(nil), config_sdk_version: T.unsafe(nil), config_time_step: T.unsafe(nil), config_skew: T.unsafe(nil), config_code_length: T.unsafe(nil), config_alg: T.unsafe(nil), config_notification_platform: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Verify::V2::ServiceContext::EntityContext::FactorList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil), identity: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Verify::V2::ServiceContext::EntityContext::FactorPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Verify::V2::ServiceContext::EntityContext::NewFactorInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), identity: T.unsafe(nil)); end

  def account_sid; end
  def binding; end
  def config; end
  def date_created; end
  def date_updated; end
  def entity_sid; end
  def factor_type; end
  def friendly_name; end
  def identity; end
  def inspect; end
  def metadata; end
  def service_sid; end
  def sid; end
  def status; end
  def to_s; end
  def url; end
end

class Twilio::REST::Verify::V2::ServiceContext::EntityContext::NewFactorList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil), identity: T.unsafe(nil)); end

  def create(friendly_name: T.unsafe(nil), factor_type: T.unsafe(nil), binding_alg: T.unsafe(nil), binding_public_key: T.unsafe(nil), config_app_id: T.unsafe(nil), config_notification_platform: T.unsafe(nil), config_notification_token: T.unsafe(nil), config_sdk_version: T.unsafe(nil), binding_secret: T.unsafe(nil), config_time_step: T.unsafe(nil), config_skew: T.unsafe(nil), config_code_length: T.unsafe(nil), config_alg: T.unsafe(nil), metadata: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Verify::V2::ServiceContext::EntityContext::NewFactorPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Verify::V2::ServiceContext::EntityInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), identity: T.unsafe(nil)); end

  def account_sid; end
  def challenges; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def factors; end
  def fetch; end
  def identity; end
  def inspect; end
  def links; end
  def new_factors; end
  def service_sid; end
  def sid; end
  def to_s; end
  def url; end
end

class Twilio::REST::Verify::V2::ServiceContext::EntityList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil)); end

  def create(identity: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Verify::V2::ServiceContext::EntityPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Verify::V2::ServiceContext::MessagingConfigurationContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, country); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(messaging_service_sid: T.unsafe(nil)); end
end

class Twilio::REST::Verify::V2::ServiceContext::MessagingConfigurationInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), country: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def country; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def inspect; end
  def messaging_service_sid; end
  def service_sid; end
  def to_s; end
  def update(messaging_service_sid: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Verify::V2::ServiceContext::MessagingConfigurationList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil)); end

  def create(country: T.unsafe(nil), messaging_service_sid: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Verify::V2::ServiceContext::MessagingConfigurationPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Verify::V2::ServiceContext::RateLimitContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, sid); end

  def buckets(sid = T.unsafe(nil)); end
  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(description: T.unsafe(nil)); end
end

class Twilio::REST::Verify::V2::ServiceContext::RateLimitContext::BucketContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, rate_limit_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(max: T.unsafe(nil), interval: T.unsafe(nil)); end
end

class Twilio::REST::Verify::V2::ServiceContext::RateLimitContext::BucketInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), rate_limit_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def inspect; end
  def interval; end
  def max; end
  def rate_limit_sid; end
  def service_sid; end
  def sid; end
  def to_s; end
  def update(max: T.unsafe(nil), interval: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Verify::V2::ServiceContext::RateLimitContext::BucketList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil), rate_limit_sid: T.unsafe(nil)); end

  def create(max: T.unsafe(nil), interval: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Verify::V2::ServiceContext::RateLimitContext::BucketPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Verify::V2::ServiceContext::RateLimitInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def buckets; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def description; end
  def fetch; end
  def inspect; end
  def links; end
  def service_sid; end
  def sid; end
  def to_s; end
  def unique_name; end
  def update(description: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Verify::V2::ServiceContext::RateLimitList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil)); end

  def create(unique_name: T.unsafe(nil), description: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Verify::V2::ServiceContext::RateLimitPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Verify::V2::ServiceContext::VerificationCheckInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil)); end

  def account_sid; end
  def amount; end
  def channel; end
  def date_created; end
  def date_updated; end
  def inspect; end
  def payee; end
  def service_sid; end
  def sid; end
  def sna_attempts_error_codes; end
  def status; end
  def to; end
  def to_s; end
  def valid; end
end

class Twilio::REST::Verify::V2::ServiceContext::VerificationCheckList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil)); end

  def create(code: T.unsafe(nil), to: T.unsafe(nil), verification_sid: T.unsafe(nil), amount: T.unsafe(nil), payee: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Verify::V2::ServiceContext::VerificationCheckPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Verify::V2::ServiceContext::VerificationContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
  def update(status: T.unsafe(nil)); end
end

class Twilio::REST::Verify::V2::ServiceContext::VerificationInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def amount; end
  def channel; end
  def context; end
  def date_created; end
  def date_updated; end
  def fetch; end
  def inspect; end
  def lookup; end
  def payee; end
  def send_code_attempts; end
  def service_sid; end
  def sid; end
  def sna; end
  def status; end
  def to; end
  def to_s; end
  def update(status: T.unsafe(nil)); end
  def url; end
  def valid; end
end

class Twilio::REST::Verify::V2::ServiceContext::VerificationList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil)); end

  def create(to: T.unsafe(nil), channel: T.unsafe(nil), custom_friendly_name: T.unsafe(nil), custom_message: T.unsafe(nil), send_digits: T.unsafe(nil), locale: T.unsafe(nil), custom_code: T.unsafe(nil), amount: T.unsafe(nil), payee: T.unsafe(nil), rate_limits: T.unsafe(nil), channel_configuration: T.unsafe(nil), app_hash: T.unsafe(nil), template_sid: T.unsafe(nil), template_custom_substitutions: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Verify::V2::ServiceContext::VerificationPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Verify::V2::ServiceContext::WebhookContext < ::Twilio::REST::InstanceContext
  def initialize(version, service_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), event_types: T.unsafe(nil), webhook_url: T.unsafe(nil), status: T.unsafe(nil), version: T.unsafe(nil)); end
end

class Twilio::REST::Verify::V2::ServiceContext::WebhookInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, service_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def event_types; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def service_sid; end
  def sid; end
  def status; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), event_types: T.unsafe(nil), webhook_url: T.unsafe(nil), status: T.unsafe(nil), version: T.unsafe(nil)); end
  def url; end
  def version; end
  def webhook_method; end
  def webhook_url; end
end

class Twilio::REST::Verify::V2::ServiceContext::WebhookList < ::Twilio::REST::ListResource
  def initialize(version, service_sid: T.unsafe(nil)); end

  def create(friendly_name: T.unsafe(nil), event_types: T.unsafe(nil), webhook_url: T.unsafe(nil), status: T.unsafe(nil), version: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Verify::V2::ServiceContext::WebhookPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Verify::V2::ServiceInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def access_tokens; end
  def account_sid; end
  def code_length; end
  def context; end
  def custom_code_enabled; end
  def date_created; end
  def date_updated; end
  def default_template_sid; end
  def delete; end
  def do_not_share_warning_enabled; end
  def dtmf_input_required; end
  def entities; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def links; end
  def lookup_enabled; end
  def messaging_configurations; end
  def psd2_enabled; end
  def push; end
  def rate_limits; end
  def sid; end
  def skip_sms_to_landlines; end
  def to_s; end
  def totp; end
  def tts_name; end
  def update(friendly_name: T.unsafe(nil), code_length: T.unsafe(nil), lookup_enabled: T.unsafe(nil), skip_sms_to_landlines: T.unsafe(nil), dtmf_input_required: T.unsafe(nil), tts_name: T.unsafe(nil), psd2_enabled: T.unsafe(nil), do_not_share_warning_enabled: T.unsafe(nil), custom_code_enabled: T.unsafe(nil), push_include_date: T.unsafe(nil), push_apn_credential_sid: T.unsafe(nil), push_fcm_credential_sid: T.unsafe(nil), totp_issuer: T.unsafe(nil), totp_time_step: T.unsafe(nil), totp_code_length: T.unsafe(nil), totp_skew: T.unsafe(nil), default_template_sid: T.unsafe(nil)); end
  def url; end
  def verification_checks; end
  def verifications; end
  def webhooks; end
end

class Twilio::REST::Verify::V2::ServiceList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(friendly_name: T.unsafe(nil), code_length: T.unsafe(nil), lookup_enabled: T.unsafe(nil), skip_sms_to_landlines: T.unsafe(nil), dtmf_input_required: T.unsafe(nil), tts_name: T.unsafe(nil), psd2_enabled: T.unsafe(nil), do_not_share_warning_enabled: T.unsafe(nil), custom_code_enabled: T.unsafe(nil), push_include_date: T.unsafe(nil), push_apn_credential_sid: T.unsafe(nil), push_fcm_credential_sid: T.unsafe(nil), totp_issuer: T.unsafe(nil), totp_time_step: T.unsafe(nil), totp_code_length: T.unsafe(nil), totp_skew: T.unsafe(nil), default_template_sid: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Verify::V2::ServicePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Verify::V2::TemplateInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload); end

  def account_sid; end
  def channels; end
  def friendly_name; end
  def inspect; end
  def sid; end
  def to_s; end
  def translations; end
end

class Twilio::REST::Verify::V2::TemplateList < ::Twilio::REST::ListResource
  def initialize(version); end

  def each; end
  def get_page(target_url); end
  def list(friendly_name: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(friendly_name: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(friendly_name: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Verify::V2::TemplatePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Verify::V2::VerificationAttemptContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Verify::V2::VerificationAttemptInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def channel; end
  def channel_data; end
  def context; end
  def conversion_status; end
  def date_created; end
  def date_updated; end
  def fetch; end
  def inspect; end
  def price; end
  def service_sid; end
  def sid; end
  def to_s; end
  def url; end
  def verification_sid; end
end

class Twilio::REST::Verify::V2::VerificationAttemptList < ::Twilio::REST::ListResource
  def initialize(version); end

  def each; end
  def get_page(target_url); end
  def list(date_created_after: T.unsafe(nil), date_created_before: T.unsafe(nil), channel_data_to: T.unsafe(nil), country: T.unsafe(nil), channel: T.unsafe(nil), verify_service_sid: T.unsafe(nil), verification_sid: T.unsafe(nil), status: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(date_created_after: T.unsafe(nil), date_created_before: T.unsafe(nil), channel_data_to: T.unsafe(nil), country: T.unsafe(nil), channel: T.unsafe(nil), verify_service_sid: T.unsafe(nil), verification_sid: T.unsafe(nil), status: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(date_created_after: T.unsafe(nil), date_created_before: T.unsafe(nil), channel_data_to: T.unsafe(nil), country: T.unsafe(nil), channel: T.unsafe(nil), verify_service_sid: T.unsafe(nil), verification_sid: T.unsafe(nil), status: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Verify::V2::VerificationAttemptPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Verify::V2::VerificationAttemptsSummaryContext < ::Twilio::REST::InstanceContext
  def initialize(version); end

  def fetch(verify_service_sid: T.unsafe(nil), date_created_after: T.unsafe(nil), date_created_before: T.unsafe(nil), country: T.unsafe(nil), channel: T.unsafe(nil), destination_prefix: T.unsafe(nil)); end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Verify::V2::VerificationAttemptsSummaryInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload); end

  def context; end
  def conversion_rate_percentage; end
  def fetch(verify_service_sid: T.unsafe(nil), date_created_after: T.unsafe(nil), date_created_before: T.unsafe(nil), country: T.unsafe(nil), channel: T.unsafe(nil), destination_prefix: T.unsafe(nil)); end
  def inspect; end
  def to_s; end
  def total_attempts; end
  def total_converted; end
  def total_unconverted; end
  def url; end
end

class Twilio::REST::Verify::V2::VerificationAttemptsSummaryList < ::Twilio::REST::ListResource
  def initialize(version); end

  def to_s; end
end

class Twilio::REST::Verify::V2::VerificationAttemptsSummaryPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Version
  def initialize(domain); end

  def absolute_url(uri); end
  def create(method, uri, params: T.unsafe(nil), data: T.unsafe(nil), headers: T.unsafe(nil), auth: T.unsafe(nil), timeout: T.unsafe(nil)); end
  def delete(method, uri, params: T.unsafe(nil), data: T.unsafe(nil), headers: T.unsafe(nil), auth: T.unsafe(nil), timeout: T.unsafe(nil)); end
  def domain; end
  def domain=(_arg0); end
  def exception(response, header); end
  def fetch(method, uri, params: T.unsafe(nil), data: T.unsafe(nil), headers: T.unsafe(nil), auth: T.unsafe(nil), timeout: T.unsafe(nil)); end
  def page(method, uri, params: T.unsafe(nil), data: T.unsafe(nil), headers: T.unsafe(nil), auth: T.unsafe(nil), timeout: T.unsafe(nil)); end
  def read_limits(limit = T.unsafe(nil), page_size = T.unsafe(nil)); end
  def relative_uri(uri); end
  def request(method, uri, params = T.unsafe(nil), data = T.unsafe(nil), headers = T.unsafe(nil), auth = T.unsafe(nil), timeout = T.unsafe(nil)); end
  def stream(page, limit: T.unsafe(nil), page_limit: T.unsafe(nil)); end
  def update(method, uri, params: T.unsafe(nil), data: T.unsafe(nil), headers: T.unsafe(nil), auth: T.unsafe(nil), timeout: T.unsafe(nil)); end
end

class Twilio::REST::Version::RecordStream
  include ::Enumerable

  def initialize(page, limit: T.unsafe(nil), page_limit: T.unsafe(nil)); end

  def each; end
end

class Twilio::REST::Video < ::Twilio::REST::Domain
  def initialize(twilio); end

  def composition_hooks(sid = T.unsafe(nil)); end
  def composition_settings; end
  def compositions(sid = T.unsafe(nil)); end
  def recording_settings; end
  def recordings(sid = T.unsafe(nil)); end
  def rooms(sid = T.unsafe(nil)); end
  def to_s; end
  def v1; end
end

class Twilio::REST::Video::V1 < ::Twilio::REST::Version
  def initialize(domain); end

  def composition_hooks(sid = T.unsafe(nil)); end
  def composition_settings; end
  def compositions(sid = T.unsafe(nil)); end
  def recording_settings; end
  def recordings(sid = T.unsafe(nil)); end
  def rooms(sid = T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Video::V1::CompositionContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Video::V1::CompositionHookContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), enabled: T.unsafe(nil), video_layout: T.unsafe(nil), audio_sources: T.unsafe(nil), audio_sources_excluded: T.unsafe(nil), trim: T.unsafe(nil), format: T.unsafe(nil), resolution: T.unsafe(nil), status_callback: T.unsafe(nil), status_callback_method: T.unsafe(nil)); end
end

class Twilio::REST::Video::V1::CompositionHookInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def audio_sources; end
  def audio_sources_excluded; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def enabled; end
  def fetch; end
  def format; end
  def friendly_name; end
  def inspect; end
  def resolution; end
  def sid; end
  def status_callback; end
  def status_callback_method; end
  def to_s; end
  def trim; end
  def update(friendly_name: T.unsafe(nil), enabled: T.unsafe(nil), video_layout: T.unsafe(nil), audio_sources: T.unsafe(nil), audio_sources_excluded: T.unsafe(nil), trim: T.unsafe(nil), format: T.unsafe(nil), resolution: T.unsafe(nil), status_callback: T.unsafe(nil), status_callback_method: T.unsafe(nil)); end
  def url; end
  def video_layout; end
end

class Twilio::REST::Video::V1::CompositionHookList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(friendly_name: T.unsafe(nil), enabled: T.unsafe(nil), video_layout: T.unsafe(nil), audio_sources: T.unsafe(nil), audio_sources_excluded: T.unsafe(nil), resolution: T.unsafe(nil), format: T.unsafe(nil), status_callback: T.unsafe(nil), status_callback_method: T.unsafe(nil), trim: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(enabled: T.unsafe(nil), date_created_after: T.unsafe(nil), date_created_before: T.unsafe(nil), friendly_name: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(enabled: T.unsafe(nil), date_created_after: T.unsafe(nil), date_created_before: T.unsafe(nil), friendly_name: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(enabled: T.unsafe(nil), date_created_after: T.unsafe(nil), date_created_before: T.unsafe(nil), friendly_name: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Video::V1::CompositionHookPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Video::V1::CompositionInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def audio_sources; end
  def audio_sources_excluded; end
  def bitrate; end
  def context; end
  def date_completed; end
  def date_created; end
  def date_deleted; end
  def delete; end
  def duration; end
  def fetch; end
  def format; end
  def inspect; end
  def links; end
  def media_external_location; end
  def resolution; end
  def room_sid; end
  def sid; end
  def size; end
  def status; end
  def status_callback; end
  def status_callback_method; end
  def to_s; end
  def trim; end
  def url; end
  def video_layout; end
end

class Twilio::REST::Video::V1::CompositionList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(room_sid: T.unsafe(nil), video_layout: T.unsafe(nil), audio_sources: T.unsafe(nil), audio_sources_excluded: T.unsafe(nil), resolution: T.unsafe(nil), format: T.unsafe(nil), status_callback: T.unsafe(nil), status_callback_method: T.unsafe(nil), trim: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(status: T.unsafe(nil), date_created_after: T.unsafe(nil), date_created_before: T.unsafe(nil), room_sid: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(status: T.unsafe(nil), date_created_after: T.unsafe(nil), date_created_before: T.unsafe(nil), room_sid: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(status: T.unsafe(nil), date_created_after: T.unsafe(nil), date_created_before: T.unsafe(nil), room_sid: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Video::V1::CompositionPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Video::V1::CompositionSettingsContext < ::Twilio::REST::InstanceContext
  def initialize(version); end

  def create(friendly_name: T.unsafe(nil), aws_credentials_sid: T.unsafe(nil), encryption_key_sid: T.unsafe(nil), aws_s3_url: T.unsafe(nil), aws_storage_enabled: T.unsafe(nil), encryption_enabled: T.unsafe(nil)); end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Video::V1::CompositionSettingsInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload); end

  def account_sid; end
  def aws_credentials_sid; end
  def aws_s3_url; end
  def aws_storage_enabled; end
  def context; end
  def create(friendly_name: T.unsafe(nil), aws_credentials_sid: T.unsafe(nil), encryption_key_sid: T.unsafe(nil), aws_s3_url: T.unsafe(nil), aws_storage_enabled: T.unsafe(nil), encryption_enabled: T.unsafe(nil)); end
  def encryption_enabled; end
  def encryption_key_sid; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def to_s; end
  def url; end
end

class Twilio::REST::Video::V1::CompositionSettingsList < ::Twilio::REST::ListResource
  def initialize(version); end

  def to_s; end
end

class Twilio::REST::Video::V1::CompositionSettingsPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Video::V1::RecordingContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Video::V1::RecordingInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def codec; end
  def container_format; end
  def context; end
  def date_created; end
  def delete; end
  def duration; end
  def fetch; end
  def grouping_sids; end
  def inspect; end
  def links; end
  def media_external_location; end
  def offset; end
  def sid; end
  def size; end
  def source_sid; end
  def status; end
  def status_callback; end
  def status_callback_method; end
  def to_s; end
  def track_name; end
  def type; end
  def url; end
end

class Twilio::REST::Video::V1::RecordingList < ::Twilio::REST::ListResource
  def initialize(version); end

  def each; end
  def get_page(target_url); end
  def list(status: T.unsafe(nil), source_sid: T.unsafe(nil), grouping_sid: T.unsafe(nil), date_created_after: T.unsafe(nil), date_created_before: T.unsafe(nil), media_type: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(status: T.unsafe(nil), source_sid: T.unsafe(nil), grouping_sid: T.unsafe(nil), date_created_after: T.unsafe(nil), date_created_before: T.unsafe(nil), media_type: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(status: T.unsafe(nil), source_sid: T.unsafe(nil), grouping_sid: T.unsafe(nil), date_created_after: T.unsafe(nil), date_created_before: T.unsafe(nil), media_type: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Video::V1::RecordingPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Video::V1::RecordingSettingsContext < ::Twilio::REST::InstanceContext
  def initialize(version); end

  def create(friendly_name: T.unsafe(nil), aws_credentials_sid: T.unsafe(nil), encryption_key_sid: T.unsafe(nil), aws_s3_url: T.unsafe(nil), aws_storage_enabled: T.unsafe(nil), encryption_enabled: T.unsafe(nil)); end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Video::V1::RecordingSettingsInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload); end

  def account_sid; end
  def aws_credentials_sid; end
  def aws_s3_url; end
  def aws_storage_enabled; end
  def context; end
  def create(friendly_name: T.unsafe(nil), aws_credentials_sid: T.unsafe(nil), encryption_key_sid: T.unsafe(nil), aws_s3_url: T.unsafe(nil), aws_storage_enabled: T.unsafe(nil), encryption_enabled: T.unsafe(nil)); end
  def encryption_enabled; end
  def encryption_key_sid; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def to_s; end
  def url; end
end

class Twilio::REST::Video::V1::RecordingSettingsList < ::Twilio::REST::ListResource
  def initialize(version); end

  def to_s; end
end

class Twilio::REST::Video::V1::RecordingSettingsPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Video::V1::RoomContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def fetch; end
  def inspect; end
  def participants(sid = T.unsafe(nil)); end
  def recording_rules; end
  def recordings(sid = T.unsafe(nil)); end
  def to_s; end
  def update(status: T.unsafe(nil)); end
end

class Twilio::REST::Video::V1::RoomContext::ParticipantContext < ::Twilio::REST::InstanceContext
  def initialize(version, room_sid, sid); end

  def anonymize; end
  def fetch; end
  def inspect; end
  def published_tracks(sid = T.unsafe(nil)); end
  def subscribe_rules; end
  def subscribed_tracks(sid = T.unsafe(nil)); end
  def to_s; end
  def update(status: T.unsafe(nil)); end
end

class Twilio::REST::Video::V1::RoomContext::ParticipantContext::AnonymizeContext < ::Twilio::REST::InstanceContext
  def initialize(version, room_sid, sid); end

  def inspect; end
  def to_s; end
  def update; end
end

class Twilio::REST::Video::V1::RoomContext::ParticipantContext::AnonymizeInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, room_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def duration; end
  def end_time; end
  def identity; end
  def inspect; end
  def room_sid; end
  def sid; end
  def start_time; end
  def status; end
  def to_s; end
  def update; end
  def url; end
end

class Twilio::REST::Video::V1::RoomContext::ParticipantContext::AnonymizeList < ::Twilio::REST::ListResource
  def initialize(version, room_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def to_s; end
end

class Twilio::REST::Video::V1::RoomContext::ParticipantContext::AnonymizePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Video::V1::RoomContext::ParticipantContext::PublishedTrackContext < ::Twilio::REST::InstanceContext
  def initialize(version, room_sid, participant_sid, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Video::V1::RoomContext::ParticipantContext::PublishedTrackInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, room_sid: T.unsafe(nil), participant_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def context; end
  def date_created; end
  def date_updated; end
  def enabled; end
  def fetch; end
  def inspect; end
  def kind; end
  def name; end
  def participant_sid; end
  def room_sid; end
  def sid; end
  def to_s; end
  def url; end
end

class Twilio::REST::Video::V1::RoomContext::ParticipantContext::PublishedTrackList < ::Twilio::REST::ListResource
  def initialize(version, room_sid: T.unsafe(nil), participant_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Video::V1::RoomContext::ParticipantContext::PublishedTrackPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Video::V1::RoomContext::ParticipantContext::SubscribeRulesInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, room_sid: T.unsafe(nil), participant_sid: T.unsafe(nil)); end

  def date_created; end
  def date_updated; end
  def inspect; end
  def participant_sid; end
  def room_sid; end
  def rules; end
  def to_s; end
end

class Twilio::REST::Video::V1::RoomContext::ParticipantContext::SubscribeRulesList < ::Twilio::REST::ListResource
  def initialize(version, room_sid: T.unsafe(nil), participant_sid: T.unsafe(nil)); end

  def fetch; end
  def to_s; end
  def update(rules: T.unsafe(nil)); end
end

class Twilio::REST::Video::V1::RoomContext::ParticipantContext::SubscribeRulesPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Video::V1::RoomContext::ParticipantContext::SubscribedTrackContext < ::Twilio::REST::InstanceContext
  def initialize(version, room_sid, participant_sid, sid); end

  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Video::V1::RoomContext::ParticipantContext::SubscribedTrackInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, room_sid: T.unsafe(nil), participant_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def context; end
  def date_created; end
  def date_updated; end
  def enabled; end
  def fetch; end
  def inspect; end
  def kind; end
  def name; end
  def participant_sid; end
  def publisher_sid; end
  def room_sid; end
  def sid; end
  def to_s; end
  def url; end
end

class Twilio::REST::Video::V1::RoomContext::ParticipantContext::SubscribedTrackList < ::Twilio::REST::ListResource
  def initialize(version, room_sid: T.unsafe(nil), participant_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Video::V1::RoomContext::ParticipantContext::SubscribedTrackPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Video::V1::RoomContext::ParticipantInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, room_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def anonymize; end
  def context; end
  def date_created; end
  def date_updated; end
  def duration; end
  def end_time; end
  def fetch; end
  def identity; end
  def inspect; end
  def links; end
  def published_tracks; end
  def room_sid; end
  def sid; end
  def start_time; end
  def status; end
  def subscribe_rules; end
  def subscribed_tracks; end
  def to_s; end
  def update(status: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Video::V1::RoomContext::ParticipantList < ::Twilio::REST::ListResource
  def initialize(version, room_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(status: T.unsafe(nil), identity: T.unsafe(nil), date_created_after: T.unsafe(nil), date_created_before: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(status: T.unsafe(nil), identity: T.unsafe(nil), date_created_after: T.unsafe(nil), date_created_before: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(status: T.unsafe(nil), identity: T.unsafe(nil), date_created_after: T.unsafe(nil), date_created_before: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Video::V1::RoomContext::ParticipantPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Video::V1::RoomContext::RecordingRulesInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, room_sid: T.unsafe(nil)); end

  def date_created; end
  def date_updated; end
  def inspect; end
  def room_sid; end
  def rules; end
  def to_s; end
end

class Twilio::REST::Video::V1::RoomContext::RecordingRulesList < ::Twilio::REST::ListResource
  def initialize(version, room_sid: T.unsafe(nil)); end

  def fetch; end
  def to_s; end
  def update(rules: T.unsafe(nil)); end
end

class Twilio::REST::Video::V1::RoomContext::RecordingRulesPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Video::V1::RoomContext::RoomRecordingContext < ::Twilio::REST::InstanceContext
  def initialize(version, room_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Video::V1::RoomContext::RoomRecordingInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, room_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def codec; end
  def container_format; end
  def context; end
  def date_created; end
  def delete; end
  def duration; end
  def fetch; end
  def grouping_sids; end
  def inspect; end
  def links; end
  def media_external_location; end
  def offset; end
  def room_sid; end
  def sid; end
  def size; end
  def source_sid; end
  def status; end
  def to_s; end
  def track_name; end
  def type; end
  def url; end
end

class Twilio::REST::Video::V1::RoomContext::RoomRecordingList < ::Twilio::REST::ListResource
  def initialize(version, room_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(status: T.unsafe(nil), source_sid: T.unsafe(nil), date_created_after: T.unsafe(nil), date_created_before: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(status: T.unsafe(nil), source_sid: T.unsafe(nil), date_created_after: T.unsafe(nil), date_created_before: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(status: T.unsafe(nil), source_sid: T.unsafe(nil), date_created_after: T.unsafe(nil), date_created_before: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Video::V1::RoomContext::RoomRecordingPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Video::V1::RoomInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def audio_only; end
  def context; end
  def date_created; end
  def date_updated; end
  def duration; end
  def empty_room_timeout; end
  def enable_turn; end
  def end_time; end
  def fetch; end
  def inspect; end
  def large_room; end
  def links; end
  def max_concurrent_published_tracks; end
  def max_participant_duration; end
  def max_participants; end
  def media_region; end
  def participants; end
  def record_participants_on_connect; end
  def recording_rules; end
  def recordings; end
  def sid; end
  def status; end
  def status_callback; end
  def status_callback_method; end
  def to_s; end
  def type; end
  def unique_name; end
  def unused_room_timeout; end
  def update(status: T.unsafe(nil)); end
  def url; end
  def video_codecs; end
end

class Twilio::REST::Video::V1::RoomList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(enable_turn: T.unsafe(nil), type: T.unsafe(nil), unique_name: T.unsafe(nil), status_callback: T.unsafe(nil), status_callback_method: T.unsafe(nil), max_participants: T.unsafe(nil), record_participants_on_connect: T.unsafe(nil), video_codecs: T.unsafe(nil), media_region: T.unsafe(nil), recording_rules: T.unsafe(nil), audio_only: T.unsafe(nil), max_participant_duration: T.unsafe(nil), empty_room_timeout: T.unsafe(nil), unused_room_timeout: T.unsafe(nil), large_room: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(status: T.unsafe(nil), unique_name: T.unsafe(nil), date_created_after: T.unsafe(nil), date_created_before: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(status: T.unsafe(nil), unique_name: T.unsafe(nil), date_created_after: T.unsafe(nil), date_created_before: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(status: T.unsafe(nil), unique_name: T.unsafe(nil), date_created_after: T.unsafe(nil), date_created_before: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Video::V1::RoomPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Voice < ::Twilio::REST::Domain
  def initialize(twilio); end

  def archived_calls(date = T.unsafe(nil), sid = T.unsafe(nil)); end
  def byoc_trunks(sid = T.unsafe(nil)); end
  def connection_policies(sid = T.unsafe(nil)); end
  def dialing_permissions; end
  def ip_records(sid = T.unsafe(nil)); end
  def source_ip_mappings(sid = T.unsafe(nil)); end
  def to_s; end
  def v1; end
end

class Twilio::REST::Voice::V1 < ::Twilio::REST::Version
  def initialize(domain); end

  def archived_calls(date = T.unsafe(nil), sid = T.unsafe(nil)); end
  def byoc_trunks(sid = T.unsafe(nil)); end
  def connection_policies(sid = T.unsafe(nil)); end
  def dialing_permissions; end
  def ip_records(sid = T.unsafe(nil)); end
  def source_ip_mappings(sid = T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Voice::V1::ArchivedCallContext < ::Twilio::REST::InstanceContext
  def initialize(version, date, sid); end

  def delete; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Voice::V1::ArchivedCallInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, date: T.unsafe(nil), sid: T.unsafe(nil)); end

  def context; end
  def date; end
  def delete; end
  def inspect; end
  def sid; end
  def to_s; end
  def url; end
end

class Twilio::REST::Voice::V1::ArchivedCallList < ::Twilio::REST::ListResource
  def initialize(version); end

  def to_s; end
end

class Twilio::REST::Voice::V1::ArchivedCallPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Voice::V1::ByocTrunkContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), voice_url: T.unsafe(nil), voice_method: T.unsafe(nil), voice_fallback_url: T.unsafe(nil), voice_fallback_method: T.unsafe(nil), status_callback_url: T.unsafe(nil), status_callback_method: T.unsafe(nil), cnam_lookup_enabled: T.unsafe(nil), connection_policy_sid: T.unsafe(nil), from_domain_sid: T.unsafe(nil)); end
end

class Twilio::REST::Voice::V1::ByocTrunkInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def cnam_lookup_enabled; end
  def connection_policy_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def from_domain_sid; end
  def inspect; end
  def sid; end
  def status_callback_method; end
  def status_callback_url; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), voice_url: T.unsafe(nil), voice_method: T.unsafe(nil), voice_fallback_url: T.unsafe(nil), voice_fallback_method: T.unsafe(nil), status_callback_url: T.unsafe(nil), status_callback_method: T.unsafe(nil), cnam_lookup_enabled: T.unsafe(nil), connection_policy_sid: T.unsafe(nil), from_domain_sid: T.unsafe(nil)); end
  def url; end
  def voice_fallback_method; end
  def voice_fallback_url; end
  def voice_method; end
  def voice_url; end
end

class Twilio::REST::Voice::V1::ByocTrunkList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(friendly_name: T.unsafe(nil), voice_url: T.unsafe(nil), voice_method: T.unsafe(nil), voice_fallback_url: T.unsafe(nil), voice_fallback_method: T.unsafe(nil), status_callback_url: T.unsafe(nil), status_callback_method: T.unsafe(nil), cnam_lookup_enabled: T.unsafe(nil), connection_policy_sid: T.unsafe(nil), from_domain_sid: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Voice::V1::ByocTrunkPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Voice::V1::ConnectionPolicyContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def targets(sid = T.unsafe(nil)); end
  def to_s; end
  def update(friendly_name: T.unsafe(nil)); end
end

class Twilio::REST::Voice::V1::ConnectionPolicyContext::ConnectionPolicyTargetContext < ::Twilio::REST::InstanceContext
  def initialize(version, connection_policy_sid, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), target: T.unsafe(nil), priority: T.unsafe(nil), weight: T.unsafe(nil), enabled: T.unsafe(nil)); end
end

class Twilio::REST::Voice::V1::ConnectionPolicyContext::ConnectionPolicyTargetInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, connection_policy_sid: T.unsafe(nil), sid: T.unsafe(nil)); end

  def account_sid; end
  def connection_policy_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def enabled; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def priority; end
  def sid; end
  def target; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil), target: T.unsafe(nil), priority: T.unsafe(nil), weight: T.unsafe(nil), enabled: T.unsafe(nil)); end
  def url; end
  def weight; end
end

class Twilio::REST::Voice::V1::ConnectionPolicyContext::ConnectionPolicyTargetList < ::Twilio::REST::ListResource
  def initialize(version, connection_policy_sid: T.unsafe(nil)); end

  def create(target: T.unsafe(nil), friendly_name: T.unsafe(nil), priority: T.unsafe(nil), weight: T.unsafe(nil), enabled: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Voice::V1::ConnectionPolicyContext::ConnectionPolicyTargetPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Voice::V1::ConnectionPolicyInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def links; end
  def sid; end
  def targets; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Voice::V1::ConnectionPolicyList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(friendly_name: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Voice::V1::ConnectionPolicyPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Voice::V1::DialingPermissionsInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload); end

  def inspect; end
  def to_s; end
end

class Twilio::REST::Voice::V1::DialingPermissionsList < ::Twilio::REST::ListResource
  def initialize(version); end

  def bulk_country_updates; end
  def countries(iso_code = T.unsafe(nil)); end
  def settings; end
  def to_s; end
end

class Twilio::REST::Voice::V1::DialingPermissionsList::BulkCountryUpdateInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload); end

  def inspect; end
  def to_s; end
  def update_count; end
  def update_request; end
end

class Twilio::REST::Voice::V1::DialingPermissionsList::BulkCountryUpdateList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(update_request: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Voice::V1::DialingPermissionsList::BulkCountryUpdatePage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Voice::V1::DialingPermissionsList::CountryContext < ::Twilio::REST::InstanceContext
  def initialize(version, iso_code); end

  def fetch; end
  def highrisk_special_prefixes; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Voice::V1::DialingPermissionsList::CountryContext::HighriskSpecialPrefixInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, iso_code: T.unsafe(nil)); end

  def inspect; end
  def prefix; end
  def to_s; end
end

class Twilio::REST::Voice::V1::DialingPermissionsList::CountryContext::HighriskSpecialPrefixList < ::Twilio::REST::ListResource
  def initialize(version, iso_code: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Voice::V1::DialingPermissionsList::CountryContext::HighriskSpecialPrefixPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Voice::V1::DialingPermissionsList::CountryInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, iso_code: T.unsafe(nil)); end

  def context; end
  def continent; end
  def country_codes; end
  def fetch; end
  def high_risk_special_numbers_enabled; end
  def high_risk_tollfraud_numbers_enabled; end
  def highrisk_special_prefixes; end
  def inspect; end
  def iso_code; end
  def links; end
  def low_risk_numbers_enabled; end
  def name; end
  def to_s; end
  def url; end
end

class Twilio::REST::Voice::V1::DialingPermissionsList::CountryList < ::Twilio::REST::ListResource
  def initialize(version); end

  def each; end
  def get_page(target_url); end
  def list(iso_code: T.unsafe(nil), continent: T.unsafe(nil), country_code: T.unsafe(nil), low_risk_numbers_enabled: T.unsafe(nil), high_risk_special_numbers_enabled: T.unsafe(nil), high_risk_tollfraud_numbers_enabled: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(iso_code: T.unsafe(nil), continent: T.unsafe(nil), country_code: T.unsafe(nil), low_risk_numbers_enabled: T.unsafe(nil), high_risk_special_numbers_enabled: T.unsafe(nil), high_risk_tollfraud_numbers_enabled: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(iso_code: T.unsafe(nil), continent: T.unsafe(nil), country_code: T.unsafe(nil), low_risk_numbers_enabled: T.unsafe(nil), high_risk_special_numbers_enabled: T.unsafe(nil), high_risk_tollfraud_numbers_enabled: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Voice::V1::DialingPermissionsList::CountryPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Voice::V1::DialingPermissionsList::SettingsContext < ::Twilio::REST::InstanceContext
  def initialize(version); end

  def fetch; end
  def inspect; end
  def to_s; end
  def update(dialing_permissions_inheritance: T.unsafe(nil)); end
end

class Twilio::REST::Voice::V1::DialingPermissionsList::SettingsInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload); end

  def context; end
  def dialing_permissions_inheritance; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(dialing_permissions_inheritance: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Voice::V1::DialingPermissionsList::SettingsList < ::Twilio::REST::ListResource
  def initialize(version); end

  def to_s; end
end

class Twilio::REST::Voice::V1::DialingPermissionsList::SettingsPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Voice::V1::DialingPermissionsPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Voice::V1::IpRecordContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil)); end
end

class Twilio::REST::Voice::V1::IpRecordInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def cidr_prefix_length; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def ip_address; end
  def sid; end
  def to_s; end
  def update(friendly_name: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Voice::V1::IpRecordList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(ip_address: T.unsafe(nil), friendly_name: T.unsafe(nil), cidr_prefix_length: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Voice::V1::IpRecordPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Voice::V1::SourceIpMappingContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(sip_domain_sid: T.unsafe(nil)); end
end

class Twilio::REST::Voice::V1::SourceIpMappingInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def inspect; end
  def ip_record_sid; end
  def sid; end
  def sip_domain_sid; end
  def to_s; end
  def update(sip_domain_sid: T.unsafe(nil)); end
  def url; end
end

class Twilio::REST::Voice::V1::SourceIpMappingList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(ip_record_sid: T.unsafe(nil), sip_domain_sid: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Voice::V1::SourceIpMappingPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Wireless < ::Twilio::REST::Domain
  def initialize(twilio); end

  def commands(sid = T.unsafe(nil)); end
  def rate_plans(sid = T.unsafe(nil)); end
  def sims(sid = T.unsafe(nil)); end
  def to_s; end
  def usage_records; end
  def v1; end
end

class Twilio::REST::Wireless::V1 < ::Twilio::REST::Version
  def initialize(domain); end

  def commands(sid = T.unsafe(nil)); end
  def rate_plans(sid = T.unsafe(nil)); end
  def sims(sid = T.unsafe(nil)); end
  def to_s; end
  def usage_records; end
end

class Twilio::REST::Wireless::V1::CommandContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
end

class Twilio::REST::Wireless::V1::CommandInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def command; end
  def command_mode; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def delivery_receipt_requested; end
  def direction; end
  def fetch; end
  def inspect; end
  def sid; end
  def sim_sid; end
  def status; end
  def to_s; end
  def transport; end
  def url; end
end

class Twilio::REST::Wireless::V1::CommandList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(command: T.unsafe(nil), sim: T.unsafe(nil), callback_method: T.unsafe(nil), callback_url: T.unsafe(nil), command_mode: T.unsafe(nil), include_sid: T.unsafe(nil), delivery_receipt_requested: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(sim: T.unsafe(nil), status: T.unsafe(nil), direction: T.unsafe(nil), transport: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(sim: T.unsafe(nil), status: T.unsafe(nil), direction: T.unsafe(nil), transport: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(sim: T.unsafe(nil), status: T.unsafe(nil), direction: T.unsafe(nil), transport: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Wireless::V1::CommandPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Wireless::V1::RatePlanContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(unique_name: T.unsafe(nil), friendly_name: T.unsafe(nil)); end
end

class Twilio::REST::Wireless::V1::RatePlanInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def context; end
  def data_enabled; end
  def data_limit; end
  def data_metering; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def inspect; end
  def international_roaming; end
  def international_roaming_data_limit; end
  def messaging_enabled; end
  def national_roaming_data_limit; end
  def national_roaming_enabled; end
  def sid; end
  def to_s; end
  def unique_name; end
  def update(unique_name: T.unsafe(nil), friendly_name: T.unsafe(nil)); end
  def url; end
  def voice_enabled; end
end

class Twilio::REST::Wireless::V1::RatePlanList < ::Twilio::REST::ListResource
  def initialize(version); end

  def create(unique_name: T.unsafe(nil), friendly_name: T.unsafe(nil), data_enabled: T.unsafe(nil), data_limit: T.unsafe(nil), data_metering: T.unsafe(nil), messaging_enabled: T.unsafe(nil), voice_enabled: T.unsafe(nil), national_roaming_enabled: T.unsafe(nil), international_roaming: T.unsafe(nil), national_roaming_data_limit: T.unsafe(nil), international_roaming_data_limit: T.unsafe(nil)); end
  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Wireless::V1::RatePlanPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Wireless::V1::SimContext < ::Twilio::REST::InstanceContext
  def initialize(version, sid); end

  def data_sessions; end
  def delete; end
  def fetch; end
  def inspect; end
  def to_s; end
  def update(unique_name: T.unsafe(nil), callback_method: T.unsafe(nil), callback_url: T.unsafe(nil), friendly_name: T.unsafe(nil), rate_plan: T.unsafe(nil), status: T.unsafe(nil), commands_callback_method: T.unsafe(nil), commands_callback_url: T.unsafe(nil), sms_fallback_method: T.unsafe(nil), sms_fallback_url: T.unsafe(nil), sms_method: T.unsafe(nil), sms_url: T.unsafe(nil), voice_fallback_method: T.unsafe(nil), voice_fallback_url: T.unsafe(nil), voice_method: T.unsafe(nil), voice_url: T.unsafe(nil), reset_status: T.unsafe(nil), account_sid: T.unsafe(nil)); end
  def usage_records; end
end

class Twilio::REST::Wireless::V1::SimContext::DataSessionInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sim_sid: T.unsafe(nil)); end

  def account_sid; end
  def cell_id; end
  def cell_location_estimate; end
  def end_; end
  def imei; end
  def inspect; end
  def last_updated; end
  def operator_country; end
  def operator_mcc; end
  def operator_mnc; end
  def operator_name; end
  def packets_downloaded; end
  def packets_uploaded; end
  def radio_link; end
  def sid; end
  def sim_sid; end
  def start; end
  def to_s; end
end

class Twilio::REST::Wireless::V1::SimContext::DataSessionList < ::Twilio::REST::ListResource
  def initialize(version, sim_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Wireless::V1::SimContext::DataSessionPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Wireless::V1::SimContext::UsageRecordInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sim_sid: T.unsafe(nil)); end

  def account_sid; end
  def commands; end
  def data; end
  def inspect; end
  def period; end
  def sim_sid; end
  def to_s; end
end

class Twilio::REST::Wireless::V1::SimContext::UsageRecordList < ::Twilio::REST::ListResource
  def initialize(version, sim_sid: T.unsafe(nil)); end

  def each; end
  def get_page(target_url); end
  def list(end_: T.unsafe(nil), start: T.unsafe(nil), granularity: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(end_: T.unsafe(nil), start: T.unsafe(nil), granularity: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(end_: T.unsafe(nil), start: T.unsafe(nil), granularity: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Wireless::V1::SimContext::UsageRecordPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Wireless::V1::SimInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload, sid: T.unsafe(nil)); end

  def account_sid; end
  def commands_callback_method; end
  def commands_callback_url; end
  def context; end
  def data_sessions; end
  def date_created; end
  def date_updated; end
  def delete; end
  def e_id; end
  def fetch; end
  def friendly_name; end
  def iccid; end
  def inspect; end
  def ip_address; end
  def links; end
  def rate_plan_sid; end
  def reset_status; end
  def sid; end
  def sms_fallback_method; end
  def sms_fallback_url; end
  def sms_method; end
  def sms_url; end
  def status; end
  def to_s; end
  def unique_name; end
  def update(unique_name: T.unsafe(nil), callback_method: T.unsafe(nil), callback_url: T.unsafe(nil), friendly_name: T.unsafe(nil), rate_plan: T.unsafe(nil), status: T.unsafe(nil), commands_callback_method: T.unsafe(nil), commands_callback_url: T.unsafe(nil), sms_fallback_method: T.unsafe(nil), sms_fallback_url: T.unsafe(nil), sms_method: T.unsafe(nil), sms_url: T.unsafe(nil), voice_fallback_method: T.unsafe(nil), voice_fallback_url: T.unsafe(nil), voice_method: T.unsafe(nil), voice_url: T.unsafe(nil), reset_status: T.unsafe(nil), account_sid: T.unsafe(nil)); end
  def url; end
  def usage_records; end
  def voice_fallback_method; end
  def voice_fallback_url; end
  def voice_method; end
  def voice_url; end
end

class Twilio::REST::Wireless::V1::SimList < ::Twilio::REST::ListResource
  def initialize(version); end

  def each; end
  def get_page(target_url); end
  def list(status: T.unsafe(nil), iccid: T.unsafe(nil), rate_plan: T.unsafe(nil), e_id: T.unsafe(nil), sim_registration_code: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(status: T.unsafe(nil), iccid: T.unsafe(nil), rate_plan: T.unsafe(nil), e_id: T.unsafe(nil), sim_registration_code: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(status: T.unsafe(nil), iccid: T.unsafe(nil), rate_plan: T.unsafe(nil), e_id: T.unsafe(nil), sim_registration_code: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Wireless::V1::SimPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::REST::Wireless::V1::UsageRecordInstance < ::Twilio::REST::InstanceResource
  def initialize(version, payload); end

  def account_sid; end
  def commands; end
  def data; end
  def inspect; end
  def period; end
  def to_s; end
end

class Twilio::REST::Wireless::V1::UsageRecordList < ::Twilio::REST::ListResource
  def initialize(version); end

  def each; end
  def get_page(target_url); end
  def list(end_: T.unsafe(nil), start: T.unsafe(nil), granularity: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def page(end_: T.unsafe(nil), start: T.unsafe(nil), granularity: T.unsafe(nil), page_token: T.unsafe(nil), page_number: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def stream(end_: T.unsafe(nil), start: T.unsafe(nil), granularity: T.unsafe(nil), limit: T.unsafe(nil), page_size: T.unsafe(nil)); end
  def to_s; end
end

class Twilio::REST::Wireless::V1::UsageRecordPage < ::Twilio::REST::Page
  def initialize(version, response, solution); end

  def get_instance(payload); end
  def to_s; end
end

class Twilio::Request
  def initialize(host, port, method, url, params = T.unsafe(nil), data = T.unsafe(nil), headers = T.unsafe(nil), auth = T.unsafe(nil), timeout = T.unsafe(nil)); end

  def auth; end
  def data; end
  def headers; end
  def host; end
  def method; end
  def params; end
  def port; end
  def timeout; end
  def to_s; end
  def url; end
end

class Twilio::Response
  def initialize(status_code, body, headers: T.unsafe(nil)); end

  def body; end
  def body=(_arg0); end
  def headers; end
  def headers=(_arg0); end
  def status_code; end
  def status_code=(_arg0); end
  def to_s; end
end

module Twilio::Security; end

class Twilio::Security::RequestValidator
  def initialize(auth_token = T.unsafe(nil)); end

  def build_hash_for(body); end
  def build_signature_for(url, params); end
  def validate(url, params, signature); end

  private

  def add_port(parsed_url); end
  def body_or_hash(params_or_body); end
  def build_url_with_port_for(parsed_url); end
  def remove_port(parsed_url); end
  def secure_compare(a, b); end
end

module Twilio::TwiML; end

class Twilio::TwiML::Autopilot < ::Twilio::TwiML::TwiML
  def initialize(name, **keyword_args); end
end

class Twilio::TwiML::Body < ::Twilio::TwiML::TwiML
  def initialize(message, **keyword_args); end
end

class Twilio::TwiML::Client < ::Twilio::TwiML::TwiML
  def initialize(identity: T.unsafe(nil), **keyword_args); end

  def identity(client_identity, **keyword_args); end
  def parameter(name: T.unsafe(nil), value: T.unsafe(nil), **keyword_args); end
end

class Twilio::TwiML::Comment < ::Twilio::TwiML::LeafNode
  def xml(document); end
end

class Twilio::TwiML::Conference < ::Twilio::TwiML::TwiML
  def initialize(name, **keyword_args); end
end

class Twilio::TwiML::Config < ::Twilio::TwiML::TwiML
  def initialize(**keyword_args); end
end

class Twilio::TwiML::Connect < ::Twilio::TwiML::TwiML
  def initialize(**keyword_args); end

  def autopilot(name, **keyword_args); end
  def conversation(service_instance_sid: T.unsafe(nil), inbound_autocreation: T.unsafe(nil), routing_assignment_timeout: T.unsafe(nil), inbound_timeout: T.unsafe(nil), url: T.unsafe(nil), method: T.unsafe(nil), record: T.unsafe(nil), trim: T.unsafe(nil), recording_status_callback: T.unsafe(nil), recording_status_callback_method: T.unsafe(nil), recording_status_callback_event: T.unsafe(nil), status_callback: T.unsafe(nil), status_callback_method: T.unsafe(nil), status_callback_event: T.unsafe(nil), **keyword_args); end
  def room(name, participant_identity: T.unsafe(nil), **keyword_args); end
  def stream(name: T.unsafe(nil), connector_name: T.unsafe(nil), url: T.unsafe(nil), track: T.unsafe(nil), status_callback: T.unsafe(nil), status_callback_method: T.unsafe(nil), **keyword_args); end
  def virtual_agent(connector_name: T.unsafe(nil), language: T.unsafe(nil), sentiment_analysis: T.unsafe(nil), status_callback: T.unsafe(nil), status_callback_method: T.unsafe(nil), **keyword_args); end
end

class Twilio::TwiML::Conversation < ::Twilio::TwiML::TwiML
  def initialize(**keyword_args); end
end

class Twilio::TwiML::Dial < ::Twilio::TwiML::TwiML
  def initialize(number: T.unsafe(nil), **keyword_args); end

  def client(identity: T.unsafe(nil), url: T.unsafe(nil), method: T.unsafe(nil), status_callback_event: T.unsafe(nil), status_callback: T.unsafe(nil), status_callback_method: T.unsafe(nil), **keyword_args); end
  def conference(name, muted: T.unsafe(nil), beep: T.unsafe(nil), start_conference_on_enter: T.unsafe(nil), end_conference_on_exit: T.unsafe(nil), wait_url: T.unsafe(nil), wait_method: T.unsafe(nil), max_participants: T.unsafe(nil), record: T.unsafe(nil), region: T.unsafe(nil), coach: T.unsafe(nil), trim: T.unsafe(nil), status_callback_event: T.unsafe(nil), status_callback: T.unsafe(nil), status_callback_method: T.unsafe(nil), recording_status_callback: T.unsafe(nil), recording_status_callback_method: T.unsafe(nil), recording_status_callback_event: T.unsafe(nil), event_callback_url: T.unsafe(nil), jitter_buffer_size: T.unsafe(nil), participant_label: T.unsafe(nil), **keyword_args); end
  def number(phone_number, send_digits: T.unsafe(nil), url: T.unsafe(nil), method: T.unsafe(nil), status_callback_event: T.unsafe(nil), status_callback: T.unsafe(nil), status_callback_method: T.unsafe(nil), byoc: T.unsafe(nil), machine_detection: T.unsafe(nil), amd_status_callback_method: T.unsafe(nil), amd_status_callback: T.unsafe(nil), machine_detection_timeout: T.unsafe(nil), machine_detection_speech_threshold: T.unsafe(nil), machine_detection_speech_end_threshold: T.unsafe(nil), machine_detection_silence_timeout: T.unsafe(nil), **keyword_args); end
  def queue(name, url: T.unsafe(nil), method: T.unsafe(nil), reservation_sid: T.unsafe(nil), post_work_activity_sid: T.unsafe(nil), **keyword_args); end
  def sim(sim_sid, **keyword_args); end
  def sip(sip_url, username: T.unsafe(nil), password: T.unsafe(nil), url: T.unsafe(nil), method: T.unsafe(nil), status_callback_event: T.unsafe(nil), status_callback: T.unsafe(nil), status_callback_method: T.unsafe(nil), machine_detection: T.unsafe(nil), amd_status_callback_method: T.unsafe(nil), amd_status_callback: T.unsafe(nil), machine_detection_timeout: T.unsafe(nil), machine_detection_speech_threshold: T.unsafe(nil), machine_detection_speech_end_threshold: T.unsafe(nil), machine_detection_silence_timeout: T.unsafe(nil), **keyword_args); end
end

class Twilio::TwiML::Echo < ::Twilio::TwiML::TwiML
  def initialize(**keyword_args); end
end

class Twilio::TwiML::Enqueue < ::Twilio::TwiML::TwiML
  def initialize(name: T.unsafe(nil), **keyword_args); end

  def task(body, priority: T.unsafe(nil), timeout: T.unsafe(nil), **keyword_args); end
end

class Twilio::TwiML::FaxResponse < ::Twilio::TwiML::TwiML
  def initialize(**keyword_args); end

  def receive(action: T.unsafe(nil), method: T.unsafe(nil), media_type: T.unsafe(nil), page_size: T.unsafe(nil), store_media: T.unsafe(nil), **keyword_args); end
end

class Twilio::TwiML::Gather < ::Twilio::TwiML::TwiML
  def initialize(**keyword_args); end

  def pause(length: T.unsafe(nil), **keyword_args); end
  def play(url: T.unsafe(nil), loop: T.unsafe(nil), digits: T.unsafe(nil), **keyword_args); end
  def say(message: T.unsafe(nil), voice: T.unsafe(nil), loop: T.unsafe(nil), language: T.unsafe(nil), **keyword_args); end
end

class Twilio::TwiML::GenericNode < ::Twilio::TwiML::TwiML
  def initialize(name, value, **keyword_args); end
end

class Twilio::TwiML::Hangup < ::Twilio::TwiML::TwiML
  def initialize(**keyword_args); end
end

class Twilio::TwiML::Identity < ::Twilio::TwiML::TwiML
  def initialize(client_identity, **keyword_args); end
end

class Twilio::TwiML::LeafNode
  def initialize(content); end
end

class Twilio::TwiML::Leave < ::Twilio::TwiML::TwiML
  def initialize(**keyword_args); end
end

class Twilio::TwiML::Media < ::Twilio::TwiML::TwiML
  def initialize(url, **keyword_args); end
end

class Twilio::TwiML::Message < ::Twilio::TwiML::TwiML
  def initialize(body: T.unsafe(nil), **keyword_args); end

  def body(message, **keyword_args); end
  def media(url, **keyword_args); end
end

class Twilio::TwiML::MessagingResponse < ::Twilio::TwiML::TwiML
  def initialize(**keyword_args); end

  def message(body: T.unsafe(nil), to: T.unsafe(nil), from: T.unsafe(nil), action: T.unsafe(nil), method: T.unsafe(nil), status_callback: T.unsafe(nil), **keyword_args); end
  def redirect(url, method: T.unsafe(nil), **keyword_args); end
end

class Twilio::TwiML::Number < ::Twilio::TwiML::TwiML
  def initialize(phone_number, **keyword_args); end
end

class Twilio::TwiML::Parameter < ::Twilio::TwiML::TwiML
  def initialize(**keyword_args); end
end

class Twilio::TwiML::Pause < ::Twilio::TwiML::TwiML
  def initialize(**keyword_args); end
end

class Twilio::TwiML::Pay < ::Twilio::TwiML::TwiML
  def initialize(**keyword_args); end

  def parameter(name: T.unsafe(nil), value: T.unsafe(nil), **keyword_args); end
  def prompt(for_: T.unsafe(nil), error_type: T.unsafe(nil), card_type: T.unsafe(nil), attempt: T.unsafe(nil), require_matching_inputs: T.unsafe(nil), **keyword_args); end
end

class Twilio::TwiML::Play < ::Twilio::TwiML::TwiML
  def initialize(url: T.unsafe(nil), **keyword_args); end
end

class Twilio::TwiML::Prompt < ::Twilio::TwiML::TwiML
  def initialize(**keyword_args); end

  def pause(length: T.unsafe(nil), **keyword_args); end
  def play(url: T.unsafe(nil), loop: T.unsafe(nil), digits: T.unsafe(nil), **keyword_args); end
  def say(message: T.unsafe(nil), voice: T.unsafe(nil), loop: T.unsafe(nil), language: T.unsafe(nil), **keyword_args); end
end

class Twilio::TwiML::Queue < ::Twilio::TwiML::TwiML
  def initialize(name, **keyword_args); end
end

class Twilio::TwiML::Receive < ::Twilio::TwiML::TwiML
  def initialize(**keyword_args); end
end

class Twilio::TwiML::Record < ::Twilio::TwiML::TwiML
  def initialize(**keyword_args); end
end

class Twilio::TwiML::Redirect < ::Twilio::TwiML::TwiML
  def initialize(url, **keyword_args); end
end

class Twilio::TwiML::Refer < ::Twilio::TwiML::TwiML
  def initialize(**keyword_args); end

  def sip(sip_url, **keyword_args); end
end

class Twilio::TwiML::ReferSip < ::Twilio::TwiML::TwiML
  def initialize(sip_url, **keyword_args); end
end

class Twilio::TwiML::Reject < ::Twilio::TwiML::TwiML
  def initialize(**keyword_args); end
end

class Twilio::TwiML::Room < ::Twilio::TwiML::TwiML
  def initialize(name, **keyword_args); end
end

class Twilio::TwiML::Say < ::Twilio::TwiML::TwiML
  def initialize(message: T.unsafe(nil), **keyword_args); end

  def break(strength: T.unsafe(nil), time: T.unsafe(nil), **keyword_args); end
  def emphasis(words: T.unsafe(nil), level: T.unsafe(nil), **keyword_args); end
  def lang(words: T.unsafe(nil), xmlLang: T.unsafe(nil), **keyword_args); end
  def p(words: T.unsafe(nil), **keyword_args); end
  def phoneme(words, alphabet: T.unsafe(nil), ph: T.unsafe(nil), **keyword_args); end
  def prosody(words: T.unsafe(nil), volume: T.unsafe(nil), rate: T.unsafe(nil), pitch: T.unsafe(nil), **keyword_args); end
  def s(words: T.unsafe(nil), **keyword_args); end
  def say_as(words, interpretAs: T.unsafe(nil), role: T.unsafe(nil), **keyword_args); end
  def sub(words, aliasAttribute: T.unsafe(nil), **keyword_args); end
  def w(words: T.unsafe(nil), role: T.unsafe(nil), **keyword_args); end
end

class Twilio::TwiML::Sim < ::Twilio::TwiML::TwiML
  def initialize(sim_sid, **keyword_args); end
end

class Twilio::TwiML::Sip < ::Twilio::TwiML::TwiML
  def initialize(sip_url, **keyword_args); end
end

class Twilio::TwiML::Siprec < ::Twilio::TwiML::TwiML
  def initialize(**keyword_args); end

  def parameter(name: T.unsafe(nil), value: T.unsafe(nil), **keyword_args); end
end

class Twilio::TwiML::Sms < ::Twilio::TwiML::TwiML
  def initialize(message, **keyword_args); end
end

class Twilio::TwiML::SsmlBreak < ::Twilio::TwiML::TwiML
  def initialize(**keyword_args); end
end

class Twilio::TwiML::SsmlEmphasis < ::Twilio::TwiML::TwiML
  def initialize(words: T.unsafe(nil), **keyword_args); end

  def break(strength: T.unsafe(nil), time: T.unsafe(nil), **keyword_args); end
  def emphasis(words: T.unsafe(nil), level: T.unsafe(nil), **keyword_args); end
  def lang(words: T.unsafe(nil), xmlLang: T.unsafe(nil), **keyword_args); end
  def phoneme(words, alphabet: T.unsafe(nil), ph: T.unsafe(nil), **keyword_args); end
  def prosody(words: T.unsafe(nil), volume: T.unsafe(nil), rate: T.unsafe(nil), pitch: T.unsafe(nil), **keyword_args); end
  def say_as(words, interpretAs: T.unsafe(nil), role: T.unsafe(nil), **keyword_args); end
  def sub(words, aliasAttribute: T.unsafe(nil), **keyword_args); end
  def w(words: T.unsafe(nil), role: T.unsafe(nil), **keyword_args); end
end

class Twilio::TwiML::SsmlLang < ::Twilio::TwiML::TwiML
  def initialize(words: T.unsafe(nil), **keyword_args); end

  def break(strength: T.unsafe(nil), time: T.unsafe(nil), **keyword_args); end
  def emphasis(words: T.unsafe(nil), level: T.unsafe(nil), **keyword_args); end
  def lang(words: T.unsafe(nil), xmlLang: T.unsafe(nil), **keyword_args); end
  def p(words: T.unsafe(nil), **keyword_args); end
  def phoneme(words, alphabet: T.unsafe(nil), ph: T.unsafe(nil), **keyword_args); end
  def prosody(words: T.unsafe(nil), volume: T.unsafe(nil), rate: T.unsafe(nil), pitch: T.unsafe(nil), **keyword_args); end
  def s(words: T.unsafe(nil), **keyword_args); end
  def say_as(words, interpretAs: T.unsafe(nil), role: T.unsafe(nil), **keyword_args); end
  def sub(words, aliasAttribute: T.unsafe(nil), **keyword_args); end
  def w(words: T.unsafe(nil), role: T.unsafe(nil), **keyword_args); end
end

class Twilio::TwiML::SsmlP < ::Twilio::TwiML::TwiML
  def initialize(words: T.unsafe(nil), **keyword_args); end

  def break(strength: T.unsafe(nil), time: T.unsafe(nil), **keyword_args); end
  def emphasis(words: T.unsafe(nil), level: T.unsafe(nil), **keyword_args); end
  def lang(words: T.unsafe(nil), xmlLang: T.unsafe(nil), **keyword_args); end
  def phoneme(words, alphabet: T.unsafe(nil), ph: T.unsafe(nil), **keyword_args); end
  def prosody(words: T.unsafe(nil), volume: T.unsafe(nil), rate: T.unsafe(nil), pitch: T.unsafe(nil), **keyword_args); end
  def s(words: T.unsafe(nil), **keyword_args); end
  def say_as(words, interpretAs: T.unsafe(nil), role: T.unsafe(nil), **keyword_args); end
  def sub(words, aliasAttribute: T.unsafe(nil), **keyword_args); end
  def w(words: T.unsafe(nil), role: T.unsafe(nil), **keyword_args); end
end

class Twilio::TwiML::SsmlPhoneme < ::Twilio::TwiML::TwiML
  def initialize(words, **keyword_args); end
end

class Twilio::TwiML::SsmlProsody < ::Twilio::TwiML::TwiML
  def initialize(words: T.unsafe(nil), **keyword_args); end

  def break(strength: T.unsafe(nil), time: T.unsafe(nil), **keyword_args); end
  def emphasis(words: T.unsafe(nil), level: T.unsafe(nil), **keyword_args); end
  def lang(words: T.unsafe(nil), xmlLang: T.unsafe(nil), **keyword_args); end
  def p(words: T.unsafe(nil), **keyword_args); end
  def phoneme(words, alphabet: T.unsafe(nil), ph: T.unsafe(nil), **keyword_args); end
  def prosody(words: T.unsafe(nil), volume: T.unsafe(nil), rate: T.unsafe(nil), pitch: T.unsafe(nil), **keyword_args); end
  def s(words: T.unsafe(nil), **keyword_args); end
  def say_as(words, interpretAs: T.unsafe(nil), role: T.unsafe(nil), **keyword_args); end
  def sub(words, aliasAttribute: T.unsafe(nil), **keyword_args); end
  def w(words: T.unsafe(nil), role: T.unsafe(nil), **keyword_args); end
end

class Twilio::TwiML::SsmlS < ::Twilio::TwiML::TwiML
  def initialize(words: T.unsafe(nil), **keyword_args); end

  def break(strength: T.unsafe(nil), time: T.unsafe(nil), **keyword_args); end
  def emphasis(words: T.unsafe(nil), level: T.unsafe(nil), **keyword_args); end
  def lang(words: T.unsafe(nil), xmlLang: T.unsafe(nil), **keyword_args); end
  def phoneme(words, alphabet: T.unsafe(nil), ph: T.unsafe(nil), **keyword_args); end
  def prosody(words: T.unsafe(nil), volume: T.unsafe(nil), rate: T.unsafe(nil), pitch: T.unsafe(nil), **keyword_args); end
  def say_as(words, interpretAs: T.unsafe(nil), role: T.unsafe(nil), **keyword_args); end
  def sub(words, aliasAttribute: T.unsafe(nil), **keyword_args); end
  def w(words: T.unsafe(nil), role: T.unsafe(nil), **keyword_args); end
end

class Twilio::TwiML::SsmlSayAs < ::Twilio::TwiML::TwiML
  def initialize(words, **keyword_args); end
end

class Twilio::TwiML::SsmlSub < ::Twilio::TwiML::TwiML
  def initialize(words, **keyword_args); end
end

class Twilio::TwiML::SsmlW < ::Twilio::TwiML::TwiML
  def initialize(words: T.unsafe(nil), **keyword_args); end

  def break(strength: T.unsafe(nil), time: T.unsafe(nil), **keyword_args); end
  def emphasis(words: T.unsafe(nil), level: T.unsafe(nil), **keyword_args); end
  def phoneme(words, alphabet: T.unsafe(nil), ph: T.unsafe(nil), **keyword_args); end
  def prosody(words: T.unsafe(nil), volume: T.unsafe(nil), rate: T.unsafe(nil), pitch: T.unsafe(nil), **keyword_args); end
  def say_as(words, interpretAs: T.unsafe(nil), role: T.unsafe(nil), **keyword_args); end
  def sub(words, aliasAttribute: T.unsafe(nil), **keyword_args); end
end

class Twilio::TwiML::Start < ::Twilio::TwiML::TwiML
  def initialize(**keyword_args); end

  def siprec(name: T.unsafe(nil), connector_name: T.unsafe(nil), track: T.unsafe(nil), **keyword_args); end
  def stream(name: T.unsafe(nil), connector_name: T.unsafe(nil), url: T.unsafe(nil), track: T.unsafe(nil), status_callback: T.unsafe(nil), status_callback_method: T.unsafe(nil), **keyword_args); end
end

class Twilio::TwiML::Stop < ::Twilio::TwiML::TwiML
  def initialize(**keyword_args); end

  def siprec(name: T.unsafe(nil), connector_name: T.unsafe(nil), track: T.unsafe(nil), **keyword_args); end
  def stream(name: T.unsafe(nil), connector_name: T.unsafe(nil), url: T.unsafe(nil), track: T.unsafe(nil), status_callback: T.unsafe(nil), status_callback_method: T.unsafe(nil), **keyword_args); end
end

class Twilio::TwiML::Stream < ::Twilio::TwiML::TwiML
  def initialize(**keyword_args); end

  def parameter(name: T.unsafe(nil), value: T.unsafe(nil), **keyword_args); end
end

class Twilio::TwiML::Task < ::Twilio::TwiML::TwiML
  def initialize(body, **keyword_args); end
end

class Twilio::TwiML::Text < ::Twilio::TwiML::LeafNode
  def xml(document); end
end

class Twilio::TwiML::TwiML
  def initialize(**keyword_args); end

  def add_child(name, value = T.unsafe(nil), **keyword_args); end
  def add_text(content); end
  def append(verb); end
  def comment(body); end
  def name; end
  def name=(_arg0); end
  def to_s(xml_declaration = T.unsafe(nil)); end
  def to_xml(xml_declaration = T.unsafe(nil)); end
  def xml(document); end

  class << self
    def to_lower_camel_case(symbol); end
  end
end

class Twilio::TwiML::TwiMLError < ::StandardError; end

class Twilio::TwiML::VirtualAgent < ::Twilio::TwiML::TwiML
  def initialize(**keyword_args); end

  def config(name: T.unsafe(nil), value: T.unsafe(nil), **keyword_args); end
  def parameter(name: T.unsafe(nil), value: T.unsafe(nil), **keyword_args); end
end

class Twilio::TwiML::VoiceResponse < ::Twilio::TwiML::TwiML
  def initialize(**keyword_args); end

  def connect(action: T.unsafe(nil), method: T.unsafe(nil), **keyword_args); end
  def dial(number: T.unsafe(nil), action: T.unsafe(nil), method: T.unsafe(nil), timeout: T.unsafe(nil), hangup_on_star: T.unsafe(nil), time_limit: T.unsafe(nil), caller_id: T.unsafe(nil), record: T.unsafe(nil), trim: T.unsafe(nil), recording_status_callback: T.unsafe(nil), recording_status_callback_method: T.unsafe(nil), recording_status_callback_event: T.unsafe(nil), answer_on_bridge: T.unsafe(nil), ring_tone: T.unsafe(nil), recording_track: T.unsafe(nil), sequential: T.unsafe(nil), refer_url: T.unsafe(nil), refer_method: T.unsafe(nil), **keyword_args); end
  def echo(**keyword_args); end
  def enqueue(name: T.unsafe(nil), action: T.unsafe(nil), max_queue_size: T.unsafe(nil), method: T.unsafe(nil), wait_url: T.unsafe(nil), wait_url_method: T.unsafe(nil), workflow_sid: T.unsafe(nil), **keyword_args); end
  def gather(input: T.unsafe(nil), action: T.unsafe(nil), method: T.unsafe(nil), timeout: T.unsafe(nil), speech_timeout: T.unsafe(nil), max_speech_time: T.unsafe(nil), profanity_filter: T.unsafe(nil), finish_on_key: T.unsafe(nil), num_digits: T.unsafe(nil), partial_result_callback: T.unsafe(nil), partial_result_callback_method: T.unsafe(nil), language: T.unsafe(nil), hints: T.unsafe(nil), barge_in: T.unsafe(nil), debug: T.unsafe(nil), action_on_empty_result: T.unsafe(nil), speech_model: T.unsafe(nil), enhanced: T.unsafe(nil), **keyword_args); end
  def hangup(**keyword_args); end
  def leave(**keyword_args); end
  def pause(length: T.unsafe(nil), **keyword_args); end
  def pay(input: T.unsafe(nil), action: T.unsafe(nil), bank_account_type: T.unsafe(nil), status_callback: T.unsafe(nil), status_callback_method: T.unsafe(nil), timeout: T.unsafe(nil), max_attempts: T.unsafe(nil), security_code: T.unsafe(nil), postal_code: T.unsafe(nil), min_postal_code_length: T.unsafe(nil), payment_connector: T.unsafe(nil), payment_method: T.unsafe(nil), token_type: T.unsafe(nil), charge_amount: T.unsafe(nil), currency: T.unsafe(nil), description: T.unsafe(nil), valid_card_types: T.unsafe(nil), language: T.unsafe(nil), **keyword_args); end
  def play(url: T.unsafe(nil), loop: T.unsafe(nil), digits: T.unsafe(nil), **keyword_args); end
  def prompt(for_: T.unsafe(nil), error_type: T.unsafe(nil), card_type: T.unsafe(nil), attempt: T.unsafe(nil), require_matching_inputs: T.unsafe(nil), **keyword_args); end
  def queue(name, url: T.unsafe(nil), method: T.unsafe(nil), reservation_sid: T.unsafe(nil), post_work_activity_sid: T.unsafe(nil), **keyword_args); end
  def record(action: T.unsafe(nil), method: T.unsafe(nil), timeout: T.unsafe(nil), finish_on_key: T.unsafe(nil), max_length: T.unsafe(nil), play_beep: T.unsafe(nil), trim: T.unsafe(nil), recording_status_callback: T.unsafe(nil), recording_status_callback_method: T.unsafe(nil), recording_status_callback_event: T.unsafe(nil), transcribe: T.unsafe(nil), transcribe_callback: T.unsafe(nil), **keyword_args); end
  def redirect(url, method: T.unsafe(nil), **keyword_args); end
  def refer(action: T.unsafe(nil), method: T.unsafe(nil), **keyword_args); end
  def reject(reason: T.unsafe(nil), **keyword_args); end
  def say(message: T.unsafe(nil), voice: T.unsafe(nil), loop: T.unsafe(nil), language: T.unsafe(nil), **keyword_args); end
  def sms(message, to: T.unsafe(nil), from: T.unsafe(nil), action: T.unsafe(nil), method: T.unsafe(nil), status_callback: T.unsafe(nil), **keyword_args); end
  def start(action: T.unsafe(nil), method: T.unsafe(nil), **keyword_args); end
  def stop(**keyword_args); end
end

class Twilio::TwilioResponse
  def initialize(status_code, body); end

  def body; end
  def body=(_arg0); end
  def status_code; end
  def status_code=(_arg0); end
  def to_s; end
end

module Twilio::Util
  def get_string(obj); end
  def url_encode(hash); end
end

class Twilio::Util::Configuration
  def account_sid; end
  def account_sid=(value); end
  def auth_token; end
  def auth_token=(value); end
  def edge; end
  def edge=(value); end
  def http_client; end
  def http_client=(value); end
  def logger; end
  def logger=(value); end
  def region; end
  def region=(value); end
end

Twilio::VERSION = T.let(T.unsafe(nil), String)

class Twilio::Values
  class << self
    def of(hash); end
  end
end
