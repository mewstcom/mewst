# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `activerecord_cursor_paginate` gem.
# Please instead update this file by running `bin/tapioca gem activerecord_cursor_paginate`.

# source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate/version.rb#3
module ActiveRecordCursorPaginate
  class << self
    # source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate.rb#24
    def config; end

    # @yield [config]
    #
    # source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate.rb#20
    def configure; end
  end
end

# source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate/config.rb#4
class ActiveRecordCursorPaginate::Config
  # @return [Config] a new instance of Config
  #
  # source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate/config.rb#7
  def initialize; end

  # Returns the value of attribute default_page_size.
  #
  # source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate/config.rb#5
  def default_page_size; end

  # Sets the attribute default_page_size
  #
  # @param value the value to set the attribute default_page_size to.
  #
  # source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate/config.rb#5
  def default_page_size=(_arg0); end

  # Returns the value of attribute max_page_size.
  #
  # source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate/config.rb#5
  def max_page_size; end

  # Sets the attribute max_page_size
  #
  # @param value the value to set the attribute max_page_size to.
  #
  # source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate/config.rb#5
  def max_page_size=(_arg0); end
end

# @private
#
# source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate/cursor.rb#8
class ActiveRecordCursorPaginate::Cursor
  # @raise [ArgumentError]
  # @return [Cursor] a new instance of Cursor
  #
  # source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate/cursor.rb#50
  def initialize(columns:, values:); end

  # Returns the value of attribute columns.
  #
  # source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate/cursor.rb#48
  def columns; end

  # source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate/cursor.rb#58
  def encode; end

  # Returns the value of attribute values.
  #
  # source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate/cursor.rb#48
  def values; end

  class << self
    # source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate/cursor.rb#16
    def decode(cursor_string:, columns:); end

    # source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate/cursor.rb#10
    def from_record(record, columns:); end

    private

    # source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate/cursor.rb#38
    def deserialize_time_if_needed(value); end
  end
end

# something random
#
# source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate/cursor.rb#70
ActiveRecordCursorPaginate::Cursor::TIMESTAMP_PREFIX = T.let(T.unsafe(nil), String)

# source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate.rb#13
class ActiveRecordCursorPaginate::Error < ::StandardError; end

# source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate/extension.rb#4
module ActiveRecordCursorPaginate::Extension
  # Convenient method to use on ActiveRecord::Relation to get a paginator.
  #
  # @example
  #   paginator = Post.all.cursor_paginate(limit: 2, after: "Mg==")
  #   page = paginator.fetch
  # @return [ActiveRecordCursorPaginate::Paginator]
  #
  # source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate/extension.rb#12
  def cursor_paginate(after: T.unsafe(nil), before: T.unsafe(nil), limit: T.unsafe(nil), order: T.unsafe(nil)); end

  # Convenient method to use on ActiveRecord::Relation to get a paginator.
  #
  # @example
  #   paginator = Post.all.cursor_paginate(limit: 2, after: "Mg==")
  #   page = paginator.fetch
  # @return [ActiveRecordCursorPaginate::Paginator]
  #
  # source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate/extension.rb#12
  def cursor_pagination(after: T.unsafe(nil), before: T.unsafe(nil), limit: T.unsafe(nil), order: T.unsafe(nil)); end
end

# Error that gets raised if a cursor given as `before` or `after` cannot be
# properly parsed.
#
# source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate.rb#17
class ActiveRecordCursorPaginate::InvalidCursorError < ::ActiveRecordCursorPaginate::Error; end

# Represents a batch of records retrieved via a single iteration of
# cursor-based pagination.
#
# source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate/page.rb#7
class ActiveRecordCursorPaginate::Page
  # @return [Page] a new instance of Page
  #
  # source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate/page.rb#13
  def initialize(records, order_columns:, has_previous: T.unsafe(nil), has_next: T.unsafe(nil)); end

  # Number of records in this page.
  #
  # @return [Integer]
  #
  # source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate/page.rb#23
  def count; end

  # Returns the cursor, which can be used to retrieve the next page.
  #
  # @return [String]
  #
  # source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate/page.rb#37
  def cursor; end

  # Returns cursor for a specific record.
  #
  # @param record [ActiveRecord::Base]
  # @return [String]
  #
  # source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate/page.rb#68
  def cursor_for(record); end

  # Returns cursors for all the records on this page.
  #
  # @return [Array<String>]
  #
  # source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate/page.rb#75
  def cursors; end

  # Whether this page is empty.
  #
  # @return [Boolean]
  #
  # source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate/page.rb#30
  def empty?; end

  # Whether this page has a next page.
  #
  # @return [Boolean]
  #
  # source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate/page.rb#59
  def has_next?; end

  # Whether this page has a previous page.
  #
  # @return [Boolean]
  #
  # source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate/page.rb#52
  def has_previous?; end

  # Returns the cursor, which can be used to retrieve the next page.
  #
  # @return [String]
  #
  # source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate/page.rb#37
  def next_cursor; end

  # Returns the cursor, which can be used to retrieve the previous page.
  #
  # @return [String]
  #
  # source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate/page.rb#45
  def previous_cursor; end

  # Records this page contains.
  #
  # @return [ActiveRecord::Base]
  #
  # source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate/page.rb#11
  def records; end

  private

  # source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate/page.rb#80
  def cursor_for_record(record); end
end

# Use this Paginator class to effortlessly paginate through ActiveRecord
# relations using cursor pagination.
#
# @example Iterating one page at a time
#   ActiveRecordCursorPaginate::Paginator
#   .new(relation, order: :author, limit: 2, after: "WyJKYW5lIiw0XQ==")
#   .fetch
# @example Iterating over the whole relation
#   paginator = ActiveRecordCursorPaginate::Paginator
#   .new(relation, order: :author, limit: 2, after: "WyJKYW5lIiw0XQ==")
#
#   # Will lazily iterate over the pages.
#   paginator.pages.each do |page|
#   # do something with the page
#   end
#
# source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate/paginator.rb#21
class ActiveRecordCursorPaginate::Paginator
  # Create a new instance of the `ActiveRecordCursorPaginate::Paginator`
  #
  # @param relation [ActiveRecord::Relation] Relation that will be paginated.
  # @param before [String, nil] Cursor to paginate upto (excluding).
  # @param after [String, nil] Cursor to paginate forward from.
  # @param limit [Integer, nil] Number of records to return in pagination.
  # @param order [Symbol, String, nil, Array<Symbol, String>, Hash] Column(s) to order by, optionally with directions (either `:asc` or `:desc`,
  #   defaults to `:asc`). If none is provided, will default to ID column.
  #   NOTE: this will cause the query to filter on both the given column as
  #   well as the ID column. So you might want to add a compound index to your
  #   database similar to:
  #   ```sql
  #   CREATE INDEX <index_name> ON <table_name> (<order_fields>..., id)
  #   ```
  # @raise [ArgumentError] If any parameter is not valid
  # @return [Paginator] a new instance of Paginator
  #
  # source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate/paginator.rb#39
  def initialize(relation, before: T.unsafe(nil), after: T.unsafe(nil), limit: T.unsafe(nil), order: T.unsafe(nil)); end

  # Get the paginated result.
  #
  # @note Calling this method advances the paginator.
  # @return [ActiveRecordCursorPaginate::Page]
  #
  # source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate/paginator.rb#67
  def fetch; end

  # Get the paginated result.
  #
  # @note Calling this method advances the paginator.
  # @return [ActiveRecordCursorPaginate::Page]
  #
  # source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate/paginator.rb#67
  def page; end

  # Returns an enumerator that can be used to iterate over the whole relation.
  #
  # @return [Enumerator]
  #
  # source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate/paginator.rb#126
  def pages; end

  private

  # source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate/paginator.rb#205
  def advance_by_page(page); end

  # source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate/paginator.rb#160
  def apply_cursor(relation, cursor); end

  # source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate/paginator.rb#179
  def arel_column(column); end

  # source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate/paginator.rb#138
  def normalize_order(order); end

  # source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate/paginator.rb#189
  def pagination_direction(direction); end

  # source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate/paginator.rb#197
  def pagination_operator(direction); end
end

# source://activerecord_cursor_paginate//lib/activerecord_cursor_paginate/version.rb#4
ActiveRecordCursorPaginate::VERSION = T.let(T.unsafe(nil), String)
