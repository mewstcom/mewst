# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `json_schema` gem.
# Please instead update this file by running `bin/tapioca gem json_schema`.

# source://json_schema//lib/json_pointer/evaluator.rb#1
module JsonPointer
  class << self
    # source://json_schema//lib/json_pointer.rb#4
    def evaluate(data, path); end
  end
end

# Evaluates a JSON pointer within a JSON document.
#
# Note that this class is designed to evaluate references across a plain JSON
# data object _or_ an instance of `JsonSchema::Schema`, so the constructor's
# `data` argument can be of either type.
#
# source://json_schema//lib/json_pointer/evaluator.rb#7
class JsonPointer::Evaluator
  # @return [Evaluator] a new instance of Evaluator
  #
  # source://json_schema//lib/json_pointer/evaluator.rb#8
  def initialize(data); end

  # source://json_schema//lib/json_pointer/evaluator.rb#12
  def evaluate(original_path); end

  private

  # source://json_schema//lib/json_pointer/evaluator.rb#33
  def evaluate_segment(data, path_parts); end

  # custom split method to account for blank segments
  #
  # source://json_schema//lib/json_pointer/evaluator.rb#53
  def split(path); end

  # source://json_schema//lib/json_pointer/evaluator.rb#71
  def transform_key(key); end
end

# source://json_schema//lib/json_reference.rb#4
module JsonReference
  class << self
    # source://json_schema//lib/json_reference.rb#5
    def reference(ref); end
  end
end

# source://json_schema//lib/json_reference.rb#9
class JsonReference::Reference
  include ::Comparable

  # @return [Reference] a new instance of Reference
  #
  # source://json_schema//lib/json_reference.rb#15
  def initialize(ref); end

  # source://json_schema//lib/json_reference.rb#36
  def <=>(other); end

  # source://json_schema//lib/json_reference.rb#40
  def inspect; end

  # Returns the value of attribute pointer.
  #
  # source://json_schema//lib/json_reference.rb#12
  def pointer; end

  # Sets the attribute pointer
  #
  # @param value the value to set the attribute pointer to.
  #
  # source://json_schema//lib/json_reference.rb#12
  def pointer=(_arg0); end

  # Given the document addressed by #uri, resolves the JSON Pointer part of
  # the reference.
  #
  # source://json_schema//lib/json_reference.rb#46
  def resolve_pointer(data); end

  # source://json_schema//lib/json_reference.rb#50
  def to_s; end

  # Returns the value of attribute uri.
  #
  # source://json_schema//lib/json_reference.rb#13
  def uri; end

  # Sets the attribute uri
  #
  # @param value the value to set the attribute uri to.
  #
  # source://json_schema//lib/json_reference.rb#13
  def uri=(_arg0); end
end

# source://json_schema//lib/json_schema/attributes.rb#1
module JsonSchema
  class << self
    # source://json_schema//lib/json_schema.rb#15
    def configuration; end

    # @yield [configuration]
    #
    # source://json_schema//lib/json_schema.rb#11
    def configure; end

    # source://json_schema//lib/json_schema.rb#19
    def parse(data); end

    # source://json_schema//lib/json_schema.rb#28
    def parse!(data); end
  end
end

# source://json_schema//lib/json_schema/error.rb#5
class JsonSchema::AggregateError < ::JsonSchema::Error
  # @return [AggregateError] a new instance of AggregateError
  #
  # source://json_schema//lib/json_schema/error.rb#8
  def initialize(errors); end

  # Returns the value of attribute errors.
  #
  # source://json_schema//lib/json_schema/error.rb#6
  def errors; end

  # Sets the attribute errors
  #
  # @param value the value to set the attribute errors to.
  #
  # source://json_schema//lib/json_schema/error.rb#6
  def errors=(_arg0); end

  # source://json_schema//lib/json_schema/error.rb#12
  def to_s; end
end

# Attributes mixes in some useful attribute-related methods for use in
# defining schema classes in a spirit similar to Ruby's attr_accessor and
# friends.
#
# source://json_schema//lib/json_schema/attributes.rb#5
module JsonSchema::Attributes
  mixes_in_class_methods ::JsonSchema::Attributes::ClassMethods

  # Allows the values of schema attributes to be accessed with a symbol or a
  # string. So for example, the value of `schema.additional_items` could be
  # procured with `schema[:additionalItems]`. This only works for attributes
  # that are part of the JSON schema specification; other methods on the
  # class are not available (e.g. `expanded`.)
  #
  # This is implemented so that `JsonPointer::Evaluator` can evaluate a
  # reference on an sintance of this class (as well as plain JSON data).
  #
  # source://json_schema//lib/json_schema/attributes.rb#96
  def [](name); end

  # source://json_schema//lib/json_schema/attributes.rb#105
  def copy_from(schema); end

  # source://json_schema//lib/json_schema/attributes.rb#111
  def initialize_attrs; end

  class << self
    # @private
    #
    # source://json_schema//lib/json_schema/attributes.rb#83
    def included(klass); end
  end
end

# Provides class-level methods for the Attributes module.
#
# source://json_schema//lib/json_schema/attributes.rb#7
module JsonSchema::Attributes::ClassMethods
  # identical to attr_accessible, but allows us to copy in values from a
  # target schema to help preserve our hierarchy during reference expansion
  #
  # source://json_schema//lib/json_schema/attributes.rb#25
  def attr_copyable(attr, options = T.unsafe(nil)); end

  # source://json_schema//lib/json_schema/attributes.rb#59
  def attr_schema(attr, options = T.unsafe(nil)); end

  # Attributes that should be copied between classes when invoking
  # Attributes#copy_from.
  #
  # Hash contains instance variable names mapped to a default value for the
  # field.
  #
  # source://json_schema//lib/json_schema/attributes.rb#13
  def copyable_attrs; end

  # Directive indicating that attributes should be inherited from a parent
  # class.
  #
  # Must appear as first statement in class that mixes in (or whose parent
  # mixes in) the Attributes module.
  #
  # source://json_schema//lib/json_schema/attributes.rb#69
  def inherit_attrs; end

  # Initializes some class instance variables required to make other
  # methods in the Attributes module work. Run automatically when the
  # module is mixed into another class.
  #
  # source://json_schema//lib/json_schema/attributes.rb#77
  def initialize_attrs; end

  # Attributes that are part of the JSON schema and hyper-schema
  # specifications. These are allowed to be accessed with the [] operator.
  #
  # Hash contains the access key mapped to the name of the method that should
  # be invoked to retrieve a value. For example, `type` maps to `type` and
  # `additionalItems` maps to `additional_items`.
  #
  # source://json_schema//lib/json_schema/attributes.rb#21
  def schema_attrs; end
end

# source://json_schema//lib/json_schema/configuration.rb#2
class JsonSchema::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://json_schema//lib/json_schema/configuration.rb#24
  def initialize; end

  # Returns the value of attribute all_of_sub_errors.
  #
  # source://json_schema//lib/json_schema/configuration.rb#3
  def all_of_sub_errors; end

  # Sets the attribute all_of_sub_errors
  #
  # @param value the value to set the attribute all_of_sub_errors to.
  #
  # source://json_schema//lib/json_schema/configuration.rb#3
  def all_of_sub_errors=(_arg0); end

  # Returns the value of attribute custom_formats.
  #
  # source://json_schema//lib/json_schema/configuration.rb#4
  def custom_formats; end

  # source://json_schema//lib/json_schema/configuration.rb#11
  def register_format(name, validator_proc); end

  # Used for testing.
  #
  # source://json_schema//lib/json_schema/configuration.rb#16
  def reset!; end

  # Returns the value of attribute validate_regex_with.
  #
  # source://json_schema//lib/json_schema/configuration.rb#5
  def validate_regex_with; end

  # source://json_schema//lib/json_schema/configuration.rb#7
  def validate_regex_with=(validator); end
end

# The document store helps resolve URI-based JSON pointers by storing IDs
# that we've seen in the schema.
#
# Each URI tuple also contains a pointer map that helps speed up expansions
# that have already happened and handles cyclic dependencies. Store a
# reference to the top-level schema before doing anything else.
#
# source://json_schema//lib/json_schema/document_store.rb#8
class JsonSchema::DocumentStore
  include ::Enumerable

  # @return [DocumentStore] a new instance of DocumentStore
  #
  # source://json_schema//lib/json_schema/document_store.rb#11
  def initialize; end

  # @raise [ArgumentError]
  #
  # source://json_schema//lib/json_schema/document_store.rb#15
  def add_schema(schema); end

  # source://json_schema//lib/json_schema/document_store.rb#21
  def each; end

  # source://json_schema//lib/json_schema/document_store.rb#25
  def lookup_schema(uri); end
end

# source://json_schema//lib/json_schema/error.rb#2
class JsonSchema::Error < ::RuntimeError; end

# source://json_schema//lib/json_schema/error.rb#61
module JsonSchema::ErrorFormatter
  private

  # source://json_schema//lib/json_schema/error.rb#62
  def to_list(list); end

  class << self
    # source://json_schema//lib/json_schema/error.rb#62
    def to_list(list); end
  end
end

# source://json_schema//lib/json_schema/parser.rb#5
class JsonSchema::Parser
  # Returns the value of attribute errors.
  #
  # source://json_schema//lib/json_schema/parser.rb#24
  def errors; end

  # Sets the attribute errors
  #
  # @param value the value to set the attribute errors to.
  #
  # source://json_schema//lib/json_schema/parser.rb#24
  def errors=(_arg0); end

  # Basic parsing of a schema. May return a malformed schema! (Use `#parse!`
  # to raise errors instead).
  #
  # source://json_schema//lib/json_schema/parser.rb#28
  def parse(data, parent = T.unsafe(nil)); end

  # source://json_schema//lib/json_schema/parser.rb#41
  def parse!(data, parent = T.unsafe(nil)); end

  private

  # source://json_schema//lib/json_schema/parser.rb#51
  def build_uri(id, parent_uri); end

  # source://json_schema//lib/json_schema/parser.rb#77
  def parse_additional_items(schema); end

  # source://json_schema//lib/json_schema/parser.rb#92
  def parse_additional_properties(schema); end

  # source://json_schema//lib/json_schema/parser.rb#107
  def parse_all_of(schema); end

  # source://json_schema//lib/json_schema/parser.rb#114
  def parse_any_of(schema); end

  # source://json_schema//lib/json_schema/parser.rb#128
  def parse_data(data, parent, fragment); end

  # source://json_schema//lib/json_schema/parser.rb#146
  def parse_definitions(schema); end

  # source://json_schema//lib/json_schema/parser.rb#157
  def parse_dependencies(schema); end

  # source://json_schema//lib/json_schema/parser.rb#174
  def parse_items(schema); end

  # source://json_schema//lib/json_schema/parser.rb#187
  def parse_links(schema); end

  # source://json_schema//lib/json_schema/parser.rb#223
  def parse_media(schema); end

  # source://json_schema//lib/json_schema/parser.rb#231
  def parse_not(schema); end

  # source://json_schema//lib/json_schema/parser.rb#121
  def parse_one_of(schema); end

  # source://json_schema//lib/json_schema/parser.rb#237
  def parse_pattern_properties(schema); end

  # source://json_schema//lib/json_schema/parser.rb#259
  def parse_properties(schema); end

  # source://json_schema//lib/json_schema/parser.rb#248
  def parse_regex(schema, regex); end

  # source://json_schema//lib/json_schema/parser.rb#270
  def parse_schema(data, parent, fragment); end

  # source://json_schema//lib/json_schema/parser.rb#377
  def validate_format(schema, format); end

  # source://json_schema//lib/json_schema/parser.rb#355
  def validate_known_type!(schema); end

  # source://json_schema//lib/json_schema/parser.rb#364
  def validate_type(schema, types, field); end
end

# source://json_schema//lib/json_schema/parser.rb#6
JsonSchema::Parser::ALLOWED_TYPES = T.let(T.unsafe(nil), Array)

# source://json_schema//lib/json_schema/parser.rb#7
JsonSchema::Parser::BOOLEAN = T.let(T.unsafe(nil), Array)

# Reuse these frozen objects to avoid allocations
#
# source://json_schema//lib/json_schema/parser.rb#21
JsonSchema::Parser::EMPTY_ARRAY = T.let(T.unsafe(nil), Array)

# source://json_schema//lib/json_schema/parser.rb#22
JsonSchema::Parser::EMPTY_HASH = T.let(T.unsafe(nil), Hash)

# source://json_schema//lib/json_schema/parser.rb#8
JsonSchema::Parser::FORMATS = T.let(T.unsafe(nil), Array)

# source://json_schema//lib/json_schema/parser.rb#9
JsonSchema::Parser::FRIENDLY_TYPES = T.let(T.unsafe(nil), Hash)

# source://json_schema//lib/json_schema/reference_expander.rb#4
class JsonSchema::ReferenceExpander
  # Returns the value of attribute errors.
  #
  # source://json_schema//lib/json_schema/reference_expander.rb#5
  def errors; end

  # Sets the attribute errors
  #
  # @param value the value to set the attribute errors to.
  #
  # source://json_schema//lib/json_schema/reference_expander.rb#5
  def errors=(_arg0); end

  # source://json_schema//lib/json_schema/reference_expander.rb#8
  def expand(schema, options = T.unsafe(nil)); end

  # source://json_schema//lib/json_schema/reference_expander.rb#41
  def expand!(schema, options = T.unsafe(nil)); end

  # Returns the value of attribute store.
  #
  # source://json_schema//lib/json_schema/reference_expander.rb#6
  def store; end

  # Sets the attribute store
  #
  # @param value the value to set the attribute store to.
  #
  # source://json_schema//lib/json_schema/reference_expander.rb#6
  def store=(_arg0); end

  private

  # source://json_schema//lib/json_schema/reference_expander.rb#50
  def add_reference(schema); end

  # source://json_schema//lib/json_schema/reference_expander.rb#68
  def build_schema_paths(uri, schema); end

  # source://json_schema//lib/json_schema/reference_expander.rb#87
  def dereference(ref_schema, ref_stack, parent_ref: T.unsafe(nil)); end

  # source://json_schema//lib/json_schema/reference_expander.rb#188
  def lookup_pointer(uri, pointer); end

  # source://json_schema//lib/json_schema/reference_expander.rb#193
  def lookup_reference(uri); end

  # source://json_schema//lib/json_schema/reference_expander.rb#201
  def resolve_pointer(ref_schema, resolved_schema); end

  # source://json_schema//lib/json_schema/reference_expander.rb#236
  def resolve_reference(ref_schema); end

  # source://json_schema//lib/json_schema/reference_expander.rb#274
  def resolve_uri(ref_schema, uri); end

  # source://json_schema//lib/json_schema/reference_expander.rb#284
  def schema_children(schema); end

  # source://json_schema//lib/json_schema/reference_expander.rb#341
  def traverse_schema(schema); end

  # source://json_schema//lib/json_schema/reference_expander.rb#326
  def unresolved_refs(schema); end
end

# source://json_schema//lib/json_schema/schema.rb#4
class JsonSchema::Schema
  include ::JsonSchema::Attributes
  extend ::JsonSchema::Attributes::ClassMethods

  # @return [Schema] a new instance of Schema
  #
  # source://json_schema//lib/json_schema/schema.rb#17
  def initialize; end

  # source://json_schema//lib/json_schema/attributes.rb#40
  def additional_items; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def additional_items=(_arg0); end

  # allow booleans to be access with question mark
  #
  # source://json_schema//lib/json_schema/attributes.rb#40
  def additional_items?; end

  # source://json_schema//lib/json_schema/attributes.rb#40
  def additional_properties; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def additional_properties=(_arg0); end

  # source://json_schema//lib/json_schema/attributes.rb#40
  def all_of; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def all_of=(_arg0); end

  # source://json_schema//lib/json_schema/attributes.rb#40
  def any_of; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def any_of=(_arg0); end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def clones; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def clones=(_arg0); end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def data; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def data=(_arg0); end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def default; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def default=(_arg0); end

  # source://json_schema//lib/json_schema/attributes.rb#40
  def definitions; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def definitions=(_arg0); end

  # source://json_schema//lib/json_schema/attributes.rb#40
  def dependencies; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def dependencies=(_arg0); end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def description; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def description=(_arg0); end

  # source://json_schema//lib/json_schema/attributes.rb#40
  def enc_type; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def enc_type=(_arg0); end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def enum; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def enum=(_arg0); end

  # source://json_schema//lib/json_schema/schema.rb#198
  def expand_references(options = T.unsafe(nil)); end

  # source://json_schema//lib/json_schema/schema.rb#207
  def expand_references!(options = T.unsafe(nil)); end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def expanded; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def expanded=(_arg0); end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def expanded?; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def format; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def format=(_arg0); end

  # Fragment of a JSON Pointer that can help us build a pointer back to this
  # schema for debugging.
  #
  # source://json_schema//lib/json_schema/schema.rb#31
  def fragment; end

  # Fragment of a JSON Pointer that can help us build a pointer back to this
  # schema for debugging.
  #
  # source://json_schema//lib/json_schema/schema.rb#31
  def fragment=(_arg0); end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def href; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def href=(_arg0); end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def id; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def id=(_arg0); end

  # source://json_schema//lib/json_schema/schema.rb#220
  def inspect; end

  # source://json_schema//lib/json_schema/schema.rb#224
  def inspect_schema; end

  # source://json_schema//lib/json_schema/schema.rb#253
  def inspect_value(value); end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def items; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def items=(_arg0); end

  # source://json_schema//lib/json_schema/attributes.rb#40
  def links; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def links=(_arg0); end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def max; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def max=(_arg0); end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def max_exclusive; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def max_exclusive=(_arg0); end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def max_exclusive?; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def max_items; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def max_items=(_arg0); end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def max_length; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def max_length=(_arg0); end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def max_properties; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def max_properties=(_arg0); end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def media; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def media=(_arg0); end

  # source://json_schema//lib/json_schema/attributes.rb#40
  def media_type; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def media_type=(_arg0); end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def method; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def method=(_arg0); end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def min; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def min=(_arg0); end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def min_exclusive; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def min_exclusive=(_arg0); end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def min_exclusive?; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def min_items; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def min_items=(_arg0); end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def min_length; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def min_length=(_arg0); end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def min_properties; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def min_properties=(_arg0); end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def multiple_of; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def multiple_of=(_arg0); end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def not; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def not=(_arg0); end

  # source://json_schema//lib/json_schema/attributes.rb#40
  def one_of; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def one_of=(_arg0); end

  # @return [Boolean]
  #
  # source://json_schema//lib/json_schema/schema.rb#261
  def original?; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def parent; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def parent=(_arg0); end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def path_start; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def path_start=(_arg0); end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def pattern; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def pattern=(_arg0); end

  # source://json_schema//lib/json_schema/attributes.rb#40
  def pattern_properties; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def pattern_properties=(_arg0); end

  # source://json_schema//lib/json_schema/schema.rb#265
  def pointer; end

  # source://json_schema//lib/json_schema/attributes.rb#40
  def properties; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def properties=(_arg0); end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def read_only; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def read_only=(_arg0); end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def read_only?; end

  # Rather than a normal schema, the node may be a JSON Reference. In this
  # case, no other attributes will be filled in except for #parent.
  #
  # source://json_schema//lib/json_schema/schema.rb#35
  def reference; end

  # Rather than a normal schema, the node may be a JSON Reference. In this
  # case, no other attributes will be filled in except for #parent.
  #
  # source://json_schema//lib/json_schema/schema.rb#35
  def reference=(_arg0); end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def rel; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def rel=(_arg0); end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def required; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def required=(_arg0); end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def schema; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def schema=(_arg0); end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def strict_properties; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def strict_properties=(_arg0); end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def target_schema; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def target_schema=(_arg0); end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def title; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def title=(_arg0); end

  # source://json_schema//lib/json_schema/attributes.rb#40
  def type; end

  # source://json_schema//lib/json_schema/attributes.rb#52
  def type=(value); end

  # An array of Ruby classes that are equivalent to the types defined in the
  # schema.
  #
  # Type: Array[Class]
  #
  # source://json_schema//lib/json_schema/schema.rb#216
  def type_parsed; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def unique_items; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def unique_items=(_arg0); end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def unique_items?; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def uri; end

  # source://json_schema//lib/json_schema/attributes.rb#26
  def uri=(_arg0); end

  # source://json_schema//lib/json_schema/schema.rb#273
  def validate(data, fail_fast: T.unsafe(nil)); end

  # source://json_schema//lib/json_schema/schema.rb#279
  def validate!(data, fail_fast: T.unsafe(nil)); end
end

# Link subobject for a hyperschema.
#
# source://json_schema//lib/json_schema/schema.rb#284
class JsonSchema::Schema::Link < ::JsonSchema::Schema; end

# Media type subobject for a hyperschema.
#
# source://json_schema//lib/json_schema/schema.rb#289
class JsonSchema::Schema::Media
  # Returns the value of attribute binary_encoding.
  #
  # source://json_schema//lib/json_schema/schema.rb#290
  def binary_encoding; end

  # Sets the attribute binary_encoding
  #
  # @param value the value to set the attribute binary_encoding to.
  #
  # source://json_schema//lib/json_schema/schema.rb#290
  def binary_encoding=(_arg0); end

  # Returns the value of attribute type.
  #
  # source://json_schema//lib/json_schema/schema.rb#291
  def type; end

  # Sets the attribute type
  #
  # @param value the value to set the attribute type to.
  #
  # source://json_schema//lib/json_schema/schema.rb#291
  def type=(_arg0); end
end

# source://json_schema//lib/json_schema/schema.rb#5
JsonSchema::Schema::TYPE_MAP = T.let(T.unsafe(nil), Hash)

# source://json_schema//lib/json_schema/error.rb#17
class JsonSchema::SchemaError < ::JsonSchema::Error
  # @return [SchemaError] a new instance of SchemaError
  #
  # source://json_schema//lib/json_schema/error.rb#24
  def initialize(schema, message, type); end

  # Returns the value of attribute message.
  #
  # source://json_schema//lib/json_schema/error.rb#18
  def message; end

  # Sets the attribute message
  #
  # @param value the value to set the attribute message to.
  #
  # source://json_schema//lib/json_schema/error.rb#18
  def message=(_arg0); end

  # Returns the value of attribute schema.
  #
  # source://json_schema//lib/json_schema/error.rb#18
  def schema; end

  # Sets the attribute schema
  #
  # @param value the value to set the attribute schema to.
  #
  # source://json_schema//lib/json_schema/error.rb#18
  def schema=(_arg0); end

  # source://json_schema//lib/json_schema/error.rb#30
  def to_s; end

  # Returns the value of attribute type.
  #
  # source://json_schema//lib/json_schema/error.rb#18
  def type; end

  # Sets the attribute type
  #
  # @param value the value to set the attribute type to.
  #
  # source://json_schema//lib/json_schema/error.rb#18
  def type=(_arg0); end

  class << self
    # source://json_schema//lib/json_schema/error.rb#20
    def aggregate(errors); end
  end
end

# source://json_schema//lib/json_schema/error.rb#39
class JsonSchema::ValidationError < ::JsonSchema::SchemaError
  # @return [ValidationError] a new instance of ValidationError
  #
  # source://json_schema//lib/json_schema/error.rb#42
  def initialize(schema, path, message, type, options = T.unsafe(nil)); end

  # Returns the value of attribute data.
  #
  # source://json_schema//lib/json_schema/error.rb#40
  def data; end

  # Sets the attribute data
  #
  # @param value the value to set the attribute data to.
  #
  # source://json_schema//lib/json_schema/error.rb#40
  def data=(_arg0); end

  # Returns the value of attribute path.
  #
  # source://json_schema//lib/json_schema/error.rb#40
  def path; end

  # Sets the attribute path
  #
  # @param value the value to set the attribute path to.
  #
  # source://json_schema//lib/json_schema/error.rb#40
  def path=(_arg0); end

  # source://json_schema//lib/json_schema/error.rb#52
  def pointer; end

  # Returns the value of attribute sub_errors.
  #
  # source://json_schema//lib/json_schema/error.rb#40
  def sub_errors; end

  # Sets the attribute sub_errors
  #
  # @param value the value to set the attribute sub_errors to.
  #
  # source://json_schema//lib/json_schema/error.rb#40
  def sub_errors=(_arg0); end

  # source://json_schema//lib/json_schema/error.rb#56
  def to_s; end
end

# source://json_schema//lib/json_schema/validator.rb#4
class JsonSchema::Validator
  # @return [Validator] a new instance of Validator
  #
  # source://json_schema//lib/json_schema/validator.rb#7
  def initialize(schema); end

  # Returns the value of attribute errors.
  #
  # source://json_schema//lib/json_schema/validator.rb#5
  def errors; end

  # Sets the attribute errors
  #
  # @param value the value to set the attribute errors to.
  #
  # source://json_schema//lib/json_schema/validator.rb#5
  def errors=(_arg0); end

  # source://json_schema//lib/json_schema/validator.rb#11
  def validate(data, fail_fast: T.unsafe(nil)); end

  # source://json_schema//lib/json_schema/validator.rb#33
  def validate!(data, fail_fast: T.unsafe(nil)); end

  private

  # source://json_schema//lib/json_schema/validator.rb#77
  def fast_and(valid_old, valid_new); end

  # source://json_schema//lib/json_schema/validator.rb#550
  def find_parent(schema); end

  # source://json_schema//lib/json_schema/validator.rb#41
  def first_visit(schema, errors, path); end

  # for use with additionalProperties and strictProperties
  #
  # source://json_schema//lib/json_schema/validator.rb#60
  def get_extra_keys(schema, data); end

  # works around &&'s "lazy" behavior
  #
  # source://json_schema//lib/json_schema/validator.rb#73
  def strict_and(valid_old, valid_new); end

  # source://json_schema//lib/json_schema/validator.rb#135
  def validate_additional_properties(schema, data, errors, path); end

  # source://json_schema//lib/json_schema/validator.rb#155
  def validate_all_of(schema, data, errors, path); end

  # source://json_schema//lib/json_schema/validator.rb#182
  def validate_any_of(schema, data, errors, path); end

  # source://json_schema//lib/json_schema/validator.rb#82
  def validate_data(schema, data, errors, path); end

  # source://json_schema//lib/json_schema/validator.rb#201
  def validate_dependencies(schema, data, errors, path); end

  # source://json_schema//lib/json_schema/validator.rb#231
  def validate_enum(schema, data, errors, path); end

  # source://json_schema//lib/json_schema/validator.rb#242
  def validate_extra(schema, data, errors, path); end

  # source://json_schema//lib/json_schema/validator.rb#216
  def validate_format(schema, data, errors, path); end

  # source://json_schema//lib/json_schema/validator.rb#257
  def validate_items(schema, data, errors, path); end

  # source://json_schema//lib/json_schema/validator.rb#300
  def validate_max(schema, data, errors, path); end

  # source://json_schema//lib/json_schema/validator.rb#315
  def validate_max_items(schema, data, errors, path); end

  # source://json_schema//lib/json_schema/validator.rb#330
  def validate_max_length(schema, data, errors, path); end

  # source://json_schema//lib/json_schema/validator.rb#345
  def validate_max_properties(schema, data, errors, path); end

  # source://json_schema//lib/json_schema/validator.rb#360
  def validate_min(schema, data, errors, path); end

  # source://json_schema//lib/json_schema/validator.rb#375
  def validate_min_items(schema, data, errors, path); end

  # source://json_schema//lib/json_schema/validator.rb#390
  def validate_min_length(schema, data, errors, path); end

  # source://json_schema//lib/json_schema/validator.rb#405
  def validate_min_properties(schema, data, errors, path); end

  # source://json_schema//lib/json_schema/validator.rb#420
  def validate_multiple_of(schema, data, errors, path); end

  # source://json_schema//lib/json_schema/validator.rb#458
  def validate_not(schema, data, errors, path); end

  # source://json_schema//lib/json_schema/validator.rb#431
  def validate_one_of(schema, data, errors, path); end

  # source://json_schema//lib/json_schema/validator.rb#470
  def validate_pattern(schema, data, errors, path); end

  # source://json_schema//lib/json_schema/validator.rb#482
  def validate_pattern_properties(schema, data, errors, path); end

  # source://json_schema//lib/json_schema/validator.rb#496
  def validate_properties(schema, data, errors, path); end

  # source://json_schema//lib/json_schema/validator.rb#507
  def validate_required(schema, data, errors, path, required); end

  # source://json_schema//lib/json_schema/validator.rb#520
  def validate_strict_properties(schema, data, errors, path); end

  # source://json_schema//lib/json_schema/validator.rb#527
  def validate_type(schema, data, errors, path); end

  # source://json_schema//lib/json_schema/validator.rb#539
  def validate_unique_items(schema, data, errors, path); end
end

# source://json_schema//lib/json_schema/validator.rb#594
JsonSchema::Validator::DATE_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://json_schema//lib/json_schema/validator.rb#596
JsonSchema::Validator::DATE_TIME_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://json_schema//lib/json_schema/validator.rb#569
JsonSchema::Validator::DEFAULT_FORMAT_VALIDATORS = T.let(T.unsafe(nil), Hash)

# source://json_schema//lib/json_schema/validator.rb#590
JsonSchema::Validator::EMAIL_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://json_schema//lib/json_schema/validator.rb#592
JsonSchema::Validator::HOSTNAME_PATTERN = T.let(T.unsafe(nil), Regexp)

# from: http://stackoverflow.com/a/17871737
#
# source://json_schema//lib/json_schema/validator.rb#599
JsonSchema::Validator::IPV4_PATTERN = T.let(T.unsafe(nil), Regexp)

# from: http://stackoverflow.com/a/17871737
#
# source://json_schema//lib/json_schema/validator.rb#602
JsonSchema::Validator::IPV6_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://json_schema//lib/json_schema/validator.rb#604
JsonSchema::Validator::UUID_PATTERN = T.let(T.unsafe(nil), Regexp)
