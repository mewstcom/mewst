# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `google-cloud-core` gem.
# Please instead update this file by running `bin/tapioca gem google-cloud-core`.

# # Google Cloud
#
# The google-cloud library is the official library for interacting with Google
# Cloud Platform. Google Cloud Platform is a set of modular cloud-based services
# that allow you to create anything from simple websites to complex
# applications.
#
# The goal of google-cloud is to provide an API that is comfortable to
# Rubyists. Your authentication credentials are detected automatically in
# Google Cloud Platform environments such as Google Compute Engine, Google
# App Engine and Google Kubernetes Engine. In other environments you can
# configure authentication easily, either directly in your code or via
# environment variables. Read more about the options for connecting in the
# {file:AUTHENTICATION.md Authentication Guide}.
#
# source://google-cloud-core//lib/google/cloud/config.rb#16
module Google; end

# source://google-cloud-core//lib/google/cloud/config.rb#17
module Google::Cloud
  # source://google-cloud-pubsub/2.15.1/lib/google-cloud-pubsub.rb#63
  def pubsub(scope: T.unsafe(nil), timeout: T.unsafe(nil)); end

  class << self
    # Find all google-cloud-* files for available gems.
    #
    # @private
    #
    # source://google-cloud-core//lib/google/cloud.rb#158
    def auto_load_files; end

    # Safely load all google-cloud-* gems.
    #
    # @private
    #
    # source://google-cloud-core//lib/google/cloud.rb#128
    def auto_load_gems; end

    # Configure the default parameter for Google::Cloud. The values defined on
    # this top level will be shared across all Google::Cloud libraries, which
    # may also add fields to this object or add sub configuration options under
    # this object.
    #
    # Possible configuration parameters:
    #
    # * `project_id`: The Google Cloud Project ID. Automatically discovered
    #                 when running from GCP environments.
    # * `credentials`: The service account JSON file path. Automatically
    #                  discovered when running from GCP environments.
    # * `on_error`: A Proc to be run when an error is encountered during on a
    #               background thread. The Proc must take the error object as
    #               the single argument.
    #
    # @return [Google::Cloud::Config] The top-level configuration object for
    #   Google::Cloud libraries.
    # @yield [@config]
    #
    # source://google-cloud-core//lib/google/cloud.rb#91
    def configure; end

    # source://google-cloud-env/1.6.0/lib/google/cloud/env.rb#490
    def env; end

    # Initialize toplevel configuration
    #
    # @private
    #
    # source://google-cloud-core//lib/google/cloud.rb#103
    def init_configuration; end

    # Find files that are currently loaded.
    #
    # @private
    #
    # source://google-cloud-core//lib/google/cloud.rb#142
    def loaded_files; end

    # Creates a new object for connecting to Google Cloud.
    #
    # For more information on connecting to Google Cloud see the
    # {file:AUTHENTICATION.md Authentication Guide}.
    #
    # @example
    #   require "google/cloud"
    #
    #   gcloud  = Google::Cloud.new
    #   datastore = gcloud.datastore
    #   pubsub  = gcloud.pubsub
    #   storage = gcloud.storage
    # @param project_id [String] Project identifier for the service you are
    #   connecting to.
    # @param credentials [String, Hash, Google::Auth::Credentials] The path to
    #   the keyfile as a String, the contents of the keyfile as a Hash, or a
    #   Google::Auth::Credentials object.
    # @param retries [Integer] Number of times to retry requests on server
    #   error. The default value is `3`. Optional.
    # @param timeout [Integer] Default timeout to use in requests. Optional.
    # @return [Google::Cloud]
    #
    # source://google-cloud-core//lib/google/cloud.rb#62
    def new(project_id = T.unsafe(nil), credentials = T.unsafe(nil), retries: T.unsafe(nil), timeout: T.unsafe(nil)); end

    # source://google-cloud-pubsub/2.15.1/lib/google-cloud-pubsub.rb#102
    def pubsub(project_id = T.unsafe(nil), credentials = T.unsafe(nil), scope: T.unsafe(nil), timeout: T.unsafe(nil)); end
  end
end

# Configuration mechanism for Google Cloud libraries. A Config object
# contains a list of predefined keys, some of which are values and others
# of which are subconfigurations, i.e. categories. Field access is
# generally validated to ensure that the field is defined, and when a
# a value is set, it is validated for the correct type. Warnings are
# printed when a validation fails.
#
# You generally access fields and subconfigs by calling accessor methods.
# Methods meant for "administration" such as adding options, are named
# with a trailing "!" or "?" so they don't pollute the method namespace.
# It is also possible to access a field using the `[]` operator.
#
# Note that config objects inherit from `BasicObject`. This means it does
# not define many methods you might expect to find in most Ruby objects.
# For example, `to_s`, `inspect`, `is_a?`, `instance_variable_get`, and so
# forth.
#
# @example
#   require "google/cloud/config"
#
#   config = Google::Cloud::Config.create do |c|
#   c.add_field! :opt1, 10
#   c.add_field! :opt2, :one, enum: [:one, :two, :three]
#   c.add_field! :opt3, "hi", match: [String, Symbol]
#   c.add_field! :opt4, "hi", match: /^[a-z]+$/, allow_nil: true
#   c.add_config! :sub do |c2|
#   c2.add_field! :opt5, false
#   end
#   end
#
#   config.opt1             #=> 10
#   config.opt1 = 20        #=> 20
#   config.opt1             #=> 20
#   config.opt1 = "hi"      #=> "hi" (but prints a warning)
#   config.opt1 = nil       #=> nil (but prints a warning)
#
#   config.opt2             #=> :one
#   config.opt2 = :two      #=> :two
#   config.opt2             #=> :two
#   config.opt2 = :four     #=> :four (but prints a warning)
#
#   config.opt3             #=> "hi"
#   config.opt3 = "hiho"    #=> "hiho"
#   config.opt3             #=> "hiho"
#   config.opt3 = "HI"      #=> "HI" (but prints a warning)
#
#   config.opt4             #=> "yo"
#   config.opt4 = :yo       #=> :yo (Strings and Symbols allowed)
#   config.opt4             #=> :yo
#   config.opt4 = 3.14      #=> 3.14 (but prints a warning)
#   config.opt4 = nil       #=> nil (no warning: nil allowed)
#
#   config.sub              #=> <Google::Cloud::Config>
#
#   config.sub.opt5         #=> false
#   config.sub.opt5 = true  #=> true  (true and false allowed)
#   config.sub.opt5         #=> true
#   config.sub.opt5 = nil   #=> nil (but prints a warning)
#
#   config.opt9 = "hi"      #=> "hi" (warning about unknown key)
#   config.opt9             #=> "hi" (no warning: key now known)
#   config.sub.opt9         #=> nil (warning about unknown key)
#
# source://google-cloud-core//lib/google/cloud/config.rb#82
class Google::Cloud::Config < ::BasicObject
  # Internal constructor. Generally you should not call `new` directly,
  # but instead use the `Config.create` method. The initializer is used
  # directly by a few older clients that expect a legacy interface.
  #
  # @private
  # @return [Config] a new instance of Config
  #
  # source://google-cloud-core//lib/google/cloud/config.rb#115
  def initialize(legacy_categories = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Get the option or subconfig with the given name.
  #
  # @param key [Symbol, String] The option or subconfig name
  # @return [Object] The option value or subconfig object
  #
  # source://google-cloud-core//lib/google/cloud/config.rb#309
  def [](key); end

  # Assign an option with the given name to the given value.
  #
  # @param key [Symbol, String] The option name
  # @param value [Object] The new option value
  #
  # source://google-cloud-core//lib/google/cloud/config.rb#297
  def []=(key, value); end

  # Cause a key to be an alias of another key. The two keys will refer to
  # the same field.
  #
  # source://google-cloud-core//lib/google/cloud/config.rb#235
  def add_alias!(key, to_key); end

  # Add a subconfiguration field to this configuration.
  #
  # You must provide a key, which becomes the method name that you use to
  # navigate to the subconfig. Names may comprise only letters, numerals,
  # and underscores, and must begin with a letter.
  #
  # If you provide a block, the subconfig object is passed to the block,
  # so you can easily add fields to the subconfig.
  #
  # You may also pass in a config object that already exists. This will
  # "attach" that configuration in this location.
  #
  # @param key [String, Symbol] The name of the subconfig
  # @param config [Config] A config object to attach here. If not provided,
  #   creates a new config.
  # @return [Config] self for chaining
  #
  # source://google-cloud-core//lib/google/cloud/config.rb#218
  def add_config!(key, config = T.unsafe(nil), &block); end

  # Add a value field to this configuration.
  #
  # You must provide a key, which becomes the field name in this config.
  # Field names may comprise only letters, numerals, and underscores, and
  # must begin with a letter. This will create accessor methods for the
  # new configuration key.
  #
  # You may pass an initial value (which defaults to nil if not provided).
  #
  # You may also specify how values are validated. Validation is defined
  # as follows:
  #
  # *   If you provide a block or a `:validator` option, it is used as the
  #     validator. A proposed value is passed to the proc, which should
  #     return `true` or `false` to indicate whether the value is valid.
  # *   If you provide a `:match` option, it is compared to the proposed
  #     value using the `===` operator. You may, for example, provide a
  #     class, a regular expression, or a range. If you pass an array,
  #     the value is accepted if _any_ of the elements match.
  # *   If you provide an `:enum` option, it should be an `Enumerable`.
  #     A proposed value is valid if it is included.
  # *   Otherwise if you do not provide any of the above options, then a
  #     default validation strategy is inferred from the initial value:
  #     *   If the initial is `true` or `false`, then either boolean value
  #         is considered valid. This is the same as `enum: [true, false]`.
  #     *   If the initial is `nil`, then any object is considered valid.
  #     *   Otherwise, any object of the same class as the initial value is
  #         considered valid. This is effectively the same as
  #         `match: initial.class`.
  # *   You may also provide the `:allow_nil` option, which, if set to
  #     true, alters any of the above validators to allow `nil` values.
  #
  # In many cases, you may find that the default validation behavior
  # (interpreted from the initial value) is sufficient. If you want to
  # accept any value, use `match: Object`.
  #
  # @param key [String, Symbol] The name of the option
  # @param initial [Object] Initial value (defaults to nil)
  # @param opts [Hash] Validation options
  # @return [Config] self for chaining
  #
  # source://google-cloud-core//lib/google/cloud/config.rb#188
  def add_field!(key, initial = T.unsafe(nil), opts = T.unsafe(nil), &block); end

  # Legacy method of adding subconfigs. This is used by older versions of
  # the stackdriver client libraries but should not be used in new code.
  #
  # @deprecated
  # @private
  #
  # source://google-cloud-core//lib/google/cloud/config.rb#130
  def add_options(legacy_categories); end

  # Check if the given key has been explicitly added as an alias.
  # If so, return the target, otherwise return nil.
  #
  # @param key [Symbol] The key to check for.
  # @return [Symbol, nil] The alias target, or nil if not an alias.
  #
  # source://google-cloud-core//lib/google/cloud/config.rb#358
  def alias?(key); end

  # Return a list of alias names.
  #
  # @return [Array<Symbol>] a list of alias names as symbols.
  #
  # source://google-cloud-core//lib/google/cloud/config.rb#386
  def aliases!; end

  # Remove the given key from the configuration, deleting any validation
  # and value. If the key is omitted, delete all keys. If the key is an
  # alias, deletes the alias but leaves the original.
  #
  # @param key [Symbol, nil] The key to delete. If omitted or `nil`,
  #   delete all fields and subconfigs.
  #
  # source://google-cloud-core//lib/google/cloud/config.rb#278
  def delete!(key = T.unsafe(nil)); end

  # Check if the given key has been explicitly added as a field name.
  #
  # @param key [Symbol] The key to check for.
  # @return [boolean]
  #
  # source://google-cloud-core//lib/google/cloud/config.rb#336
  def field?(key); end

  # Return a list of explicitly added field names.
  #
  # @return [Array<Symbol>] a list of field names as symbols.
  #
  # source://google-cloud-core//lib/google/cloud/config.rb#368
  def fields!; end

  # Returns a string representation of this configuration state, including
  # subconfigs. Only explicitly added fields and subconfigs are included.
  #
  # @return [String]
  #
  # source://google-cloud-core//lib/google/cloud/config.rb#396
  def inspect; end

  # Dynamic methods accessed as keys.
  #
  # @private
  #
  # source://google-cloud-core//lib/google/cloud/config.rb#458
  def method_missing(name, *args); end

  # Implement standard nil check
  #
  # @private
  # @return [false]
  #
  # source://google-cloud-core//lib/google/cloud/config.rb#483
  def nil?; end

  # Check if the given key has been set in this object. Returns true if the
  # key has been added as a normal field, subconfig, or alias, or if it has
  # not been added explicitly but still has a value.
  #
  # @param key [Symbol] The key to check for.
  # @return [boolean]
  #
  # source://google-cloud-core//lib/google/cloud/config.rb#325
  def option?(key); end

  # Restore the original default value of the given key.
  # If the key is omitted, restore the original defaults for all keys,
  # and all keys of subconfigs, recursively.
  #
  # @param key [Symbol, nil] The key to reset. If omitted or `nil`,
  #   recursively reset all fields and subconfigs.
  #
  # source://google-cloud-core//lib/google/cloud/config.rb#251
  def reset!(key = T.unsafe(nil)); end

  # Check if the given key has been explicitly added as a field name.
  #
  # @param key [Symbol] The key to check for.
  # @return [boolean]
  #
  # source://google-cloud-core//lib/google/cloud/config.rb#336
  def respond_to?(key); end

  # Check if the given key has been explicitly added as a subconfig name.
  #
  # @param key [Symbol] The key to check for.
  # @return [boolean]
  #
  # source://google-cloud-core//lib/google/cloud/config.rb#347
  def subconfig?(key); end

  # Return a list of explicitly added subconfig names.
  #
  # @return [Array<Symbol>] a list of subconfig names as symbols.
  #
  # source://google-cloud-core//lib/google/cloud/config.rb#377
  def subconfigs!; end

  # Returns a nested hash representation of this configuration state,
  # including subconfigs. Only explicitly added fields and subconfigs are
  # included.
  #
  # @return [Hash]
  #
  # source://google-cloud-core//lib/google/cloud/config.rb#413
  def to_h!; end

  # Returns a string representation of this configuration state, including
  # subconfigs. Only explicitly added fields and subconfigs are included.
  #
  # @return [String]
  #
  # source://google-cloud-core//lib/google/cloud/config.rb#396
  def to_s!; end

  # Check if the given key has been set in this object. Returns true if the
  # key has been added as a normal field, subconfig, or alias, or if it has
  # not been added explicitly but still has a value.
  #
  # @param key [Symbol] The key to check for.
  # @return [boolean]
  #
  # source://google-cloud-core//lib/google/cloud/config.rb#325
  def value_set?(key); end

  private

  # source://google-cloud-core//lib/google/cloud/config.rb#555
  def build_enum_validator!(allowed, allow_nil); end

  # source://google-cloud-core//lib/google/cloud/config.rb#549
  def build_match_validator!(matches, allow_nil); end

  # source://google-cloud-core//lib/google/cloud/config.rb#561
  def build_proc_validator!(proc, allow_nil); end

  # source://google-cloud-core//lib/google/cloud/config.rb#514
  def resolve_key!(key); end

  # source://google-cloud-core//lib/google/cloud/config.rb#531
  def resolve_validator!(initial, opts); end

  # Dynamic methods accessed as keys.
  #
  # @private
  # @return [Boolean]
  #
  # source://google-cloud-core//lib/google/cloud/config.rb#472
  def respond_to_missing?(name, include_private); end

  # source://google-cloud-core//lib/google/cloud/config.rb#520
  def validate_new_key!(key); end

  # source://google-cloud-core//lib/google/cloud/config.rb#565
  def validate_value!(key, validator, value); end

  # source://google-cloud-core//lib/google/cloud/config.rb#583
  def warn!(msg); end

  class << self
    # Determines if the given object is a config. Useful because Config
    # does not define the `is_a?` method.
    #
    # @return [boolean]
    #
    # source://google-cloud-core//lib/google/cloud/config.rb#104
    def config?(obj); end

    # Constructs a Config object. If a block is given, yields `self` to the
    # block, which makes it convenient to initialize the structure by making
    # calls to `add_field!` and `add_config!`.
    #
    # @param show_warnings [boolean] Whether to print warnings when a
    #   validation fails. Defaults to `true`.
    # @return [Config] The constructed Config object.
    # @yield [config]
    #
    # source://google-cloud-core//lib/google/cloud/config.rb#92
    def create(show_warnings: T.unsafe(nil)); end

    # Search the given environment variable names for valid credential data
    # that can be passed to `Google::Auth::Credentials.new`.
    # If a variable contains a valid file path, returns that path as a string.
    # If a variable contains valid JSON, returns the parsed JSON as a hash.
    # If no variables contain valid data, returns nil.
    #
    # @private
    #
    # source://google-cloud-core//lib/google/cloud/config.rb#430
    def credentials_from_env(*vars); end

    # Create a configuration value that will be invoked when retrieved.
    #
    # @private
    #
    # source://google-cloud-core//lib/google/cloud/config.rb#450
    def deferred(&block); end
  end
end

# @private
#
# source://google-cloud-core//lib/google/cloud/config.rb#594
class Google::Cloud::Config::DeferredValue
  # @return [DeferredValue] a new instance of DeferredValue
  #
  # source://google-cloud-core//lib/google/cloud/config.rb#595
  def initialize(&block); end

  # source://google-cloud-core//lib/google/cloud/config.rb#599
  def call; end
end

# they clash with method names.
#
# @private a list of key names that are technically illegal because
#
# source://google-cloud-core//lib/google/cloud/config.rb#498
Google::Cloud::Config::ILLEGAL_KEYS = T.let(T.unsafe(nil), Array)

# @private A validator that allows all values
#
# source://google-cloud-core//lib/google/cloud/config.rb#492
Google::Cloud::Config::OPEN_VALIDATOR = T.let(T.unsafe(nil), Proc)

# @private sentinel indicating a subconfig in the validators hash
#
# source://google-cloud-core//lib/google/cloud/config.rb#512
Google::Cloud::Config::SUBCONFIG = T.let(T.unsafe(nil), Object)

# source://google-cloud-core//lib/google/cloud/core/version.rb#18
module Google::Cloud::Core; end

# source://google-cloud-core//lib/google/cloud/core/version.rb#19
Google::Cloud::Core::VERSION = T.let(T.unsafe(nil), String)
