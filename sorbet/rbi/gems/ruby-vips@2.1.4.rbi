# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `ruby-vips` gem.
# Please instead update this file by running `bin/tapioca gem ruby-vips`.

module GLib
  extend ::FFI::Library

  def g_free(*_arg0); end
  def g_log_remove_handler(*_arg0); end
  def g_log_set_handler(*_arg0); end
  def g_malloc(*_arg0); end

  class << self
    def g_free(*_arg0); end
    def g_log_remove_handler(*_arg0); end
    def g_log_set_handler(*_arg0); end
    def g_malloc(*_arg0); end
    def logger; end
    def logger=(_arg0); end
    def remove_log_handler; end
    def set_log_domain(domain); end
  end
end

GLib::GLIB_TO_SEVERITY = T.let(T.unsafe(nil), Hash)
GLib::G_FREE = T.let(T.unsafe(nil), FFI::Function)
GLib::LOG_FLAG_FATAL = T.let(T.unsafe(nil), Integer)
GLib::LOG_FLAG_RECURSION = T.let(T.unsafe(nil), Integer)
GLib::LOG_HANDLER = T.let(T.unsafe(nil), Proc)
GLib::LOG_LEVEL_CRITICAL = T.let(T.unsafe(nil), Integer)
GLib::LOG_LEVEL_DEBUG = T.let(T.unsafe(nil), Integer)
GLib::LOG_LEVEL_ERROR = T.let(T.unsafe(nil), Integer)
GLib::LOG_LEVEL_INFO = T.let(T.unsafe(nil), Integer)
GLib::LOG_LEVEL_MESSAGE = T.let(T.unsafe(nil), Integer)
GLib::LOG_LEVEL_WARNING = T.let(T.unsafe(nil), Integer)

module GObject
  extend ::FFI::Library

  def g_object_get_property(*_arg0); end
  def g_object_ref(*_arg0); end
  def g_object_set_property(*_arg0); end
  def g_object_unref(*_arg0); end
  def g_param_spec_get_blurb(*_arg0); end
  def g_signal_connect_data(*_arg0); end
  def g_type_from_name(*_arg0); end
  def g_type_fundamental(*_arg0); end
  def g_type_init(*_arg0); end
  def g_type_name(*_arg0); end
  def g_value_get_boolean(*_arg0); end
  def g_value_get_double(*_arg0); end
  def g_value_get_enum(*_arg0); end
  def g_value_get_flags(*_arg0); end
  def g_value_get_int(*_arg0); end
  def g_value_get_object(*_arg0); end
  def g_value_get_string(*_arg0); end
  def g_value_get_uint64(*_arg0); end
  def g_value_init(*_arg0); end
  def g_value_set_boolean(*_arg0); end
  def g_value_set_double(*_arg0); end
  def g_value_set_enum(*_arg0); end
  def g_value_set_flags(*_arg0); end
  def g_value_set_int(*_arg0); end
  def g_value_set_object(*_arg0); end
  def g_value_set_string(*_arg0); end
  def g_value_set_uint64(*_arg0); end
  def g_value_unset(*_arg0); end

  class << self
    def g_object_get_property(*_arg0); end
    def g_object_ref(*_arg0); end
    def g_object_set_property(*_arg0); end
    def g_object_unref(*_arg0); end
    def g_param_spec_get_blurb(*_arg0); end
    def g_signal_connect_data(*_arg0); end
    def g_type_from_name(*_arg0); end
    def g_type_fundamental(*_arg0); end
    def g_type_init(*_arg0); end
    def g_type_name(*_arg0); end
    def g_value_get_boolean(*_arg0); end
    def g_value_get_double(*_arg0); end
    def g_value_get_enum(*_arg0); end
    def g_value_get_flags(*_arg0); end
    def g_value_get_int(*_arg0); end
    def g_value_get_object(*_arg0); end
    def g_value_get_string(*_arg0); end
    def g_value_get_uint64(*_arg0); end
    def g_value_init(*_arg0); end
    def g_value_set_boolean(*_arg0); end
    def g_value_set_double(*_arg0); end
    def g_value_set_enum(*_arg0); end
    def g_value_set_flags(*_arg0); end
    def g_value_set_int(*_arg0); end
    def g_value_set_object(*_arg0); end
    def g_value_set_string(*_arg0); end
    def g_value_set_uint64(*_arg0); end
    def g_value_unset(*_arg0); end
  end
end

GObject::GBOOL_TYPE = T.let(T.unsafe(nil), Integer)
GObject::GDOUBLE_TYPE = T.let(T.unsafe(nil), Integer)
GObject::GENUM_TYPE = T.let(T.unsafe(nil), Integer)
GObject::GFLAGS_TYPE = T.let(T.unsafe(nil), Integer)
GObject::GINT_TYPE = T.let(T.unsafe(nil), Integer)
GObject::GOBJECT_TYPE = T.let(T.unsafe(nil), Integer)

class GObject::GObject
  extend ::Forwardable
  extend ::SingleForwardable

  def initialize(ptr); end

  def [](*args, **_arg1, &block); end
  def ffi_managed_struct; end
  def ffi_struct; end
  def ptr; end
  def references; end
  def to_ptr(*args, **_arg1, &block); end

  class << self
    def ffi_managed_struct; end
    def ffi_struct; end
    def ptr(*args, **_arg1, &block); end
  end
end

module GObject::GObject::GObjectLayout
  class << self
    def included(base); end
  end
end

class GObject::GObject::ManagedStruct < ::FFI::ManagedStruct
  include ::GObject::GObject::GObjectLayout

  class << self
    def release(ptr); end
  end
end

class GObject::GObject::Struct < ::FFI::Struct
  include ::GObject::GObject::GObjectLayout
end

class GObject::GParamSpec < ::FFI::Struct; end
class GObject::GParamSpecPtr < ::FFI::Struct; end
GObject::GSTR_TYPE = T.let(T.unsafe(nil), Integer)
GObject::GUINT64_TYPE = T.let(T.unsafe(nil), Integer)

class GObject::GValue < ::FFI::ManagedStruct
  def get; end
  def init(gtype); end
  def set(value); end
  def unset; end

  class << self
    def alloc; end
    def from_nick(gtype, value); end
    def release(ptr); end
    def to_nick(gtype, enum_value); end
  end
end

module Vips
  extend ::FFI::Library

  def nickname_find(*_arg0); end
  def type_find(*_arg0); end
  def version(*_arg0); end
  def version_string(*_arg0); end
  def vips_addalpha(*args); end
  def vips_argument_map(*_arg0); end
  def vips_band_format_get_type(*_arg0); end
  def vips_band_format_iscomplex(*_arg0); end
  def vips_band_format_isfloat(*_arg0); end
  def vips_blend_mode_get_type(*_arg0); end
  def vips_cache_operation_build(*_arg0); end
  def vips_cache_set_max(*_arg0); end
  def vips_cache_set_max_files(*_arg0); end
  def vips_cache_set_max_mem(*_arg0); end
  def vips_coding_get_type(*_arg0); end
  def vips_concurrency_set(*_arg0); end
  def vips_connection_filename(*_arg0); end
  def vips_connection_nick(*_arg0); end
  def vips_enum_from_nick(*_arg0); end
  def vips_enum_nick(*_arg0); end
  def vips_error_buffer(*_arg0); end
  def vips_error_clear(*_arg0); end
  def vips_error_freeze(*_arg0); end
  def vips_error_thaw(*_arg0); end
  def vips_filename_get_filename(*_arg0); end
  def vips_filename_get_options(*_arg0); end
  def vips_foreign_find_load(*_arg0); end
  def vips_foreign_find_load_buffer(*_arg0); end
  def vips_foreign_find_load_source(*_arg0); end
  def vips_foreign_find_save(*_arg0); end
  def vips_foreign_find_save_buffer(*_arg0); end
  def vips_foreign_find_save_target(*_arg0); end
  def vips_foreign_get_suffixes(*_arg0); end
  def vips_image_copy_memory(*_arg0); end
  def vips_image_get(*_arg0); end
  def vips_image_get_bands(*_arg0); end
  def vips_image_get_fields(*_arg0); end
  def vips_image_get_height(*_arg0); end
  def vips_image_get_typeof(*_arg0); end
  def vips_image_get_width(*_arg0); end
  def vips_image_hasalpha(*_arg0); end
  def vips_image_new_from_memory(*_arg0); end
  def vips_image_new_from_memory_copy(*_arg0); end
  def vips_image_new_matrix_from_array(*_arg0); end
  def vips_image_remove(*_arg0); end
  def vips_image_set(*_arg0); end
  def vips_image_set_kill(*_arg0); end
  def vips_image_set_progress(*_arg0); end
  def vips_image_write_to_memory(*_arg0); end
  def vips_init(*_arg0); end
  def vips_interpolate_new(*_arg0); end
  def vips_interpretation_get_type(*_arg0); end
  def vips_leak_set(*_arg0); end
  def vips_object_get_argument(*_arg0); end
  def vips_object_get_description(*_arg0); end
  def vips_object_print_all(*_arg0); end
  def vips_object_set_from_string(*_arg0); end
  def vips_object_unref_outputs(*_arg0); end
  def vips_operation_get_flags(*_arg0); end
  def vips_operation_new(*_arg0); end
  def vips_region_fetch(*_arg0); end
  def vips_region_height(*_arg0); end
  def vips_region_new(*_arg0); end
  def vips_region_width(*_arg0); end
  def vips_source_custom_new(*_arg0); end
  def vips_source_new_from_descriptor(*_arg0); end
  def vips_source_new_from_file(*_arg0); end
  def vips_source_new_from_memory(*_arg0); end
  def vips_target_custom_new(*_arg0); end
  def vips_target_new_to_descriptor(*_arg0); end
  def vips_target_new_to_file(*_arg0); end
  def vips_target_new_to_memory(*_arg0); end
  def vips_type_map(*_arg0); end
  def vips_value_get_array_double(*_arg0); end
  def vips_value_get_array_image(*_arg0); end
  def vips_value_get_array_int(*_arg0); end
  def vips_value_get_blob(*_arg0); end
  def vips_value_get_ref_string(*_arg0); end
  def vips_value_set_array_double(*_arg0); end
  def vips_value_set_array_image(*_arg0); end
  def vips_value_set_array_int(*_arg0); end
  def vips_value_set_blob(*_arg0); end
  def vips_value_set_ref_string(*_arg0); end
  def vips_vector_set_enabled(*_arg0); end

  class << self
    def at_least_libvips?(x, y); end
    def cache_set_max(size); end
    def cache_set_max_files(size); end
    def cache_set_max_mem(size); end
    def concurrency_set(n); end
    def get_suffixes; end
    def leak_set(leak); end
    def nickname_find(*_arg0); end
    def p2str(pointer); end
    def set_debug(debug); end
    def type_find(*_arg0); end
    def vector_set(enabled); end
    def version(*_arg0); end
    def version_string(*_arg0); end
    def vips_addalpha(*args); end
    def vips_argument_map(*_arg0); end
    def vips_band_format_get_type(*_arg0); end
    def vips_band_format_iscomplex(*_arg0); end
    def vips_band_format_isfloat(*_arg0); end
    def vips_blend_mode_get_type(*_arg0); end
    def vips_cache_operation_build(*_arg0); end
    def vips_cache_set_max(*_arg0); end
    def vips_cache_set_max_files(*_arg0); end
    def vips_cache_set_max_mem(*_arg0); end
    def vips_coding_get_type(*_arg0); end
    def vips_concurrency_set(*_arg0); end
    def vips_connection_filename(*_arg0); end
    def vips_connection_nick(*_arg0); end
    def vips_enum_from_nick(*_arg0); end
    def vips_enum_nick(*_arg0); end
    def vips_error_buffer(*_arg0); end
    def vips_error_clear(*_arg0); end
    def vips_error_freeze(*_arg0); end
    def vips_error_thaw(*_arg0); end
    def vips_filename_get_filename(*_arg0); end
    def vips_filename_get_options(*_arg0); end
    def vips_foreign_find_load(*_arg0); end
    def vips_foreign_find_load_buffer(*_arg0); end
    def vips_foreign_find_load_source(*_arg0); end
    def vips_foreign_find_save(*_arg0); end
    def vips_foreign_find_save_buffer(*_arg0); end
    def vips_foreign_find_save_target(*_arg0); end
    def vips_foreign_get_suffixes(*_arg0); end
    def vips_image_copy_memory(*_arg0); end
    def vips_image_get(*_arg0); end
    def vips_image_get_bands(*_arg0); end
    def vips_image_get_fields(*_arg0); end
    def vips_image_get_height(*_arg0); end
    def vips_image_get_typeof(*_arg0); end
    def vips_image_get_width(*_arg0); end
    def vips_image_hasalpha(*_arg0); end
    def vips_image_new_from_memory(*_arg0); end
    def vips_image_new_from_memory_copy(*_arg0); end
    def vips_image_new_matrix_from_array(*_arg0); end
    def vips_image_remove(*_arg0); end
    def vips_image_set(*_arg0); end
    def vips_image_set_kill(*_arg0); end
    def vips_image_set_progress(*_arg0); end
    def vips_image_write_to_memory(*_arg0); end
    def vips_init(*_arg0); end
    def vips_interpolate_new(*_arg0); end
    def vips_interpretation_get_type(*_arg0); end
    def vips_leak_set(*_arg0); end
    def vips_object_get_argument(*_arg0); end
    def vips_object_get_description(*_arg0); end
    def vips_object_print_all(*_arg0); end
    def vips_object_set_from_string(*_arg0); end
    def vips_object_unref_outputs(*_arg0); end
    def vips_operation_get_flags(*_arg0); end
    def vips_operation_new(*_arg0); end
    def vips_region_fetch(*_arg0); end
    def vips_region_height(*_arg0); end
    def vips_region_new(*_arg0); end
    def vips_region_width(*_arg0); end
    def vips_source_custom_new(*_arg0); end
    def vips_source_new_from_descriptor(*_arg0); end
    def vips_source_new_from_file(*_arg0); end
    def vips_source_new_from_memory(*_arg0); end
    def vips_target_custom_new(*_arg0); end
    def vips_target_new_to_descriptor(*_arg0); end
    def vips_target_new_to_file(*_arg0); end
    def vips_target_new_to_memory(*_arg0); end
    def vips_type_map(*_arg0); end
    def vips_value_get_array_double(*_arg0); end
    def vips_value_get_array_image(*_arg0); end
    def vips_value_get_array_int(*_arg0); end
    def vips_value_get_blob(*_arg0); end
    def vips_value_get_ref_string(*_arg0); end
    def vips_value_set_array_double(*_arg0); end
    def vips_value_set_array_image(*_arg0); end
    def vips_value_set_array_int(*_arg0); end
    def vips_value_set_blob(*_arg0); end
    def vips_value_set_ref_string(*_arg0); end
    def vips_vector_set_enabled(*_arg0); end
  end
end

Vips::ARGUMENT_CONSTRUCT = T.let(T.unsafe(nil), Integer)
Vips::ARGUMENT_DEPRECATED = T.let(T.unsafe(nil), Integer)
Vips::ARGUMENT_FLAGS = T.let(T.unsafe(nil), Hash)
Vips::ARGUMENT_INPUT = T.let(T.unsafe(nil), Integer)
Vips::ARGUMENT_MODIFY = T.let(T.unsafe(nil), Integer)
Vips::ARGUMENT_OUTPUT = T.let(T.unsafe(nil), Integer)
Vips::ARGUMENT_REQUIRED = T.let(T.unsafe(nil), Integer)
Vips::ARGUMENT_SET_ALWAYS = T.let(T.unsafe(nil), Integer)
Vips::ARGUMENT_SET_ONCE = T.let(T.unsafe(nil), Integer)
Vips::ARRAY_DOUBLE_TYPE = T.let(T.unsafe(nil), Integer)
Vips::ARRAY_IMAGE_TYPE = T.let(T.unsafe(nil), Integer)
Vips::ARRAY_INT_TYPE = T.let(T.unsafe(nil), Integer)
class Vips::Argument < ::FFI::Struct; end
class Vips::ArgumentClass < ::Vips::Argument; end
class Vips::ArgumentClassPtr < ::FFI::Struct; end
class Vips::ArgumentInstance < ::Vips::Argument; end
class Vips::ArgumentInstancePtr < ::FFI::Struct; end
Vips::BAND_FORMAT_TYPE = T.let(T.unsafe(nil), Integer)
Vips::BLEND_MODE_TYPE = T.let(T.unsafe(nil), Integer)
Vips::BLOB_TYPE = T.let(T.unsafe(nil), Integer)
Vips::CODING_TYPE = T.let(T.unsafe(nil), Integer)

class Vips::Connection < ::Vips::Object
  def filename; end
  def nick; end
end

module Vips::Connection::ConnectionLayout
  class << self
    def included(base); end
  end
end

class Vips::Connection::ManagedStruct < ::Vips::Object::ManagedStruct
  include ::Vips::Connection::ConnectionLayout
end

class Vips::Connection::Struct < ::Vips::Object::Struct
  include ::Vips::Connection::ConnectionLayout
end

class Vips::Error < ::RuntimeError
  def initialize(msg = T.unsafe(nil)); end

  def to_s; end
end

Vips::IMAGE_TYPE = T.let(T.unsafe(nil), Integer)
Vips::INTERPRETATION_TYPE = T.let(T.unsafe(nil), Integer)

class Vips::Image < ::Vips::Object
  def !; end
  def !=(other); end
  def %(other); end
  def &(other); end
  def *(other); end
  def **(other); end
  def +(other); end
  def +@; end
  def -(other); end
  def -@; end
  def /(other); end
  def <(other); end
  def <<(other); end
  def <=(other); end
  def ==(other); end
  def >(other); end
  def >=(other); end
  def >>(other); end
  def [](index); end
  def ^(other); end
  def acos; end
  def acosh; end
  def add_alpha; end
  def asin; end
  def asinh; end
  def atan; end
  def atanh; end
  def bandand; end
  def bandeor; end
  def bandjoin(other); end
  def bandor; end
  def bands; end
  def bandsplit; end
  def ceil; end
  def coding; end
  def composite(overlay, mode, **opts); end
  def conj; end
  def copy_memory; end
  def cos; end
  def cosh; end
  def cross_phase(other); end
  def dilate(mask); end
  def draw_point(ink, left, top, **opts); end
  def erode(mask); end
  def exp; end
  def exp10; end
  def filename; end
  def fliphor; end
  def flipver; end
  def floor; end
  def format; end
  def get(name); end
  def get_fields; end
  def get_typeof(name); end
  def get_value(name); end
  def has_alpha?; end
  def height; end
  def ifthenelse(th, el, **opts); end
  def imag; end
  def inspect; end
  def interpretation; end
  def log; end
  def log10; end
  def maxpos; end
  def median(size = T.unsafe(nil)); end
  def method_missing(name, *args, **options); end
  def minpos; end
  def mutate; end
  def new_from_image(value); end
  def offset; end
  def parent_get_typeof(name); end
  def polar; end
  def real; end
  def rect; end
  def remove(name); end
  def respond_to?(name, include_all = T.unsafe(nil)); end
  def rint; end
  def rot180; end
  def rot270; end
  def rot90; end
  def scale; end
  def scaleimage(**opts); end
  def set(name, value); end
  def set_kill(kill); end
  def set_progress(state); end
  def set_type(gtype, name, value); end
  def set_value(name, value); end
  def sin; end
  def sinh; end
  def size; end
  def tan; end
  def tanh; end
  def to_a; end
  def to_enum; end
  def width; end
  def write_to_buffer(format_string, **opts); end
  def write_to_file(name, **opts); end
  def write_to_memory; end
  def write_to_target(target, format_string, **opts); end
  def xoffset; end
  def xres; end
  def yoffset; end
  def yres; end
  def |(other); end
  def ~; end

  private

  def call_enum(name, other, enum); end
  def respond_to_missing?(name, include_all = T.unsafe(nil)); end
  def write_gc; end

  class << self
    def complex?(format); end
    def float?(format); end
    def matrix_from_array(width, height, array); end
    def method_missing(name, *args, **options); end
    def new_from_array(array, scale = T.unsafe(nil), offset = T.unsafe(nil)); end
    def new_from_buffer(data, option_string, **opts); end
    def new_from_file(name, **opts); end
    def new_from_memory(data, width, height, bands, format); end
    def new_from_memory_copy(data, width, height, bands, format); end
    def new_from_source(source, option_string, **opts); end
    def respond_to_missing?(name, include_all = T.unsafe(nil)); end
    def run_cmplx(image, &block); end
    def smap(x, &block); end
  end
end

class Vips::Image::GenericPtr < ::FFI::Struct; end

module Vips::Image::ImageLayout
  class << self
    def included(base); end
  end
end

class Vips::Image::ManagedStruct < ::Vips::Object::ManagedStruct
  include ::Vips::Image::ImageLayout
end

class Vips::Image::Struct < ::Vips::Object::Struct
  include ::Vips::Image::ImageLayout
end

Vips::Image::UNKNOWN_POINTER_SIZE = T.let(T.unsafe(nil), Integer)
class Vips::IntStruct < ::FFI::Struct; end

class Vips::Interpolate < ::Vips::Object
  def initialize(name); end
end

module Vips::Interpolate::InterpolateLayout
  class << self
    def included(base); end
  end
end

class Vips::Interpolate::ManagedStruct < ::Vips::Object::ManagedStruct
  include ::Vips::Interpolate::InterpolateLayout
end

class Vips::Interpolate::Struct < ::Vips::Object::Struct
  include ::Vips::Interpolate::InterpolateLayout
end

class Vips::Introspect
  def initialize(name); end

  def add_yard_introspection(name); end
  def args; end
  def description; end
  def destructive; end
  def doc_optional_input; end
  def doc_optional_output; end
  def flags; end
  def member_x; end
  def method_args; end
  def name; end
  def optional_input; end
  def optional_output; end
  def required_input; end
  def required_output; end
  def vips_name; end

  class << self
    def get(name); end
    def get_yard(name); end
  end
end

Vips::LIBRARY_VERSION = T.let(T.unsafe(nil), String)
Vips::LOG_DOMAIN = T.let(T.unsafe(nil), String)
Vips::MARSHAL_ALL = T.let(T.unsafe(nil), Hash)
Vips::MARSHAL_FINISH = T.let(T.unsafe(nil), Proc)
Vips::MARSHAL_PROGRESS = T.let(T.unsafe(nil), Proc)
Vips::MARSHAL_READ = T.let(T.unsafe(nil), Proc)
Vips::MARSHAL_SEEK = T.let(T.unsafe(nil), Proc)
Vips::MARSHAL_WRITE = T.let(T.unsafe(nil), Proc)
Vips::MAX_COORD = T.let(T.unsafe(nil), Integer)

class Vips::MutableImage < ::Vips::Object
  def initialize(image); end

  def bands(*args, **_arg1, &block); end
  def filename(*args, **_arg1, &block); end
  def format(*args, **_arg1, &block); end
  def get(*args, **_arg1, &block); end
  def get_fields(*args, **_arg1, &block); end
  def get_typeof(*args, **_arg1, &block); end
  def height(*args, **_arg1, &block); end
  def image; end
  def inspect; end
  def interpretation(*args, **_arg1, &block); end
  def method_missing(name, *args, **options); end
  def parent_get_typeof(name); end
  def remove!(name); end
  def respond_to?(name, include_all = T.unsafe(nil)); end
  def set!(name, value); end
  def set_type!(gtype, name, value); end
  def size(*args, **_arg1, &block); end
  def width(*args, **_arg1, &block); end
  def xoffset(*args, **_arg1, &block); end
  def xres(*args, **_arg1, &block); end
  def yoffset(*args, **_arg1, &block); end
  def yres(*args, **_arg1, &block); end

  private

  def respond_to_missing?(name, include_all = T.unsafe(nil)); end
end

class Vips::MutableImage::ManagedStruct < ::Vips::Object::ManagedStruct
  include ::Vips::MutableImage::MutableImageLayout
end

module Vips::MutableImage::MutableImageLayout
  class << self
    def included(base); end
  end
end

class Vips::MutableImage::Struct < ::Vips::Object::Struct
  include ::Vips::MutableImage::MutableImageLayout
end

Vips::OPERATION_DEPRECATED = T.let(T.unsafe(nil), Integer)
Vips::OPERATION_FLAGS = T.let(T.unsafe(nil), Hash)
Vips::OPERATION_NOCACHE = T.let(T.unsafe(nil), Integer)
Vips::OPERATION_SEQUENTIAL = T.let(T.unsafe(nil), Integer)

class Vips::Object < ::GObject::GObject
  def get(name); end
  def get_pspec(name); end
  def get_typeof(name); end
  def get_typeof_error(name); end
  def set(name, value); end
  def signal_connect(name, handler = T.unsafe(nil), &block); end

  class << self
    def print_all; end
  end
end

class Vips::Object::ManagedStruct < ::GObject::GObject::ManagedStruct
  include ::Vips::Object::ObjectLayout
end

module Vips::Object::ObjectLayout
  class << self
    def included(base); end
  end
end

class Vips::Object::Struct < ::GObject::GObject::Struct
  include ::Vips::Object::ObjectLayout
end

class Vips::ObjectClass < ::FFI::Struct; end

class Vips::Operation < ::Vips::Object
  def initialize(value); end

  def argument_map(&block); end
  def build; end
  def set(name, value, match_image, flags, gtype, destructive); end

  class << self
    def call(name, supplied, optional = T.unsafe(nil), option_string = T.unsafe(nil)); end
    def flat_find(object, &block); end
    def imageize(match_image, value); end
  end
end

class Vips::Operation::ManagedStruct < ::Vips::Object::ManagedStruct
  include ::Vips::Operation::OperationLayout
end

module Vips::Operation::OperationLayout
  class << self
    def included(base); end
  end
end

class Vips::Operation::Struct < ::Vips::Object::Struct
  include ::Vips::Operation::OperationLayout
end

class Vips::Progress < ::FFI::Struct; end
Vips::REFSTR_TYPE = T.let(T.unsafe(nil), Integer)

class Vips::Region < ::Vips::Object
  def initialize(name); end

  def fetch(left, top, width, height); end
  def height; end
  def width; end
end

class Vips::Region::ManagedStruct < ::Vips::Object::ManagedStruct
  include ::Vips::Region::RegionLayout
end

module Vips::Region::RegionLayout
  class << self
    def included(base); end
  end
end

class Vips::Region::Struct < ::Vips::Object::Struct
  include ::Vips::Region::RegionLayout
end

class Vips::SizeStruct < ::FFI::Struct; end

class Vips::Source < ::Vips::Connection
  class << self
    def new_from_descriptor(descriptor); end
    def new_from_file(filename); end
    def new_from_memory(data); end
  end
end

class Vips::Source::ManagedStruct < ::Vips::Connection::ManagedStruct
  include ::Vips::Source::SourceLayout
end

module Vips::Source::SourceLayout
  class << self
    def included(base); end
  end
end

class Vips::Source::Struct < ::Vips::Connection::Struct
  include ::Vips::Source::SourceLayout
end

class Vips::SourceCustom < ::Vips::Source
  def initialize; end

  def on_read(&block); end
  def on_seek(&block); end
end

class Vips::SourceCustom::ManagedStruct < ::Vips::Source::ManagedStruct
  include ::Vips::SourceCustom::SourceCustomLayout
end

module Vips::SourceCustom::SourceCustomLayout
  class << self
    def included(base); end
  end
end

class Vips::SourceCustom::Struct < ::Vips::Source::Struct
  include ::Vips::SourceCustom::SourceCustomLayout
end

class Vips::Target < ::Vips::Connection
  class << self
    def new_to_descriptor(descriptor); end
    def new_to_file(filename); end
    def new_to_memory; end
  end
end

class Vips::Target::ManagedStruct < ::Vips::Connection::ManagedStruct
  include ::Vips::Target::TargetLayout
end

class Vips::Target::Struct < ::Vips::Connection::Struct
  include ::Vips::Target::TargetLayout
end

module Vips::Target::TargetLayout
  class << self
    def included(base); end
  end
end

class Vips::TargetCustom < ::Vips::Target
  def initialize; end

  def on_finish(&block); end
  def on_write(&block); end
end

class Vips::TargetCustom::ManagedStruct < ::Vips::Target::ManagedStruct
  include ::Vips::TargetCustom::TargetCustomLayout
end

class Vips::TargetCustom::Struct < ::Vips::Target::Struct
  include ::Vips::TargetCustom::TargetCustomLayout
end

module Vips::TargetCustom::TargetCustomLayout
  class << self
    def included(base); end
  end
end

Vips::VERSION = T.let(T.unsafe(nil), String)

module Vips::Yard
  class << self
    def generate; end
    def generate_operation(introspect); end
    def gtype_to_ruby(gtype); end
  end
end

Vips::Yard::ALIAS = T.let(T.unsafe(nil), Array)
Vips::Yard::MAP_GO_TO_RUBY = T.let(T.unsafe(nil), Hash)
Vips::Yard::NO_GENERATE = T.let(T.unsafe(nil), Array)
