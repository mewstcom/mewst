# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `standard` gem.
# Please instead update this file by running `bin/tapioca gem standard`.

# source://standard//lib/standard/rubocop/ext.rb#1
module RuboCop; end

# source://standard//lib/standard/rubocop/ext.rb#17
class RuboCop::CommentConfig
  # @return [CommentConfig] a new instance of CommentConfig
  #
  # source://standard//lib/standard/rubocop/ext.rb#20
  def initialize(processed_source); end

  # source://rubocop/1.42.0/lib/rubocop/comment_config.rb#57
  def comment_only_line?(line_number); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def config(*args, **_arg1, &block); end

  # source://rubocop/1.42.0/lib/rubocop/comment_config.rb#45
  def cop_disabled_line_ranges; end

  # source://rubocop/1.42.0/lib/rubocop/comment_config.rb#37
  def cop_enabled_at_line?(cop, line_number); end

  # source://rubocop/1.42.0/lib/rubocop/comment_config.rb#49
  def extra_enabled_comments; end

  # source://rubocop/1.42.0/lib/rubocop/comment_config.rb#28
  def processed_source; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def registry(*args, **_arg1, &block); end

  private

  # source://rubocop/1.42.0/lib/rubocop/comment_config.rb#77
  def analyze; end

  # source://rubocop/1.42.0/lib/rubocop/comment_config.rb#105
  def analyze_cop(analysis, directive); end

  # source://rubocop/1.42.0/lib/rubocop/comment_config.rb#125
  def analyze_disabled(analysis, directive); end

  # source://rubocop/1.42.0/lib/rubocop/comment_config.rb#136
  def analyze_rest(analysis, directive); end

  # source://rubocop/1.42.0/lib/rubocop/comment_config.rb#116
  def analyze_single_line(analysis, directive); end

  # source://rubocop/1.42.0/lib/rubocop/comment_config.rb#145
  def cop_line_ranges(analysis); end

  # source://rubocop/1.42.0/lib/rubocop/comment_config.rb#151
  def each_directive; end

  # source://rubocop/1.42.0/lib/rubocop/comment_config.rb#63
  def extra_enabled_comments_with_names(extras:, names:); end

  # source://rubocop/1.42.0/lib/rubocop/comment_config.rb#171
  def handle_enable_all(directive, names, extras); end

  # source://rubocop/1.42.0/lib/rubocop/comment_config.rb#185
  def handle_switch(directive, names, extras); end

  # source://rubocop/1.42.0/lib/rubocop/comment_config.rb#96
  def inject_disabled_cops_directives(analyses); end

  # source://rubocop/1.42.0/lib/rubocop/comment_config.rb#164
  def non_comment_token_line_numbers; end

  # source://rubocop/1.42.0/lib/rubocop/comment_config.rb#32
  def old_initialize(processed_source); end

  # source://rubocop/1.42.0/lib/rubocop/comment_config.rb#160
  def qualified_cop_name(cop_name); end
end

# source://rubocop/1.42.0/lib/rubocop/comment_config.rb#9
RuboCop::CommentConfig::CONFIG_DISABLED_LINE_RANGE_MIN = T.let(T.unsafe(nil), Float)

# source://standard//lib/standard/cop/block_single_line_braces.rb#1
module RuboCop::Cop; end

# source://rubocop/1.42.0/lib/rubocop/cop/mixin/allowed_methods.rb#38
RuboCop::Cop::IgnoredMethods = RuboCop::Cop::AllowedMethods

# source://rubocop/1.42.0/lib/rubocop/cop/mixin/allowed_pattern.rb#54
RuboCop::Cop::IgnoredPattern = RuboCop::Cop::AllowedPattern

module RuboCop::Cop::Lint; end

# source://standard//lib/standard/rubocop/ext.rb#2
class RuboCop::Cop::Lint::AssignmentInCondition < ::RuboCop::Cop::Base
  # source://standard//lib/standard/rubocop/ext.rb#4
  def message(_); end

  # source://rubocop/1.42.0/lib/rubocop/cop/lint/assignment_in_condition.rb#55
  def on_if(node); end

  # source://rubocop/1.42.0/lib/rubocop/cop/lint/assignment_in_condition.rb#55
  def on_until(node); end

  # source://rubocop/1.42.0/lib/rubocop/cop/lint/assignment_in_condition.rb#55
  def on_while(node); end

  private

  # source://rubocop/1.42.0/lib/rubocop/cop/lint/assignment_in_condition.rb#82
  def allowed_construct?(asgn_node); end

  # source://rubocop/1.42.0/lib/rubocop/cop/lint/assignment_in_condition.rb#86
  def conditional_assignment?(asgn_node); end

  # source://rubocop/1.42.0/lib/rubocop/cop/lint/assignment_in_condition.rb#90
  def skip_children?(asgn_node); end

  # source://rubocop/1.42.0/lib/rubocop/cop/lint/assignment_in_condition.rb#96
  def traverse_node(node, &block); end
end

# source://rubocop/1.42.0/lib/rubocop/cop/lint/assignment_in_condition.rb#53
RuboCop::Cop::Lint::AssignmentInCondition::ASGN_TYPES = T.let(T.unsafe(nil), Array)

# source://rubocop/1.42.0/lib/rubocop/cop/lint/assignment_in_condition.rb#50
RuboCop::Cop::Lint::AssignmentInCondition::MSG_WITHOUT_SAFE_ASSIGNMENT_ALLOWED = T.let(T.unsafe(nil), String)

# source://rubocop/1.42.0/lib/rubocop/cop/lint/assignment_in_condition.rb#46
RuboCop::Cop::Lint::AssignmentInCondition::MSG_WITH_SAFE_ASSIGNMENT_ALLOWED = T.let(T.unsafe(nil), String)

# source://standard//lib/standard/cop/block_single_line_braces.rb#2
module RuboCop::Cop::Standard; end

# Check for uses of braces around single line blocks, but allows either
# braces or do/end for multi-line blocks.
#
# @example
#   # bad - single line block
#   items.each do |item| item / 5 end
#
#   # good - single line block
#   items.each { |item| item / 5 }
#
# source://standard//lib/standard/cop/block_single_line_braces.rb#13
class RuboCop::Cop::Standard::BlockSingleLineBraces < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://standard//lib/standard/cop/block_single_line_braces.rb#31
  def on_block(node); end

  # source://standard//lib/standard/cop/block_single_line_braces.rb#16
  def on_send(node); end

  private

  # source://standard//lib/standard/cop/block_single_line_braces.rb#69
  def autocorrect(corrector, node); end

  # @return [Boolean]
  #
  # source://standard//lib/standard/cop/block_single_line_braces.rb#75
  def correction_would_break_code?(node); end

  # source://standard//lib/standard/cop/block_single_line_braces.rb#43
  def get_blocks(node, &block); end

  # source://standard//lib/standard/cop/block_single_line_braces.rb#65
  def message(node); end

  # @return [Boolean]
  #
  # source://standard//lib/standard/cop/block_single_line_braces.rb#61
  def proper_block_style?(node); end

  # source://standard//lib/standard/cop/block_single_line_braces.rb#81
  def replace_do_end_with_braces(corrector, loc); end

  # @return [Boolean]
  #
  # source://standard//lib/standard/cop/block_single_line_braces.rb#91
  def whitespace_after?(range, length = T.unsafe(nil)); end
end

# source://standard//lib/standard/rubocop/ext.rb#9
class RuboCop::DirectiveComment
  # source://rubocop/1.42.0/lib/rubocop/directive_comment.rb#30
  def initialize(comment, cop_registry = T.unsafe(nil)); end

  # source://rubocop/1.42.0/lib/rubocop/directive_comment.rb#80
  def all_cops?; end

  # source://rubocop/1.42.0/lib/rubocop/directive_comment.rb#28
  def comment; end

  # source://rubocop/1.42.0/lib/rubocop/directive_comment.rb#85
  def cop_names; end

  # source://rubocop/1.42.0/lib/rubocop/directive_comment.rb#28
  def cop_registry; end

  # source://rubocop/1.42.0/lib/rubocop/directive_comment.rb#28
  def cops; end

  # source://rubocop/1.42.0/lib/rubocop/directive_comment.rb#91
  def department_names; end

  # source://rubocop/1.42.0/lib/rubocop/directive_comment.rb#105
  def directive_count; end

  # source://rubocop/1.42.0/lib/rubocop/directive_comment.rb#60
  def disabled?; end

  # source://rubocop/1.42.0/lib/rubocop/directive_comment.rb#75
  def disabled_all?; end

  # source://rubocop/1.42.0/lib/rubocop/directive_comment.rb#65
  def enabled?; end

  # source://rubocop/1.42.0/lib/rubocop/directive_comment.rb#70
  def enabled_all?; end

  # source://rubocop/1.42.0/lib/rubocop/directive_comment.rb#96
  def in_directive_department?(cop); end

  # source://rubocop/1.42.0/lib/rubocop/directive_comment.rb#110
  def line_number; end

  # source://rubocop/1.42.0/lib/rubocop/directive_comment.rb#42
  def match?(cop_names); end

  # source://rubocop/1.42.0/lib/rubocop/directive_comment.rb#55
  def match_captures; end

  # source://rubocop/1.42.0/lib/rubocop/directive_comment.rb#28
  def mode; end

  # source://rubocop/1.42.0/lib/rubocop/directive_comment.rb#101
  def overridden_by_department?(cop); end

  # source://rubocop/1.42.0/lib/rubocop/directive_comment.rb#46
  def range; end

  # source://rubocop/1.42.0/lib/rubocop/directive_comment.rb#37
  def single_line?; end

  private

  # source://rubocop/1.42.0/lib/rubocop/directive_comment.rb#130
  def all_cop_names; end

  # source://rubocop/1.42.0/lib/rubocop/directive_comment.rb#134
  def cop_names_for_department(department); end

  # source://rubocop/1.42.0/lib/rubocop/directive_comment.rb#126
  def department?(name); end

  # source://rubocop/1.42.0/lib/rubocop/directive_comment.rb#140
  def exclude_redundant_directive_cop(cops); end

  # source://rubocop/1.42.0/lib/rubocop/directive_comment.rb#120
  def parsed_cop_names; end

  # source://rubocop/1.42.0/lib/rubocop/directive_comment.rb#116
  def splitted_cops_string; end

  class << self
    # source://rubocop/1.42.0/lib/rubocop/directive_comment.rb#24
    def before_comment(line); end
  end
end

# source://rubocop/1.42.0/lib/rubocop/directive_comment.rb#17
RuboCop::DirectiveComment::COPS_PATTERN = T.let(T.unsafe(nil), String)

# source://rubocop/1.42.0/lib/rubocop/directive_comment.rb#15
RuboCop::DirectiveComment::COP_NAMES_PATTERN = T.let(T.unsafe(nil), String)

# source://rubocop/1.42.0/lib/rubocop/directive_comment.rb#13
RuboCop::DirectiveComment::COP_NAME_PATTERN = T.let(T.unsafe(nil), String)

# source://standard//lib/standard/rubocop/ext.rb#11
RuboCop::DirectiveComment::DIRECTIVE_COMMENT_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://rubocop/1.42.0/lib/rubocop/directive_comment.rb#11
RuboCop::DirectiveComment::REDUNDANT_DIRECTIVE_COP = T.let(T.unsafe(nil), String)

# source://rubocop/1.42.0/lib/rubocop/directive_comment.rb#9
RuboCop::DirectiveComment::REDUNDANT_DIRECTIVE_COP_DEPARTMENT = T.let(T.unsafe(nil), String)

# source://rubocop/1.42.0/lib/rubocop/ast_aliases.rb#5
RuboCop::NodePattern = RuboCop::AST::NodePattern

# source://rubocop/1.42.0/lib/rubocop/ast_aliases.rb#6
RuboCop::ProcessedSource = RuboCop::AST::ProcessedSource

# source://rubocop/1.42.0/lib/rubocop/ast_aliases.rb#7
RuboCop::Token = RuboCop::AST::Token

# source://standard//lib/standard/version.rb#1
module Standard; end

# source://standard//lib/standard/builds_config.rb#8
class Standard::BuildsConfig
  # @return [BuildsConfig] a new instance of BuildsConfig
  #
  # source://standard//lib/standard/builds_config.rb#9
  def initialize; end

  # source://standard//lib/standard/builds_config.rb#16
  def call(argv, search_path = T.unsafe(nil)); end

  private

  # source://standard//lib/standard/builds_config.rb#32
  def determine_yaml_file(argv, search_path, option_name, default_file); end
end

# source://standard//lib/standard/cli.rb#5
class Standard::Cli
  # @return [Cli] a new instance of Cli
  #
  # source://standard//lib/standard/cli.rb#6
  def initialize(argv); end

  # source://standard//lib/standard/cli.rb#12
  def run; end
end

# source://standard//lib/standard/builds_config.rb#6
class Standard::Config < ::Struct
  # Returns the value of attribute paths
  #
  # @return [Object] the current value of paths
  def paths; end

  # Sets the attribute paths
  #
  # @param value [Object] the value to set the attribute paths to.
  # @return [Object] the newly set value
  def paths=(_); end

  # Returns the value of attribute rubocop_config_store
  #
  # @return [Object] the current value of rubocop_config_store
  def rubocop_config_store; end

  # Sets the attribute rubocop_config_store
  #
  # @param value [Object] the value to set the attribute rubocop_config_store to.
  # @return [Object] the newly set value
  def rubocop_config_store=(_); end

  # Returns the value of attribute rubocop_options
  #
  # @return [Object] the current value of rubocop_options
  def rubocop_options; end

  # Sets the attribute rubocop_options
  #
  # @param value [Object] the value to set the attribute rubocop_options to.
  # @return [Object] the newly set value
  def rubocop_options=(_); end

  # Returns the value of attribute runner
  #
  # @return [Object] the current value of runner
  def runner; end

  # Sets the attribute runner
  #
  # @param value [Object] the value to set the attribute runner to.
  # @return [Object] the newly set value
  def runner=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://standard//lib/standard/creates_config_store/assigns_rubocop_yaml.rb#3
class Standard::CreatesConfigStore
  # @return [CreatesConfigStore] a new instance of CreatesConfigStore
  #
  # source://standard//lib/standard/creates_config_store.rb#10
  def initialize; end

  # source://standard//lib/standard/creates_config_store.rb#17
  def call(standard_config); end
end

# source://standard//lib/standard/creates_config_store/assigns_rubocop_yaml.rb#4
class Standard::CreatesConfigStore::AssignsRubocopYaml
  # source://standard//lib/standard/creates_config_store/assigns_rubocop_yaml.rb#5
  def call(config_store, standard_config); end

  private

  # source://standard//lib/standard/creates_config_store/assigns_rubocop_yaml.rb#12
  def rubocop_yaml_path(desired_version); end
end

# source://standard//lib/standard/creates_config_store/configures_ignored_paths.rb#2
class Standard::CreatesConfigStore::ConfiguresIgnoredPaths
  # source://standard//lib/standard/creates_config_store/configures_ignored_paths.rb#14
  def call(options_config, standard_config); end

  private

  # @return [Boolean]
  #
  # source://standard//lib/standard/creates_config_store/configures_ignored_paths.rb#41
  def absolute?(path); end

  # source://standard//lib/standard/creates_config_store/configures_ignored_paths.rb#33
  def absolutify(config_root, path); end

  # source://standard//lib/standard/creates_config_store/configures_ignored_paths.rb#28
  def ignored_patterns(standard_config); end
end

# source://standard//lib/standard/creates_config_store/configures_ignored_paths.rb#3
Standard::CreatesConfigStore::ConfiguresIgnoredPaths::DEFAULT_IGNORES = T.let(T.unsafe(nil), Array)

# source://standard//lib/standard/creates_config_store/merges_user_config_extensions.rb#4
class Standard::CreatesConfigStore::MergesUserConfigExtensions
  # source://standard//lib/standard/creates_config_store/merges_user_config_extensions.rb#12
  def call(options_config, standard_config); end

  private

  # source://standard//lib/standard/creates_config_store/merges_user_config_extensions.rb#46
  def except(hash, keys); end

  # source://standard//lib/standard/creates_config_store/merges_user_config_extensions.rb#22
  def load_and_merge_extended_rubocop_configs(standard_config); end

  # source://standard//lib/standard/creates_config_store/merges_user_config_extensions.rb#40
  def merge_extended_rules_into_standard!(options_config, extended_config); end

  # source://standard//lib/standard/creates_config_store/merges_user_config_extensions.rb#34
  def merge_standard_and_user_all_cops!(options_config, extended_config); end
end

# source://standard//lib/standard/creates_config_store/merges_user_config_extensions.rb#5
Standard::CreatesConfigStore::MergesUserConfigExtensions::DISALLOWED_ALLCOPS_KEYS = T.let(T.unsafe(nil), Array)

# source://standard//lib/standard/creates_config_store/sets_target_ruby_version.rb#2
class Standard::CreatesConfigStore::SetsTargetRubyVersion
  # source://standard//lib/standard/creates_config_store/sets_target_ruby_version.rb#12
  def call(options_config, standard_config); end

  private

  # source://standard//lib/standard/creates_config_store/sets_target_ruby_version.rb#20
  def min_target_ruby_version_supported(desired_target_ruby_version); end

  # source://standard//lib/standard/creates_config_store/sets_target_ruby_version.rb#31
  def normalize_version(version); end
end

# This is minimum version that Rubocop can parse, not the minimum
# version it can run on (e.g. TargetRubyVersion).  See the following
# for more details:
#
# https://docs.rubocop.org/rubocop/configuration.html#setting-the-target-ruby-version
#
# https://github.com/rubocop/rubocop/blob/master/lib/rubocop/target_ruby.rb
#
# source://standard//lib/standard/creates_config_store/sets_target_ruby_version.rb#10
Standard::CreatesConfigStore::SetsTargetRubyVersion::MIN_TARGET_RUBY_VERSION = T.let(T.unsafe(nil), String)

# source://standard//lib/standard/detects_fixability.rb#2
class Standard::DetectsFixability
  # source://standard//lib/standard/detects_fixability.rb#3
  def call(offenses); end

  private

  # source://standard//lib/standard/detects_fixability.rb#12
  def cop_instance(cop_name); end
end

# source://standard//lib/standard/file_finder.rb#4
class Standard::FileFinder
  # source://standard//lib/standard/file_finder.rb#5
  def call(name, search_path); end
end

# source://standard//lib/standard/formatter.rb#6
class Standard::Formatter < ::RuboCop::Formatter::BaseFormatter
  # @return [Formatter] a new instance of Formatter
  #
  # source://standard//lib/standard/formatter.rb#17
  def initialize(*args); end

  # source://standard//lib/standard/formatter.rb#29
  def file_finished(file, offenses); end

  # source://standard//lib/standard/formatter.rb#44
  def finished(_inspected_files); end

  # source://standard//lib/standard/formatter.rb#25
  def started(_target_files); end

  private

  # @return [Boolean]
  #
  # source://standard//lib/standard/formatter.rb#105
  def auto_correct_option_provided?; end

  # source://standard//lib/standard/formatter.rb#101
  def path_to(file); end

  # source://standard//lib/standard/formatter.rb#58
  def print_fix_suggestion_once(offenses); end

  # source://standard//lib/standard/formatter.rb#50
  def print_header_once; end

  # source://standard//lib/standard/formatter.rb#87
  def print_todo_congratulations; end

  # source://standard//lib/standard/formatter.rb#71
  def print_todo_warning; end

  # @return [Boolean]
  #
  # source://standard//lib/standard/formatter.rb#109
  def should_suggest_fix?(offenses); end

  class << self
    # source://standard//lib/standard/formatter.rb#11
    def fixable_error_message(command); end
  end
end

# source://standard//lib/standard/formatter.rb#7
Standard::Formatter::STANDARD_GREETING = T.let(T.unsafe(nil), String)

# source://standard//lib/standard/lsp/standardizer.rb#5
module Standard::LSP; end

# source://standard//lib/standard/lsp/server.rb#6
class Standard::LSP::Server
  # @return [Server] a new instance of Server
  #
  # source://standard//lib/standard/lsp/server.rb#16
  def initialize(standardizer); end

  # source://standard//lib/standard/lsp/server.rb#98
  def diagnostic(file_uri, text); end

  # source://standard//lib/standard/lsp/server.rb#81
  def format_file(file_uri); end

  # Returns the value of attribute logger.
  #
  # source://standard//lib/standard/lsp/server.rb#14
  def logger; end

  # Sets the attribute logger
  #
  # @param value the value to set the attribute logger to.
  #
  # source://standard//lib/standard/lsp/server.rb#14
  def logger=(_arg0); end

  # Returns the value of attribute reader.
  #
  # source://standard//lib/standard/lsp/server.rb#14
  def reader; end

  # Sets the attribute reader
  #
  # @param value the value to set the attribute reader to.
  #
  # source://standard//lib/standard/lsp/server.rb#14
  def reader=(_arg0); end

  # Returns the value of attribute standardizer.
  #
  # source://standard//lib/standard/lsp/server.rb#14
  def standardizer; end

  # Sets the attribute standardizer
  #
  # @param value the value to set the attribute standardizer to.
  #
  # source://standard//lib/standard/lsp/server.rb#14
  def standardizer=(_arg0); end

  # source://standard//lib/standard/lsp/server.rb#67
  def start; end

  # Returns the value of attribute subscribers.
  #
  # source://standard//lib/standard/lsp/server.rb#14
  def subscribers; end

  # Sets the attribute subscribers
  #
  # @param value the value to set the attribute subscribers to.
  #
  # source://standard//lib/standard/lsp/server.rb#14
  def subscribers=(_arg0); end

  # Returns the value of attribute text_cache.
  #
  # source://standard//lib/standard/lsp/server.rb#14
  def text_cache; end

  # Sets the attribute text_cache
  #
  # @param value the value to set the attribute text_cache to.
  #
  # source://standard//lib/standard/lsp/server.rb#14
  def text_cache=(_arg0); end

  # Returns the value of attribute writer.
  #
  # source://standard//lib/standard/lsp/server.rb#14
  def writer; end

  # Sets the attribute writer
  #
  # @param value the value to set the attribute writer to.
  #
  # source://standard//lib/standard/lsp/server.rb#14
  def writer=(_arg0); end

  class << self
    # source://standard//lib/standard/lsp/server.rb#10
    def start(standardizer); end
  end
end

# source://standard//lib/standard/lsp/server.rb#7
Standard::LSP::Server::Proto = LanguageServer::Protocol

# source://standard//lib/standard/lsp/server.rb#8
Standard::LSP::Server::SEV = LanguageServer::Protocol::Constant::DiagnosticSeverity

# source://standard//lib/standard/lsp/standardizer.rb#6
class Standard::LSP::Standardizer
  # @return [Standardizer] a new instance of Standardizer
  #
  # source://standard//lib/standard/lsp/standardizer.rb#7
  def initialize(config); end

  # source://standard//lib/standard/lsp/standardizer.rb#12
  def format(text); end

  # source://standard//lib/standard/lsp/standardizer.rb#16
  def offenses(text); end

  private

  # source://standard//lib/standard/lsp/standardizer.rb#43
  def capture_rubocop_stdout(config); end

  # source://standard//lib/standard/lsp/standardizer.rb#33
  def make_config(file, format); end

  # source://standard//lib/standard/lsp/standardizer.rb#24
  def run_standard(text, format:); end
end

# source://standard//lib/standard/lsp/standardizer.rb#23
Standard::LSP::Standardizer::BASENAME = T.let(T.unsafe(nil), Array)

# source://standard//lib/standard/loads_runner.rb#9
class Standard::LoadsRunner
  # source://standard//lib/standard/loads_runner.rb#19
  def call(command); end
end

# source://standard//lib/standard/loads_runner.rb#10
Standard::LoadsRunner::RUNNERS = T.let(T.unsafe(nil), Hash)

# source://standard//lib/standard/loads_yaml_config.rb#7
class Standard::LoadsYamlConfig
  # source://standard//lib/standard/loads_yaml_config.rb#8
  def call(standard_yaml_path, todo_yaml_path); end

  private

  # source://standard//lib/standard/loads_yaml_config.rb#56
  def arrayify(object); end

  # source://standard//lib/standard/loads_yaml_config.rb#25
  def construct_config(yaml_path, standard_yaml, todo_path, todo_yaml); end

  # source://standard//lib/standard/loads_yaml_config.rb#46
  def expand_ignore_config(ignore_config); end

  # source://standard//lib/standard/loads_yaml_config.rb#17
  def load_standard_yaml(yaml_path); end

  # source://standard//lib/standard/loads_yaml_config.rb#40
  def normalized_ruby_version(version); end
end

# source://standard//lib/standard/merges_settings.rb#4
class Standard::MergesSettings
  # source://standard//lib/standard/merges_settings.rb#7
  def call(argv, standard_yaml); end

  private

  # source://standard//lib/standard/merges_settings.rb#37
  def determine_command(argv); end

  # source://standard//lib/standard/merges_settings.rb#53
  def merge(standard_yaml, standard_cli_flags, rubocop_cli_flags); end

  # source://standard//lib/standard/merges_settings.rb#27
  def parse_standard_argv(argv); end

  # source://standard//lib/standard/merges_settings.rb#21
  def separate_argv(argv); end

  # source://standard//lib/standard/merges_settings.rb#63
  def without_banned(rubocop_cli_flags); end
end

# source://standard//lib/standard/merges_settings.rb#5
class Standard::MergesSettings::Settings < ::Struct
  # Returns the value of attribute options
  #
  # @return [Object] the current value of options
  def options; end

  # Sets the attribute options
  #
  # @param value [Object] the value to set the attribute options to.
  # @return [Object] the newly set value
  def options=(_); end

  # Returns the value of attribute paths
  #
  # @return [Object] the current value of paths
  def paths; end

  # Sets the attribute paths
  #
  # @param value [Object] the value to set the attribute paths to.
  # @return [Object] the newly set value
  def paths=(_); end

  # Returns the value of attribute runner
  #
  # @return [Object] the current value of runner
  def runner; end

  # Sets the attribute runner
  #
  # @param value [Object] the value to set the attribute runner to.
  # @return [Object] the newly set value
  def runner=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://standard//lib/standard/parses_cli_option.rb#4
class Standard::ParsesCliOption
  # source://standard//lib/standard/parses_cli_option.rb#16
  def argv_value_for(argv, option_name); end

  # source://standard//lib/standard/parses_cli_option.rb#5
  def call(argv, option_name); end
end

# source://standard//lib/standard/railtie.rb#4
class Standard::Railtie < ::Rails::Railtie; end

# source://standard//lib/standard/runners/rubocop.rb#4
module Standard::Runners; end

# source://standard//lib/standard/runners/genignore.rb#7
class Standard::Runners::Genignore
  # source://standard//lib/standard/runners/genignore.rb#8
  def call(config); end
end

# source://standard//lib/standard/runners/help.rb#5
class Standard::Runners::Help
  # source://standard//lib/standard/runners/help.rb#6
  def call(config); end
end

# source://standard//lib/standard/runners/lsp.rb#5
class Standard::Runners::Lsp
  # source://standard//lib/standard/runners/lsp.rb#6
  def call(config); end
end

# source://standard//lib/standard/runners/rubocop.rb#5
class Standard::Runners::Rubocop
  # source://standard//lib/standard/runners/rubocop.rb#6
  def call(config); end
end

# source://standard//lib/standard/runners/verbose_version.rb#5
class Standard::Runners::VerboseVersion
  # source://standard//lib/standard/runners/verbose_version.rb#6
  def call(config); end
end

# source://standard//lib/standard/runners/version.rb#3
class Standard::Runners::Version
  # source://standard//lib/standard/runners/version.rb#4
  def call(config); end
end

# source://standard//lib/standard/version.rb#2
Standard::VERSION = T.let(T.unsafe(nil), Gem::Version)
