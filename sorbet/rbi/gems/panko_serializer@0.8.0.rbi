# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `panko_serializer` gem.
# Please instead update this file by running `bin/tapioca gem panko_serializer`.

# source://panko_serializer//lib/panko/serializer.rb#23
class EmptySerializerContext
  # source://panko_serializer//lib/panko/serializer.rb#28
  def context; end

  # source://panko_serializer//lib/panko/serializer.rb#24
  def scope; end
end

# source://panko_serializer//lib/panko/version.rb#3
module Panko
  class << self
    def _type_cast(*_arg0); end
    def serialize_object(_arg0, _arg1, _arg2); end
    def serialize_objects(_arg0, _arg1, _arg2); end
  end
end

# source://panko_serializer//lib/panko/array_serializer.rb#4
class Panko::ArraySerializer
  # @return [ArraySerializer] a new instance of ArraySerializer
  #
  # source://panko_serializer//lib/panko/array_serializer.rb#7
  def initialize(subjects, options = T.unsafe(nil)); end

  # source://panko_serializer//lib/panko/array_serializer.rb#33
  def serialize(subjects); end

  # source://panko_serializer//lib/panko/array_serializer.rb#41
  def serialize_to_json(subjects); end

  # Returns the value of attribute subjects.
  #
  # source://panko_serializer//lib/panko/array_serializer.rb#5
  def subjects; end

  # Sets the attribute subjects
  #
  # @param value the value to set the attribute subjects to.
  #
  # source://panko_serializer//lib/panko/array_serializer.rb#5
  def subjects=(_arg0); end

  # source://panko_serializer//lib/panko/array_serializer.rb#37
  def to_a; end

  # source://panko_serializer//lib/panko/array_serializer.rb#29
  def to_json; end

  private

  # source://panko_serializer//lib/panko/array_serializer.rb#47
  def serialize_with_writer(subjects, writer); end
end

# source://panko_serializer//lib/panko/association.rb#4
class Panko::Association
  def descriptor; end
  def descriptor=(_arg0); end

  # source://panko_serializer//lib/panko/association.rb#5
  def duplicate; end

  # source://panko_serializer//lib/panko/association.rb#13
  def inspect; end

  def name_str; end
  def name_sym; end

  private

  def new(*_arg0); end

  class << self
    def new(*_arg0); end
  end
end

# source://panko_serializer//lib/panko/attribute.rb#4
class Panko::Attribute
  # source://panko_serializer//lib/panko/attribute.rb#10
  def ==(other); end

  def alias_name; end

  # @return [Boolean]
  #
  # source://panko_serializer//lib/panko/attribute.rb#21
  def eql?(other); end

  # source://panko_serializer//lib/panko/attribute.rb#17
  def hash; end

  # source://panko_serializer//lib/panko/attribute.rb#25
  def inspect; end

  def name; end

  private

  def new(*_arg0); end

  class << self
    # source://panko_serializer//lib/panko/attribute.rb#5
    def create(name, alias_name: T.unsafe(nil)); end

    def new(*_arg0); end
  end
end

# source://panko_serializer//lib/panko/response.rb#6
class Panko::JsonValue < ::Struct
  # source://panko_serializer//lib/panko/response.rb#11
  def to_json; end

  # Returns the value of attribute value
  #
  # @return [Object] the current value of value
  def value; end

  # Sets the attribute value
  #
  # @param value [Object] the value to set the attribute value to.
  # @return [Object] the newly set value
  def value=(_); end

  class << self
    def [](*_arg0); end

    # source://panko_serializer//lib/panko/response.rb#7
    def from(value); end

    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://panko_serializer//lib/panko/object_writer.rb#3
class Panko::ObjectWriter
  # @return [ObjectWriter] a new instance of ObjectWriter
  #
  # source://panko_serializer//lib/panko/object_writer.rb#4
  def initialize; end

  # source://panko_serializer//lib/panko/object_writer.rb#64
  def output; end

  # source://panko_serializer//lib/panko/object_writer.rb#48
  def pop; end

  # source://panko_serializer//lib/panko/object_writer.rb#17
  def push_array(key = T.unsafe(nil)); end

  # source://panko_serializer//lib/panko/object_writer.rb#36
  def push_json(value, key = T.unsafe(nil)); end

  # source://panko_serializer//lib/panko/object_writer.rb#22
  def push_key(key); end

  # source://panko_serializer//lib/panko/object_writer.rb#12
  def push_object(key = T.unsafe(nil)); end

  # source://panko_serializer//lib/panko/object_writer.rb#26
  def push_value(value, key = T.unsafe(nil)); end
end

# source://panko_serializer//lib/panko/response.rb#35
class Panko::Response
  # @return [Response] a new instance of Response
  #
  # source://panko_serializer//lib/panko/response.rb#36
  def initialize(data); end

  # source://panko_serializer//lib/panko/response.rb#40
  def to_json(_options = T.unsafe(nil)); end

  private

  # source://panko_serializer//lib/panko/response.rb#52
  def write(writer, data, key = T.unsafe(nil)); end

  # source://panko_serializer//lib/panko/response.rb#60
  def write_array(writer, value, key = T.unsafe(nil)); end

  # source://panko_serializer//lib/panko/response.rb#66
  def write_object(writer, value, key = T.unsafe(nil)); end

  # source://panko_serializer//lib/panko/response.rb#76
  def write_value(writer, value, key = T.unsafe(nil)); end

  class << self
    # source://panko_serializer//lib/panko/response.rb#46
    def create; end
  end
end

# source://panko_serializer//lib/panko/response.rb#16
class Panko::ResponseCreator
  class << self
    # source://panko_serializer//lib/panko/response.rb#25
    def array_serializer(data, serializer, options = T.unsafe(nil)); end

    # source://panko_serializer//lib/panko/response.rb#21
    def json(value); end

    # source://panko_serializer//lib/panko/response.rb#30
    def serializer(data, serializer, options = T.unsafe(nil)); end

    # source://panko_serializer//lib/panko/response.rb#17
    def value(value); end
  end
end

# source://panko_serializer//lib/panko/serialization_descriptor.rb#4
class Panko::SerializationDescriptor
  def aliases; end
  def aliases=(_arg0); end

  # source://panko_serializer//lib/panko/serialization_descriptor.rb#91
  def apply_association_filters(associations, only_filters, except_filters); end

  # source://panko_serializer//lib/panko/serialization_descriptor.rb#158
  def apply_attribute_filters(attributes, only, except); end

  # source://panko_serializer//lib/panko/serialization_descriptor.rb#151
  def apply_fields_filters(fields, only, except); end

  # Applies attributes and association filters
  #
  # source://panko_serializer//lib/panko/serialization_descriptor.rb#56
  def apply_filters(options); end

  def attributes; end
  def attributes=(_arg0); end
  def has_many_associations; end
  def has_many_associations=(_arg0); end
  def has_one_associations; end
  def has_one_associations=(_arg0); end
  def method_fields; end
  def method_fields=(_arg0); end

  # source://panko_serializer//lib/panko/serialization_descriptor.rb#134
  def resolve_filters(options, filter); end

  def serializer; end
  def serializer=(_arg0); end

  # source://panko_serializer//lib/panko/serialization_descriptor.rb#41
  def set_serialization_context(context); end

  def type; end
  def type=(_arg0); end

  class << self
    # Creates new description and apply the options
    # on the new descriptor
    #
    # source://panko_serializer//lib/panko/serialization_descriptor.rb#9
    def build(serializer, options = T.unsafe(nil), serialization_context = T.unsafe(nil)); end

    # Create new descriptor with same properties
    # useful when you want to apply filters
    #
    # source://panko_serializer//lib/panko/serialization_descriptor.rb#25
    def duplicate(descriptor); end
  end
end

# source://panko_serializer//lib/panko/serializer.rb#34
class Panko::Serializer
  # @return [Serializer] a new instance of Serializer
  #
  # source://panko_serializer//lib/panko/serializer.rb#109
  def initialize(options = T.unsafe(nil)); end

  # source://panko_serializer//lib/panko/serializer.rb#118
  def context; end

  # Returns the value of attribute object.
  #
  # source://panko_serializer//lib/panko/serializer.rb#127
  def object; end

  # source://panko_serializer//lib/panko/serializer.rb#122
  def scope; end

  # Sets the attribute serialization_context
  #
  # @param value the value to set the attribute serialization_context to.
  #
  # source://panko_serializer//lib/panko/serializer.rb#126
  def serialization_context=(_arg0); end

  # source://panko_serializer//lib/panko/serializer.rb#129
  def serialize(object); end

  # source://panko_serializer//lib/panko/serializer.rb#133
  def serialize_to_json(object); end

  private

  # @raise [ArgumentError]
  #
  # source://panko_serializer//lib/panko/serializer.rb#139
  def serialize_with_writer(object, writer); end

  class << self
    # Returns the value of attribute _descriptor.
    #
    # source://panko_serializer//lib/panko/serializer.rb#55
    def _descriptor; end

    # Sets the attribute _descriptor
    #
    # @param value the value to set the attribute _descriptor to.
    #
    # source://panko_serializer//lib/panko/serializer.rb#55
    def _descriptor=(_arg0); end

    # source://panko_serializer//lib/panko/serializer.rb#61
    def aliases(aliases = T.unsafe(nil)); end

    # source://panko_serializer//lib/panko/serializer.rb#57
    def attributes(*attrs); end

    # source://panko_serializer//lib/panko/serializer.rb#92
    def has_many(name, options = T.unsafe(nil)); end

    # source://panko_serializer//lib/panko/serializer.rb#76
    def has_one(name, options = T.unsafe(nil)); end

    # @private
    #
    # source://panko_serializer//lib/panko/serializer.rb#38
    def inherited(base); end

    # @private
    #
    # source://panko_serializer//lib/panko/serializer.rb#67
    def method_added(method); end
  end
end

# source://panko_serializer//lib/panko/serializer.rb#35
Panko::Serializer::SKIP = T.let(T.unsafe(nil), Object)

# source://panko_serializer//lib/panko/serializer_resolver.rb#6
class Panko::SerializerResolver
  class << self
    # source://panko_serializer//lib/panko/serializer_resolver.rb#8
    def resolve(name, from); end

    private

    # source://panko_serializer//lib/panko/serializer_resolver.rb#25
    def namespace_for(from); end

    # source://panko_serializer//lib/panko/serializer_resolver.rb#34
    def safe_serializer_get(name); end
  end
end

# source://panko_serializer//lib/panko/version.rb#4
Panko::VERSION = T.let(T.unsafe(nil), String)

# source://panko_serializer//lib/panko/serializer.rb#6
class SerializationContext
  # @return [SerializationContext] a new instance of SerializationContext
  #
  # source://panko_serializer//lib/panko/serializer.rb#9
  def initialize(context, scope); end

  # Returns the value of attribute context.
  #
  # source://panko_serializer//lib/panko/serializer.rb#7
  def context; end

  # Sets the attribute context
  #
  # @param value the value to set the attribute context to.
  #
  # source://panko_serializer//lib/panko/serializer.rb#7
  def context=(_arg0); end

  # Returns the value of attribute scope.
  #
  # source://panko_serializer//lib/panko/serializer.rb#7
  def scope; end

  # Sets the attribute scope
  #
  # @param value the value to set the attribute scope to.
  #
  # source://panko_serializer//lib/panko/serializer.rb#7
  def scope=(_arg0); end

  class << self
    # source://panko_serializer//lib/panko/serializer.rb#14
    def create(options); end
  end
end
