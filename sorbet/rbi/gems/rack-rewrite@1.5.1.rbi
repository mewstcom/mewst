# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rack-rewrite` gem.
# Please instead update this file by running `bin/tapioca gem rack-rewrite`.

# source://rack-rewrite//lib/rack/rewrite.rb#1
module Rack
  class << self
    # source://rack/3.0.8/lib/rack/version.rb#31
    def release; end

    # source://rack/3.0.8/lib/rack/version.rb#23
    def version; end
  end
end

# A rack middleware for defining and applying rewrite rules. In many cases you
# can get away with rack-rewrite instead of writing Apache mod_rewrite rules.
#
# source://rack-rewrite//lib/rack/rewrite.rb#7
class Rack::Rewrite
  # @return [Rewrite] a new instance of Rewrite
  #
  # source://rack-rewrite//lib/rack/rewrite.rb#8
  def initialize(app, given_options = T.unsafe(nil), &rule_block); end

  # source://rack-rewrite//lib/rack/rewrite.rb#18
  def call(env); end

  private

  # source://rack-rewrite//lib/rack/rewrite.rb#28
  def find_first_matching_rule(env); end
end

# TODO: Break rules into subclasses
#
# source://rack-rewrite//lib/rack/rewrite/rule.rb#108
class Rack::Rewrite::Rule
  # @return [Rule] a new instance of Rule
  #
  # source://rack-rewrite//lib/rack/rewrite/rule.rb#110
  def initialize(rule_type, from, to, options = T.unsafe(nil)); end

  # Either (a) return a Rack response (short-circuiting the Rack stack), or
  # (b) alter env as necessary and return true
  #
  # source://rack-rewrite//lib/rack/rewrite/rule.rb#128
  def apply!(env); end

  # source://rack-rewrite//lib/rack/rewrite/rule.rb#121
  def from; end

  # @return [Boolean]
  #
  # source://rack-rewrite//lib/rack/rewrite/rule.rb#114
  def matches?(rack_env); end

  # source://rack-rewrite//lib/rack/rewrite/rule.rb#109
  def options; end

  # source://rack-rewrite//lib/rack/rewrite/rule.rb#109
  def rule_type; end

  # source://rack-rewrite//lib/rack/rewrite/rule.rb#109
  def to; end

  protected

  # source://rack-rewrite//lib/rack/rewrite/rule.rb#181
  def interpret_to(env); end

  # @return [Boolean]
  #
  # source://rack-rewrite//lib/rack/rewrite/rule.rb#188
  def is_a_regexp?(obj); end

  # @return [Boolean]
  #
  # source://rack-rewrite//lib/rack/rewrite/rule.rb#192
  def match_options?(env, path = T.unsafe(nil)); end

  private

  # Construct the URL (without domain) from PATH_INFO and QUERY_STRING
  #
  # source://rack-rewrite//lib/rack/rewrite/rule.rb#250
  def build_path_from_env(env); end

  # @return [Boolean]
  #
  # source://rack-rewrite//lib/rack/rewrite/rule.rb#219
  def compute_to?(path); end

  # source://rack-rewrite//lib/rack/rewrite/rule.rb#239
  def computed_to(path); end

  # source://rack-rewrite//lib/rack/rewrite/rule.rb#214
  def interpret_to_proc(path, env); end

  # source://rack-rewrite//lib/rack/rewrite/rule.rb#223
  def match(path); end

  # source://rack-rewrite//lib/rack/rewrite/rule.rb#208
  def normalize_options(arg); end

  # source://rack-rewrite//lib/rack/rewrite/rule.rb#256
  def redirect_message(location); end

  # @return [Boolean]
  #
  # source://rack-rewrite//lib/rack/rewrite/rule.rb#227
  def string_matches?(string, matcher); end
end

# source://rack-rewrite//lib/rack/rewrite/rule.rb#5
class Rack::Rewrite::RuleSet
  # @return [RuleSet] a new instance of RuleSet
  #
  # source://rack-rewrite//lib/rack/rewrite/rule.rb#7
  def initialize(options = T.unsafe(nil)); end

  # Returns the value of attribute rules.
  #
  # source://rack-rewrite//lib/rack/rewrite/rule.rb#6
  def rules; end

  protected

  # Creates a redirect rule that will send a 302 when matching.
  #
  #  r302 '/wiki/John_Trupiano', '/john'
  #  r302 '/wiki/(.*)', 'http://www.google.com/?q=$1'
  #
  # You can use +found+ instead of +r302+.
  #
  # source://rack-rewrite//lib/rack/rewrite/rule.rb#45
  def found(*args); end

  # Creates a redirect rule that will send a 301 when matching.
  #
  #  r301 '/wiki/John_Trupiano', '/john'
  #  r301 '/contact-us.php', '/contact-us'
  #
  # You can use +moved_permanently+ or just +p+ instead of +r301+.
  #
  # source://rack-rewrite//lib/rack/rewrite/rule.rb#32
  def moved_permanently(*args); end

  # Creates a redirect rule that will send a 301 when matching.
  #
  #  r301 '/wiki/John_Trupiano', '/john'
  #  r301 '/contact-us.php', '/contact-us'
  #
  # You can use +moved_permanently+ or just +p+ instead of +r301+.
  #
  # source://rack-rewrite//lib/rack/rewrite/rule.rb#32
  def p(*args); end

  # Creates a redirect rule that will send a 301 when matching.
  #
  #  r301 '/wiki/John_Trupiano', '/john'
  #  r301 '/contact-us.php', '/contact-us'
  #
  # You can use +moved_permanently+ or just +p+ instead of +r301+.
  #
  # source://rack-rewrite//lib/rack/rewrite/rule.rb#32
  def r301(*args); end

  # Creates a redirect rule that will send a 302 when matching.
  #
  #  r302 '/wiki/John_Trupiano', '/john'
  #  r302 '/wiki/(.*)', 'http://www.google.com/?q=$1'
  #
  # You can use +found+ instead of +r302+.
  #
  # source://rack-rewrite//lib/rack/rewrite/rule.rb#45
  def r302(*args); end

  # Creates a redirect rule that will send a 303 when matching.
  #
  #  r303 '/wiki/John_Trupiano', '/john'
  #  r303 '/wiki/(.*)', 'http://www.google.com/?q=$1'
  #
  # You can use +see_other+ instead of +r303+.
  #
  # source://rack-rewrite//lib/rack/rewrite/rule.rb#57
  def r303(*args); end

  # Creates a redirect rule that will send a 307 when matching.
  #
  #  r307 '/wiki/John_Trupiano', '/john'
  #  r307 '/wiki/(.*)', 'http://www.google.com/?q=$1'
  #
  # You can use +temporary_redirect+ or +t+ instead of +r307+.
  #
  # source://rack-rewrite//lib/rack/rewrite/rule.rb#69
  def r307(*args); end

  # Creates a rewrite rule that will simply rewrite the REQUEST_URI,
  # PATH_INFO, and QUERY_STRING headers of the Rack environment.  The
  # user's browser will continue to show the initially requested URL.
  #
  #  rewrite '/wiki/John_Trupiano', '/john'
  #  rewrite %r{/wiki/(\w+)_\w+}, '/$1'
  #  rewrite %r{(.*)}, '/maintenance.html', :if => lambda { File.exists?('maintenance.html') }
  #
  # source://rack-rewrite//lib/rack/rewrite/rule.rb#22
  def rewrite(*args); end

  # Creates a redirect rule that will send a 303 when matching.
  #
  #  r303 '/wiki/John_Trupiano', '/john'
  #  r303 '/wiki/(.*)', 'http://www.google.com/?q=$1'
  #
  # You can use +see_other+ instead of +r303+.
  #
  # source://rack-rewrite//lib/rack/rewrite/rule.rb#57
  def see_other(*args); end

  # Creates a rule taht will render the raw data if matched
  #  send_data /*/, 'public/system/maintenance.html',
  #    :if => Proc.new { File.exists?('public/system/maintenance.html') }
  #
  # source://rack-rewrite//lib/rack/rewrite/rule.rb#96
  def send_data(*args); end

  # Creates a rule that will render a file if matched.
  #
  #  send_file /*/, 'public/system/maintenance.html',
  #    :if => Proc.new { File.exists?('public/system/maintenance.html') }
  #
  # source://rack-rewrite//lib/rack/rewrite/rule.rb#80
  def send_file(*args); end

  # Creates a redirect rule that will send a 307 when matching.
  #
  #  r307 '/wiki/John_Trupiano', '/john'
  #  r307 '/wiki/(.*)', 'http://www.google.com/?q=$1'
  #
  # You can use +temporary_redirect+ or +t+ instead of +r307+.
  #
  # source://rack-rewrite//lib/rack/rewrite/rule.rb#69
  def t(*args); end

  # Creates a redirect rule that will send a 307 when matching.
  #
  #  r307 '/wiki/John_Trupiano', '/john'
  #  r307 '/wiki/(.*)', 'http://www.google.com/?q=$1'
  #
  # You can use +temporary_redirect+ or +t+ instead of +r307+.
  #
  # source://rack-rewrite//lib/rack/rewrite/rule.rb#69
  def temporary_redirect(*args); end

  # Creates a rule that will render a file using x-send-file
  # if matched.
  #
  #  x_send_file /*/, 'public/system/maintenance.html',
  #    :if => Proc.new { File.exists?('public/system/maintenance.html') }
  #
  # source://rack-rewrite//lib/rack/rewrite/rule.rb#89
  def x_send_file(*args); end

  private

  # source://rack-rewrite//lib/rack/rewrite/rule.rb#101
  def add_rule(method, from, to, options = T.unsafe(nil)); end
end
